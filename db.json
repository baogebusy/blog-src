{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/termimal/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/termimal/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/termimal/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/termimal/source/js/nav.js","path":"js/nav.js","modified":0,"renderable":1},{"_id":"themes/termimal/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/termimal/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/termimal/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/termimal/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/termimal/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo_bak.png","path":"css/images/logo_bak.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/vexo/.gitignore","hash":"37fb9fd49e7f944716efd3284a6bf55adb6dd0c2","modified":1577812793393},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1577812793393},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1577812793393},{"_id":"themes/vexo/README.md","hash":"036ddc66e868b93411a15ed3fd5ed5e9101045a5","modified":1577812793394},{"_id":"themes/vexo/_config.yml","hash":"bd397ab27a46d666567b9b144cca6ba19fedfa5e","modified":1577812793394},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1577812793397},{"_id":"themes/vexo/package.json","hash":"8852c5a394ac59d219e5bbbcee10d573d33e1fc6","modified":1577812793398},{"_id":"source/_posts/AEM所使用的一些技术概念.md","hash":"3dfd307f054e84d6e5d9cd91fe3ef4a93d290260","modified":1577726182283},{"_id":"source/_posts/Adding-Comment-System-To-My-Blog.md","hash":"94ff129313b4a298f1d17d2e9db3dcb4650b6e94","modified":1577726182283},{"_id":"source/_posts/Git-s-Life-Cycle-add.md","hash":"373eb8eb1c3bbc5561107e0473291a1961312a07","modified":1577726182283},{"_id":"source/_posts/Git-s-Life-Cycle-clone.md","hash":"e8ed68a33ca237737af244d11aaf19d33423fe93","modified":1577726182283},{"_id":"source/_posts/Git-s-Life-Cycle-push.md","hash":"668d77b8e04e8eb4eb874917b98757e1b98f8e5f","modified":1577726182283},{"_id":"source/_posts/How-to-Write-a-Jquery-Plugin-Phase-1.md","hash":"ff49e327cd80006380d219f6346e059810bedd5f","modified":1577726182284},{"_id":"source/_posts/JUnit-Test-with-Mockito.md","hash":"190b9ee93dfa30896f97ad972f4af3a70b6c1264","modified":1577726182284},{"_id":"source/_posts/Markdown.md","hash":"1d1ff39ebe22548b47cca02d192d740e2edeff7d","modified":1577726182284},{"_id":"source/_posts/OSGi开发中的一些认识和总结.md","hash":"5b2256f8f3ca1273ccc34d5ded6cca8352551fb2","modified":1577726182284},{"_id":"source/_posts/Settings-for-specific-database-and-their-maven-dependencies.md","hash":"e5139bed9286e554cffa47a17c6470e8db683caa","modified":1577726182284},{"_id":"source/_posts/Sightly.md","hash":"1e909341e81e828491d2a9260735be1d879ed5d1","modified":1577726182284},{"_id":"source/_posts/SublimeText快捷键.md","hash":"fad7188e0358e71adb91402bf531f2ed06b3f179","modified":1577726182284},{"_id":"source/_posts/Summarize-for-Creating-Webstore-Project.md","hash":"a0bb43af80f77229e2529eabe33343b756f12d3c","modified":1577726182285},{"_id":"source/_posts/alias-test.md","hash":"6b9ddaa4d8fcda7e637ee50cd3bdcc2c51b538d8","modified":1577726182285},{"_id":"source/_posts/written-at-the-begining.md","hash":"67ff7cc2ee88b785bcf20fdbd4c2c2b63b85e0d9","modified":1577726182285},{"_id":"source/_posts/使用Module-Design-Pattern编写的一个购物车模块.md","hash":"21f13b43d27ad8fedd1bbdbdd0e3ef06dad45efd","modified":1577726182286},{"_id":"source/_posts/使用Tomcat-Maven插件持续快捷部署Web项目.md","hash":"93fbc8a4996fbb19054c23ae7c8a402ed4b27760","modified":1577726182286},{"_id":"source/_posts/使用jQuery-validator-开发的一个表单字段验证插件.md","hash":"748152f0429c0a1f40d2beae175687ff1f82817a","modified":1577726182286},{"_id":"source/_posts/我的第一个RESTful服务.md","hash":"f71a971770836d9fa1f5bbcbaee566d2b6516c1a","modified":1577726182286},{"_id":"source/_posts/返回顶部插件.md","hash":"bd3d179e230f1c1c8f82cb065cd325f3fb703a87","modified":1577726182286},{"_id":"source/java/index.md","hash":"5927f1e368d2a91890bbd4735d44345d330c3451","modified":1577726182287},{"_id":"source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1577812829132},{"_id":"source/aem/index.md","hash":"6a2da4c796ca745aebe16ea2cd28903c55fa6f1a","modified":1577726182287},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1577812829134},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1577812829136},{"_id":"themes/vexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1577812793388},{"_id":"themes/vexo/.git/config","hash":"9cf891bec062e2138910d9c40051c4d656da1345","modified":1577812793389},{"_id":"themes/vexo/.git/index","hash":"e6919f6ee91a4f4c3ad3ec4acb7049f3ef694c08","modified":1577812810650},{"_id":"themes/vexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1577812764920},{"_id":"themes/vexo/.git/packed-refs","hash":"ec2acd0a8b8fe9a8d21011939aeea6dffe361602","modified":1577812793385},{"_id":"themes/vexo/layout/about.ejs","hash":"76ba7418788eb2bb9ba46844f4d750734847d0b4","modified":1577812793396},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1577812793396},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1577812793396},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1577812793397},{"_id":"themes/vexo/layout/page.ejs","hash":"bc8958c120fb8569958164efb5e9dc278e2b4295","modified":1577812793397},{"_id":"themes/vexo/layout/project.ejs","hash":"666be5c72bac8165e0946428642b36dd3232983e","modified":1577812793397},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1577812793397},{"_id":"themes/vexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1577812764921},{"_id":"themes/vexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1577812764923},{"_id":"themes/vexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1577812764921},{"_id":"themes/vexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1577812764923},{"_id":"themes/vexo/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1577812764922},{"_id":"themes/vexo/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1577812764921},{"_id":"themes/vexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1577812764922},{"_id":"themes/vexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1577812764923},{"_id":"themes/vexo/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1577812764920},{"_id":"themes/vexo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1577812764922},{"_id":"themes/vexo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1577812764921},{"_id":"themes/vexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1577812764923},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1577812793395},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1577812793395},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"29db4b0211c6a9143c4d35bedd19498b02a3ceb1","modified":1577812793395},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"348c321961722a14b06032718a601e909d1232e3","modified":1577812793395},{"_id":"themes/vexo/.git/logs/HEAD","hash":"5f5e02d7dcdf71d2329c14b44b9555973ba0dbb3","modified":1577812793388},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"e544f516b23bc609cc6367190f380c879b935c21","modified":1577812793395},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1577812793395},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1577812793396},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1577812793396},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1577812793396},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1577812793396},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1577812793394},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1577812793394},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1577812793394},{"_id":"themes/vexo/source/css/_config.styl","hash":"0c9c0e77d6b8813cb76494e8d757843aab9e117b","modified":1577812793398},{"_id":"themes/vexo/source/css/style.styl","hash":"c09ad049c647cc089eaf00aa59e5d5d2a7f782d4","modified":1577812793402},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1577812793405},{"_id":"themes/vexo/source/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1577812793405},{"_id":"themes/vexo/.git/refs/heads/master","hash":"b70144f3c7679d86ef9ca6f688d9d474f73959a5","modified":1577812793388},{"_id":"themes/vexo/.git/objects/pack/pack-91274175a15de2b621b03140df1bafdcdb2261e7.idx","hash":"86961fe40de6ef1ce4c512de0374316d9773e48b","modified":1577812793378},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"8a428687f74f33426bf0c7de3fdd1f7654c26587","modified":1577812793399},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1577812793399},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"cbf3f59d3c3162700eb9cbd4cf72c8470c170f81","modified":1577812793399},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"970b6fd3d05834926c69724934b798dd5a1472e6","modified":1577812793399},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"def3a6938d925c585a7da6256a6f2e90f3b7d61e","modified":1577812793399},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"5cfd022169adda3e2a266034e7818c8ccd349212","modified":1577812793400},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1577812793400},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1577812793400},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1577812793400},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1577812793400},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1577812793401},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1577812793401},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1577812793401},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1577812793401},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1577812793401},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1577812793401},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1577812793402},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1577812793405},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1577812793402},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1577812793403},{"_id":"themes/vexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1577812793387},{"_id":"themes/vexo/.git/logs/refs/heads/master","hash":"5f5e02d7dcdf71d2329c14b44b9555973ba0dbb3","modified":1577812793389},{"_id":"themes/vexo/.git/logs/refs/remotes/origin/HEAD","hash":"5f5e02d7dcdf71d2329c14b44b9555973ba0dbb3","modified":1577812793387},{"_id":"themes/vexo/.git/objects/pack/pack-91274175a15de2b621b03140df1bafdcdb2261e7.pack","hash":"a7d93d28710d23586da1821a68f863bd30f79e67","modified":1577812793377},{"_id":"public/总结与分享","hash":"a4f10461b310162ecb9e3b82580674fd70e8dc64","modified":1577815115279},{"_id":"public/atom.xml","hash":"3d17974082a6b942bc39dc67e4bfdcab3b2c75c6","modified":1577815115280},{"_id":"public/sitemap.xml","hash":"5c533383fc12860e20305237355c6d2f656842da","modified":1577815115513},{"_id":"public/aem/index.html","hash":"28250c7a9720d322a41ecfd47b562260a0b004b6","modified":1577815518781},{"_id":"public/java/index.html","hash":"69dd259651ffbeb0f4ab607af983ab66ef25c5cb","modified":1577815518781},{"_id":"public/about/index.html","hash":"0d400331b4cb2bfe5564e7abc563b9163cd57da3","modified":1577815518782},{"_id":"public/project/index.html","hash":"c3cd6e558112dbfd23dfc6f30f04b3766cf34921","modified":1577815518782},{"_id":"public/tags/index.html","hash":"9fe0ca64fc80d9197f9df8f9f56451677eabc3e3","modified":1577815518782},{"_id":"public/2015/10/09/AEM所使用的一些技术概念/index.html","hash":"53a0e87c4c2ae8d71126c5de7231684c97353d38","modified":1577815518782},{"_id":"public/2015/08/23/Git-s-Life-Cycle-push/index.html","hash":"ed429ba06c4856f0473c133760bbb0333a4251d4","modified":1577815518782},{"_id":"public/2015/08/23/Git-s-Life-Cycle-add/index.html","hash":"ce4f74faf747ec88878c2eda25eb9285cd84806b","modified":1577815518782},{"_id":"public/2015/08/23/Git-s-Life-Cycle-clone/index.html","hash":"f287bee1dc9ebbe63b66f3d7d6e870426d37fbdc","modified":1577815518782},{"_id":"public/2015/05/23/Adding-Comment-System-To-My-Blog/index.html","hash":"79b9176e703871dadbbdcec1e099ab3ff79c421a","modified":1577815518782},{"_id":"public/2015/05/09/alias-test/index.html","hash":"4861e9c3fa16ba61a4f7cd3ce1855b65df9ebe68","modified":1577815518782},{"_id":"public/2015/05/07/written-at-the-begining/index.html","hash":"9a628cb6d5268184cff4b212e347482202b079d3","modified":1577815518782},{"_id":"public/archives/index.html","hash":"9ff82a2f6c96f97826302a4f9aaf1a5e68670879","modified":1577815518782},{"_id":"public/archives/page/2/index.html","hash":"704fe1fffe9ec744c38aa9103713325d219fea89","modified":1577815518783},{"_id":"public/archives/page/3/index.html","hash":"125074a19149dbe1e3d3394f4e62eef2152e4ff4","modified":1577815518783},{"_id":"public/archives/2015/index.html","hash":"f7f9d87278245ab82c254b9d0d910baa4da68155","modified":1577815518783},{"_id":"public/archives/2015/page/2/index.html","hash":"a6e0f6022507d74b159cb91db749e6fb10647397","modified":1577815518783},{"_id":"public/archives/2015/page/3/index.html","hash":"db1ee6ea5003726def277e193a81cce23bd9b557","modified":1577815518783},{"_id":"public/archives/2015/05/index.html","hash":"a7463df55a6965a7794808d105764d686ae14ed1","modified":1577815518784},{"_id":"public/archives/2015/07/index.html","hash":"bca88b21e2af2e0fa89bd8fa1e6d947df55c60e3","modified":1577815518784},{"_id":"public/archives/2015/08/index.html","hash":"85369d25d1534fb17b24d7073bc5decfaef149dc","modified":1577815518784},{"_id":"public/archives/2015/09/index.html","hash":"18f3bb1a9dd66bedf4354ee7a7d1e4380d179ad1","modified":1577815518784},{"_id":"public/archives/2015/10/index.html","hash":"a7a0a7faf70cd2de871ec99acd55befe371ba938","modified":1577815518784},{"_id":"public/archives/2016/index.html","hash":"72712ffcda675864bb1ab249e79806bc8b1859d2","modified":1577815518784},{"_id":"public/archives/2016/07/index.html","hash":"aeb7a6d212a30be0e7a65860d9453001db9e0cf2","modified":1577815518784},{"_id":"public/index.html","hash":"147e0c91a1efb8a1975f8b75c211cdacdd8b3d4f","modified":1577815518784},{"_id":"public/page/2/index.html","hash":"285f552068383c66e852fd5ede3c21509f409213","modified":1577815518784},{"_id":"public/page/3/index.html","hash":"1efa322fb5bc2495d69a2939e3fc8e8b29abea08","modified":1577815518784},{"_id":"public/categories/总结与分享/index.html","hash":"022cec21a7c746a8a26aa1a8482d2c8674d7d9a6","modified":1577815518784},{"_id":"public/categories/公告/index.html","hash":"887fc84ea8776f4484cae66e0a0c86f87219bb92","modified":1577815518784},{"_id":"public/categories/语言学习/index.html","hash":"32855e81f46c0a32a9b83efa98a82810d3df2b2c","modified":1577815518784},{"_id":"public/categories/Maven/index.html","hash":"66229b62188976c0b8711b5522f9590ec4f98d6d","modified":1577815518784},{"_id":"public/categories/Project/index.html","hash":"2e03371df5c084c012c65e0104443c5b1c355dd8","modified":1577815518784},{"_id":"public/categories/Lab/index.html","hash":"32adabd9746317d14408503cccef95656d58fae4","modified":1577815518784},{"_id":"public/tags/语言学习/index.html","hash":"8071fb11b2cad6abd6eca5145b1b644a1d13e4d2","modified":1577815518784},{"_id":"public/tags/OSGi/index.html","hash":"4df645f6fbf61b788a3b0d07db1c2d01def7597b","modified":1577815518785},{"_id":"public/tags/笔记/index.html","hash":"e78a00ea037c03dac6ea6dd7d93909bbfbc9b05d","modified":1577815518785},{"_id":"public/tags/笔记/page/2/index.html","hash":"12ab26a74aa177cb06b46a37255e8266bc802dc8","modified":1577815518785},{"_id":"public/tags/personal/index.html","hash":"b6f161ea98423ead93d54c11ae6e29946ec44872","modified":1577815518785},{"_id":"public/tags/工具/index.html","hash":"8ad1ed3c6beb57d95456be6548a8d1c7713057a8","modified":1577815518785},{"_id":"public/tags/jQuery/index.html","hash":"387547bde61c10371ffc8b23629bb20328f2f07b","modified":1577815518785},{"_id":"public/tags/Mockito/index.html","hash":"9eeae629cda7db0a68b95434435de17f34d12e74","modified":1577815518785},{"_id":"public/tags/JUnit/index.html","hash":"95f25e997eae4087cc59ea32e01c894c24411e0c","modified":1577815518785},{"_id":"public/tags/Javascript/index.html","hash":"9e0e80e48c8a2040bf6415acf614d86a6a6af6e8","modified":1577815518785},{"_id":"public/tags/RESTful/index.html","hash":"df91a2f3f24d471ad5060a3ccf69a0959b3cb614","modified":1577815518785},{"_id":"public/2016/07/27/JUnit-Test-with-Mockito/index.html","hash":"2adee920ea5110bcc249542e62a945461f1282db","modified":1577815518785},{"_id":"public/2015/10/31/使用Module-Design-Pattern编写的一个购物车模块/index.html","hash":"16336eff44fdb39f5f83b3a157fc4cf36924a9bd","modified":1577815518785},{"_id":"public/2015/10/09/返回顶部插件/index.html","hash":"411174fe5bcc9fdc7db7c8d268e51be6f678628c","modified":1577815518785},{"_id":"public/2015/09/11/使用jQuery-validator-开发的一个表单字段验证插件/index.html","hash":"39c501c3041cd6964e8a1a7bad9be7976006dc7e","modified":1577815518785},{"_id":"public/2015/08/25/OSGi开发中的一些认识和总结/index.html","hash":"e2ff921862596abbc66a5bcb142e3e0d90cfea89","modified":1577815518785},{"_id":"public/2015/08/16/SublimeText快捷键/index.html","hash":"93f303509e30cea13eb55c962eba84f018ee6b74","modified":1577815518785},{"_id":"public/2015/07/30/我的第一个RESTful服务/index.html","hash":"e9c8e06f638ba9092f4ecc9282ee9bd9a31821a5","modified":1577815518786},{"_id":"public/2015/07/12/使用Tomcat-Maven插件持续快捷部署Web项目/index.html","hash":"4fcd9e5d538bdc98b4a41305a19e09837921549b","modified":1577815518786},{"_id":"public/2015/07/07/Summarize-for-Creating-Webstore-Project/index.html","hash":"1f37d11c2bdd796e5df5855070ae82378ca344ac","modified":1577815518786},{"_id":"public/2015/07/04/Settings-for-specific-database-and-their-maven-dependencies/index.html","hash":"0d31c34bef21136df4d2fd1c42f5a3c40214ddae","modified":1577815518786},{"_id":"public/2015/05/24/How-to-Write-a-Jquery-Plugin-Phase-1/index.html","hash":"2d68213eebdf3e16a5ae36ce38a6e893c7b87214","modified":1577815518786},{"_id":"public/2015/05/16/Sightly/index.html","hash":"67b03fe8bfd82af14b62d9bd0351e0126bf001b0","modified":1577815518786},{"_id":"public/2015/05/09/Markdown/index.html","hash":"9f70803d2d26a19ceba368dae3d9a2a9329cefec","modified":1577815518786},{"_id":"public/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1577815115533},{"_id":"public/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1577815115533},{"_id":"public/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1577815115533},{"_id":"public/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1577815115533},{"_id":"public/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1577815115533},{"_id":"public/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1577815115533},{"_id":"public/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1577815115533},{"_id":"public/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1577815115750},{"_id":"public/css/style.css","hash":"cdd939bf4eb1bfe0c10f786a07638945c09d86fc","modified":1577815115750},{"_id":"public/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1577815115750},{"_id":"public/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1577815115751},{"_id":"public/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1577815115751},{"_id":"public/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1577815115753},{"_id":"themes/termimal/.gitignore","hash":"744b5ddecadb1c5bbf1d6c326f76e4cccc9624c4","modified":1577812246588},{"_id":"themes/termimal/LICENSE","hash":"b4fd19bc1c44273e7e9472299a85675dd4c1ac0a","modified":1577812246588},{"_id":"themes/termimal/README.md","hash":"f4fd83ed9f7679b22297c0a1f356c80eeba944c1","modified":1577812246590},{"_id":"themes/termimal/_config.yml","hash":"a0c561af819b1edfe634da99aeb461e196b1e287","modified":1577812246590},{"_id":"themes/termimal/package-lock.json","hash":"ce55d1edfa14532498f8c0b8c36807a928961e23","modified":1577812246592},{"_id":"themes/termimal/package.json","hash":"658e0b9558a874b62e3878f59ec623bd3f8973a4","modified":1577812246592},{"_id":"themes/termimal/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1577812246583},{"_id":"themes/termimal/.git/config","hash":"7dc539c89837c46558815974d0c4529363f13dc9","modified":1577812246584},{"_id":"themes/termimal/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1577812077247},{"_id":"themes/termimal/.git/index","hash":"9d3b297d3bcb2c6fe1b8d4f43fa1d3804dd3307e","modified":1577812782976},{"_id":"themes/termimal/.git/packed-refs","hash":"93a148b26a50b8e7d8d521008bf63590fd0e3e24","modified":1577812246581},{"_id":"themes/termimal/layout/index.pug","hash":"c806299804977a289a3c832063276a6ea5846a0d","modified":1577812246591},{"_id":"themes/termimal/layout/page.pug","hash":"12db0220e7a1c576e1b77c2dd3764cdff44ffd44","modified":1577812246591},{"_id":"themes/termimal/layout/post.pug","hash":"f3b312692287eeaeef7ee4b7e001d7de72fb44bb","modified":1577812246591},{"_id":"themes/termimal/Preview.png","hash":"9b49b9e9cedf869c817c7fc1982fb9976624ae90","modified":1577812246589},{"_id":"themes/termimal/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1577812077248},{"_id":"themes/termimal/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1577812077249},{"_id":"themes/termimal/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1577812077249},{"_id":"themes/termimal/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1577812077251},{"_id":"themes/termimal/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1577812077248},{"_id":"themes/termimal/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1577812077251},{"_id":"themes/termimal/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1577812077250},{"_id":"themes/termimal/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1577812077250},{"_id":"themes/termimal/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1577812077251},{"_id":"themes/termimal/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1577812077248},{"_id":"themes/termimal/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1577812077252},{"_id":"themes/termimal/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1577812077247},{"_id":"themes/termimal/.git/logs/HEAD","hash":"8db4241a77a2a76af2587d43999f2f94aa08b5cd","modified":1577812246583},{"_id":"themes/termimal/layout/includes/footer.pug","hash":"301854a28c2f72e5f20c460121667cdabc204388","modified":1577812246590},{"_id":"themes/termimal/layout/includes/header.pug","hash":"78d3ee3aaf1674a026b230cd21c46487f81c82d0","modified":1577812246590},{"_id":"themes/termimal/layout/includes/layout.pug","hash":"80d07ad3339ea0feecd1cc6f8d402dcef4744301","modified":1577812246590},{"_id":"themes/termimal/layout/includes/nav.pug","hash":"e4facfa5337c2ea5a04737011e38c2a343fb64e9","modified":1577812246590},{"_id":"themes/termimal/layout/includes/pagination.pug","hash":"01dfc8d2221168433a688032e925e8d271b54e53","modified":1577812246590},{"_id":"themes/termimal/layout/includes/recent-posts.pug","hash":"a6f7e990410a06970aba2cac77a358fa0f7d2df1","modified":1577812246591},{"_id":"themes/termimal/layout/includes/terminal.pug","hash":"03914ea0dab49abe9812e02eebbb1c69cfb6b1d3","modified":1577812246591},{"_id":"themes/termimal/source/css/index.styl","hash":"9f102e84021185b32a805a4649d8a364e046aea5","modified":1577812246596},{"_id":"themes/termimal/source/css/var.styl","hash":"930298600a486e9dad1b5ccd5b3b236f74cd7ea2","modified":1577812246596},{"_id":"themes/termimal/source/js/index.js","hash":"1140a6dc4860d145817014c944c233c2030df49d","modified":1577812246597},{"_id":"themes/termimal/source/js/nav.js","hash":"ffa468b4a903c78c4307a3dc10975cb62387c930","modified":1577812246597},{"_id":"themes/termimal/source/js/scroll.js","hash":"89a8419e83e38cc716a0ce65b4fcb4d5fed3947a","modified":1577812246598},{"_id":"themes/termimal/source/img/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1577812246597},{"_id":"themes/termimal/layout/includes/terminal/terminal-selfie.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577812246591},{"_id":"themes/termimal/.git/objects/pack/pack-5214b2a1f00cfdc1319eb3e6394e66c5cd0bf90f.idx","hash":"95ebc6d83ae432b1957eccd1203beb9be5398c5f","modified":1577812246572},{"_id":"themes/termimal/.git/refs/heads/master","hash":"8d5c460eeafe5be3aa5776c70c8796cd86fd560d","modified":1577812246583},{"_id":"themes/termimal/layout/includes/terminal/terminal-categories.pug","hash":"af3afbd53c67b2695b396c727d6f07e731fb54c2","modified":1577812246591},{"_id":"themes/termimal/layout/includes/terminal/terminal-post.pug","hash":"6f61aac9ff86461212aab906151e8d4148ffb942","modified":1577812246591},{"_id":"themes/termimal/layout/includes/terminal/terminal-tags.pug","hash":"da1ed3c6fea0a452359c7e79c02dacff681e4c4a","modified":1577812246591},{"_id":"themes/termimal/source/css/_extend/extend.styl","hash":"f92a29c9b8a0ae441763a6104a77fe127978bc47","modified":1577812246593},{"_id":"themes/termimal/source/css/_function/function.styl","hash":"d2414f78ff13339010e39e536ba811b304ba16a7","modified":1577812246593},{"_id":"themes/termimal/source/css/_global/global.styl","hash":"315123e1a0a5b2051bc9648ff71f63bea1502d2b","modified":1577812246594},{"_id":"themes/termimal/source/css/_layout/content.styl","hash":"0ad4f9374b0b596505ebd05e4b20260cc4e1fe6e","modified":1577812246594},{"_id":"themes/termimal/source/css/_layout/footer.styl","hash":"d71722d0e2fd5402a8dadc7ba033d52256dbbf01","modified":1577812246595},{"_id":"themes/termimal/source/css/_layout/header.styl","hash":"b278ecc8b7e70ad69698c4abe31459499765da92","modified":1577812246595},{"_id":"themes/termimal/source/css/_layout/nav.styl","hash":"6aa6b3135059d1a29d48533a01c2d6f052c72d23","modified":1577812246595},{"_id":"themes/termimal/source/css/_layout/pagination.styl","hash":"074192e86dd4147a4e282fe5e9dd725e2970af32","modified":1577812246595},{"_id":"themes/termimal/source/css/_layout/post.styl","hash":"0f7cb34a1829b26df4d4e75654df627b3aa2f760","modified":1577812246595},{"_id":"themes/termimal/source/css/_layout/post_code.styl","hash":"9948f583c89fbc2d44c6e7d334e09333c6e87ac4","modified":1577812246595},{"_id":"themes/termimal/source/css/_page/categories.styl","hash":"8089f7f5812b3ba349e8864567aef35dc17e59fe","modified":1577812246596},{"_id":"themes/termimal/source/css/_page/tags.styl","hash":"e015f3b9e9f9c7098e1c4646a84075e603fdfcb5","modified":1577812246596},{"_id":"themes/termimal/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1577812246596},{"_id":"themes/termimal/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1577812246599},{"_id":"themes/termimal/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1577812246599},{"_id":"themes/termimal/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1577812246598},{"_id":"themes/termimal/.git/logs/refs/heads/master","hash":"8db4241a77a2a76af2587d43999f2f94aa08b5cd","modified":1577812246584},{"_id":"themes/termimal/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1577812246582},{"_id":"themes/termimal/.git/logs/refs/remotes/origin/HEAD","hash":"8db4241a77a2a76af2587d43999f2f94aa08b5cd","modified":1577812246582},{"_id":"themes/termimal/.git/objects/pack/pack-5214b2a1f00cfdc1319eb3e6394e66c5cd0bf90f.pack","hash":"a3764c406238606c61615964b8eb9b2fa31ff0f8","modified":1577812246571},{"_id":"public/css/index.css","hash":"1c23cbfd746a4cc844d2ab9e5b7edeb9f69d5b15","modified":1577815355888},{"_id":"public/js/nav.js","hash":"ffa468b4a903c78c4307a3dc10975cb62387c930","modified":1577815355888},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577815355889},{"_id":"public/js/scroll.js","hash":"89a8419e83e38cc716a0ce65b4fcb4d5fed3947a","modified":1577815355889},{"_id":"public/js/index.js","hash":"1140a6dc4860d145817014c944c233c2030df49d","modified":1577815355889},{"_id":"public/img/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1577815355889},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1577815355895},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1577815355895},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1577815355895}],"Category":[{"name":"总结与分享","_id":"ck4u6dq1m0004qyvyvqjsfdci"},{"name":"公告","_id":"ck4u6dq1r000bqyvy0w485n8w"},{"name":"语言学习","_id":"ck4u6dq22000nqyvy2sovcudy"},{"name":"Maven","_id":"ck4u6dq280012qyvybvxk51i2"},{"name":"Project","_id":"ck4u6dq2a001cqyvy41uenxds"},{"name":"Lab","_id":"ck4u6dq2d001lqyvy262bqxo7"}],"Data":[],"Page":[{"title":"java","date":"2015-05-07T13:56:11.000Z","_content":"","source":"java/index.md","raw":"title: \"java\"\ndate: 2015-05-07 21:56:11\n---\n","updated":"2019-12-30T17:16:22.287Z","path":"java/index.html","comments":1,"layout":"page","_id":"ck4u6dq1j0001qyvyxuxo5ndc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---","date":"2019-12-31T17:20:29.132Z","updated":"2019-12-31T17:20:29.132Z","path":"about/index.html","comments":1,"_id":"ck4u6dq1l0003qyvykxrcqh78","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"aem","date":"2015-05-07T13:56:27.000Z","_content":"","source":"aem/index.md","raw":"title: \"aem\"\ndate: 2015-05-07 21:56:27\n---\n","updated":"2019-12-30T17:16:22.287Z","path":"aem/index.html","comments":1,"layout":"page","_id":"ck4u6dq1o0007qyvyd3rtuytt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2019-12-31T17:20:29.134Z","updated":"2019-12-31T17:20:29.134Z","path":"project/index.html","comments":1,"_id":"ck4u6dq1q0009qyvylv7vexhy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2019-12-31T17:20:29.136Z","updated":"2019-12-31T17:20:29.136Z","path":"tags/index.html","comments":1,"_id":"ck4u6dq1s000dqyvyn6qtu12l","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AEM所使用的一些技术概念","date":"2015-10-09T13:17:58.000Z","alias":null,"_content":"## 前言\n以下是自已在火车上看书看文档理解的一些关于AEM的概念\n\n## OSGi一些注释的含义\n\n### 首先是类级别的注释\n`@Component`唯一一个必须注释，允许OSGi定义和描述以注册你的组件到OSGi容器中，将会定义<component>以及<implementation>将会被自动创建\n\n`@Service`定义了这个组件是否提供或提供什么类型的服务\n\n`@Property`定义了类级别的属性，用于定义属性的初始值，这些属性可以通过web console修改并通过ComponentContext.getProperties()得到\n\n### 其次是类成员的注释\n`@Reference`定义了对其他服务的引用，这些被消费的引用将会在运行期间进行绑定，这也可以在类上面进行注释\n\n### 最后是方法的注释\n\n`@Activate` `@Deactivate` `@Modified`\n这三个注释定义了在对类进行初始化，注销和修改状态时所要进行的动作\n\n注意注意：OSGi都是面向接口操作，所以所有的OSGi组件都要有对应的接口！！！\n\n## Apache sling\nApache sling是一个web框架，它使用类似于apache jackrabbit 或者Adobe CRX来存储和管理内容\n它有一个默认的http get和http post Servlet来处理请求，可以直接访问\n\n如果是post操作，并且所访问的内容不存在，则创建节点，如果存在则修改\n这些操作都是基于http method进行的\n\n - GET 查询\n - POST 添加/修改\n - DELETE 删除\n\n## 适配器模式\n一个适配器帮助两个相互兼容的接口来共同工作，适配器模式是用来让两个各自实现了能够相互兼容的接口的类来共同工作。sling提供了适配器模式来更方便地把同时实现了Adapter接口的两个类进行适配。这两个类都有adaptTo(Target.class)方法，以便把当前的类翻译成目标类\n\n比如说我想把Resource适配成Node\n```java\n\nNode node = resource.adaptTo(Node.class)\n```\n这将会把当前的资源映射成一个新的node对象使用\nResource还可以适配成其他11种类型，常用的有`Node`,`ValueMap`,`Map`,`Property`,`Item`,`InputStream`,`URL`,`File`,`Servlet`\n\n而`Resource Resolver`可以适配成其他17类，常用的有`Session`,`PageManager`,`ComponentManager`,`Designer`,`Assets Manager`,`TagManager`,`UserManager`,`User`,`Authorizable`\n\n注意：如果想要容器帮你注入(使用@Inject,@Self,@Property)则这些属性必须是用public修饰\n","source":"_posts/AEM所使用的一些技术概念.md","raw":"title: \"AEM所使用的一些技术概念\"\ndate: 2015-10-09 21:17:58\nalias: \ntags:\n - 语言学习\n - OSGi\n - 笔记\ncategories: 总结与分享\n\n---\n## 前言\n以下是自已在火车上看书看文档理解的一些关于AEM的概念\n\n## OSGi一些注释的含义\n\n### 首先是类级别的注释\n`@Component`唯一一个必须注释，允许OSGi定义和描述以注册你的组件到OSGi容器中，将会定义<component>以及<implementation>将会被自动创建\n\n`@Service`定义了这个组件是否提供或提供什么类型的服务\n\n`@Property`定义了类级别的属性，用于定义属性的初始值，这些属性可以通过web console修改并通过ComponentContext.getProperties()得到\n\n### 其次是类成员的注释\n`@Reference`定义了对其他服务的引用，这些被消费的引用将会在运行期间进行绑定，这也可以在类上面进行注释\n\n### 最后是方法的注释\n\n`@Activate` `@Deactivate` `@Modified`\n这三个注释定义了在对类进行初始化，注销和修改状态时所要进行的动作\n\n注意注意：OSGi都是面向接口操作，所以所有的OSGi组件都要有对应的接口！！！\n\n## Apache sling\nApache sling是一个web框架，它使用类似于apache jackrabbit 或者Adobe CRX来存储和管理内容\n它有一个默认的http get和http post Servlet来处理请求，可以直接访问\n\n如果是post操作，并且所访问的内容不存在，则创建节点，如果存在则修改\n这些操作都是基于http method进行的\n\n - GET 查询\n - POST 添加/修改\n - DELETE 删除\n\n## 适配器模式\n一个适配器帮助两个相互兼容的接口来共同工作，适配器模式是用来让两个各自实现了能够相互兼容的接口的类来共同工作。sling提供了适配器模式来更方便地把同时实现了Adapter接口的两个类进行适配。这两个类都有adaptTo(Target.class)方法，以便把当前的类翻译成目标类\n\n比如说我想把Resource适配成Node\n```java\n\nNode node = resource.adaptTo(Node.class)\n```\n这将会把当前的资源映射成一个新的node对象使用\nResource还可以适配成其他11种类型，常用的有`Node`,`ValueMap`,`Map`,`Property`,`Item`,`InputStream`,`URL`,`File`,`Servlet`\n\n而`Resource Resolver`可以适配成其他17类，常用的有`Session`,`PageManager`,`ComponentManager`,`Designer`,`Assets Manager`,`TagManager`,`UserManager`,`User`,`Authorizable`\n\n注意：如果想要容器帮你注入(使用@Inject,@Self,@Property)则这些属性必须是用public修饰\n","slug":"AEM所使用的一些技术概念","published":1,"updated":"2019-12-30T17:16:22.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq1e0000qyvyl4eoj9oc","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以下是自已在火车上看书看文档理解的一些关于AEM的概念</p>\n<h2 id=\"OSGi一些注释的含义\"><a href=\"#OSGi一些注释的含义\" class=\"headerlink\" title=\"OSGi一些注释的含义\"></a>OSGi一些注释的含义</h2><h3 id=\"首先是类级别的注释\"><a href=\"#首先是类级别的注释\" class=\"headerlink\" title=\"首先是类级别的注释\"></a>首先是类级别的注释</h3><p><code>@Component</code>唯一一个必须注释，允许OSGi定义和描述以注册你的组件到OSGi容器中，将会定义<component>以及<implementation>将会被自动创建</implementation></component></p>\n<p><code>@Service</code>定义了这个组件是否提供或提供什么类型的服务</p>\n<p><code>@Property</code>定义了类级别的属性，用于定义属性的初始值，这些属性可以通过web console修改并通过ComponentContext.getProperties()得到</p>\n<h3 id=\"其次是类成员的注释\"><a href=\"#其次是类成员的注释\" class=\"headerlink\" title=\"其次是类成员的注释\"></a>其次是类成员的注释</h3><p><code>@Reference</code>定义了对其他服务的引用，这些被消费的引用将会在运行期间进行绑定，这也可以在类上面进行注释</p>\n<h3 id=\"最后是方法的注释\"><a href=\"#最后是方法的注释\" class=\"headerlink\" title=\"最后是方法的注释\"></a>最后是方法的注释</h3><p><code>@Activate</code> <code>@Deactivate</code> <code>@Modified</code><br>这三个注释定义了在对类进行初始化，注销和修改状态时所要进行的动作</p>\n<p>注意注意：OSGi都是面向接口操作，所以所有的OSGi组件都要有对应的接口！！！</p>\n<h2 id=\"Apache-sling\"><a href=\"#Apache-sling\" class=\"headerlink\" title=\"Apache sling\"></a>Apache sling</h2><p>Apache sling是一个web框架，它使用类似于apache jackrabbit 或者Adobe CRX来存储和管理内容<br>它有一个默认的http get和http post Servlet来处理请求，可以直接访问</p>\n<p>如果是post操作，并且所访问的内容不存在，则创建节点，如果存在则修改<br>这些操作都是基于http method进行的</p>\n<ul>\n<li>GET 查询</li>\n<li>POST 添加/修改</li>\n<li>DELETE 删除</li>\n</ul>\n<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p>一个适配器帮助两个相互兼容的接口来共同工作，适配器模式是用来让两个各自实现了能够相互兼容的接口的类来共同工作。sling提供了适配器模式来更方便地把同时实现了Adapter接口的两个类进行适配。这两个类都有adaptTo(Target.class)方法，以便把当前的类翻译成目标类</p>\n<p>比如说我想把Resource适配成Node<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Node node = resource.adaptTo(Node<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br></pre></td></tr></table></figure></p>\n<p>这将会把当前的资源映射成一个新的node对象使用<br>Resource还可以适配成其他11种类型，常用的有<code>Node</code>,<code>ValueMap</code>,<code>Map</code>,<code>Property</code>,<code>Item</code>,<code>InputStream</code>,<code>URL</code>,<code>File</code>,<code>Servlet</code></p>\n<p>而<code>Resource Resolver</code>可以适配成其他17类，常用的有<code>Session</code>,<code>PageManager</code>,<code>ComponentManager</code>,<code>Designer</code>,<code>Assets Manager</code>,<code>TagManager</code>,<code>UserManager</code>,<code>User</code>,<code>Authorizable</code></p>\n<p>注意：如果想要容器帮你注入(使用@Inject,@Self,@Property)则这些属性必须是用public修饰</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以下是自已在火车上看书看文档理解的一些关于AEM的概念</p>\n<h2 id=\"OSGi一些注释的含义\"><a href=\"#OSGi一些注释的含义\" class=\"headerlink\" title=\"OSGi一些注释的含义\"></a>OSGi一些注释的含义</h2><h3 id=\"首先是类级别的注释\"><a href=\"#首先是类级别的注释\" class=\"headerlink\" title=\"首先是类级别的注释\"></a>首先是类级别的注释</h3><p><code>@Component</code>唯一一个必须注释，允许OSGi定义和描述以注册你的组件到OSGi容器中，将会定义<component>以及<implementation>将会被自动创建</implementation></component></p>\n<p><code>@Service</code>定义了这个组件是否提供或提供什么类型的服务</p>\n<p><code>@Property</code>定义了类级别的属性，用于定义属性的初始值，这些属性可以通过web console修改并通过ComponentContext.getProperties()得到</p>\n<h3 id=\"其次是类成员的注释\"><a href=\"#其次是类成员的注释\" class=\"headerlink\" title=\"其次是类成员的注释\"></a>其次是类成员的注释</h3><p><code>@Reference</code>定义了对其他服务的引用，这些被消费的引用将会在运行期间进行绑定，这也可以在类上面进行注释</p>\n<h3 id=\"最后是方法的注释\"><a href=\"#最后是方法的注释\" class=\"headerlink\" title=\"最后是方法的注释\"></a>最后是方法的注释</h3><p><code>@Activate</code> <code>@Deactivate</code> <code>@Modified</code><br>这三个注释定义了在对类进行初始化，注销和修改状态时所要进行的动作</p>\n<p>注意注意：OSGi都是面向接口操作，所以所有的OSGi组件都要有对应的接口！！！</p>\n<h2 id=\"Apache-sling\"><a href=\"#Apache-sling\" class=\"headerlink\" title=\"Apache sling\"></a>Apache sling</h2><p>Apache sling是一个web框架，它使用类似于apache jackrabbit 或者Adobe CRX来存储和管理内容<br>它有一个默认的http get和http post Servlet来处理请求，可以直接访问</p>\n<p>如果是post操作，并且所访问的内容不存在，则创建节点，如果存在则修改<br>这些操作都是基于http method进行的</p>\n<ul>\n<li>GET 查询</li>\n<li>POST 添加/修改</li>\n<li>DELETE 删除</li>\n</ul>\n<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p>一个适配器帮助两个相互兼容的接口来共同工作，适配器模式是用来让两个各自实现了能够相互兼容的接口的类来共同工作。sling提供了适配器模式来更方便地把同时实现了Adapter接口的两个类进行适配。这两个类都有adaptTo(Target.class)方法，以便把当前的类翻译成目标类</p>\n<p>比如说我想把Resource适配成Node<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Node node = resource.adaptTo(Node<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br></pre></td></tr></table></figure></p>\n<p>这将会把当前的资源映射成一个新的node对象使用<br>Resource还可以适配成其他11种类型，常用的有<code>Node</code>,<code>ValueMap</code>,<code>Map</code>,<code>Property</code>,<code>Item</code>,<code>InputStream</code>,<code>URL</code>,<code>File</code>,<code>Servlet</code></p>\n<p>而<code>Resource Resolver</code>可以适配成其他17类，常用的有<code>Session</code>,<code>PageManager</code>,<code>ComponentManager</code>,<code>Designer</code>,<code>Assets Manager</code>,<code>TagManager</code>,<code>UserManager</code>,<code>User</code>,<code>Authorizable</code></p>\n<p>注意：如果想要容器帮你注入(使用@Inject,@Self,@Property)则这些属性必须是用public修饰</p>\n"},{"title":"Adding Comment System To My Blog","date":"2015-05-22T17:01:20.000Z","alias":null,"_content":"趁今天有点时间，把博客的评论系统给完善了，感觉一下子完整了许多。查看以及对比了许多博客网站，感觉自己做的还有许多地方需要改进修善，一步一步来吧，明天周末，想想有什么好的点子先。\n未完待续。。","source":"_posts/Adding-Comment-System-To-My-Blog.md","raw":"title: \"Adding Comment System To My Blog\"\ndate: 2015-05-23 01:01:20\nalias: \ntags:\n- 笔记\n- personal\ncategories: 公告\n\n---\n趁今天有点时间，把博客的评论系统给完善了，感觉一下子完整了许多。查看以及对比了许多博客网站，感觉自己做的还有许多地方需要改进修善，一步一步来吧，明天周末，想想有什么好的点子先。\n未完待续。。","slug":"Adding-Comment-System-To-My-Blog","published":1,"updated":"2019-12-30T17:16:22.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq1k0002qyvy1tpnot64","content":"<p>趁今天有点时间，把博客的评论系统给完善了，感觉一下子完整了许多。查看以及对比了许多博客网站，感觉自己做的还有许多地方需要改进修善，一步一步来吧，明天周末，想想有什么好的点子先。<br>未完待续。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>趁今天有点时间，把博客的评论系统给完善了，感觉一下子完整了许多。查看以及对比了许多博客网站，感觉自己做的还有许多地方需要改进修善，一步一步来吧，明天周末，想想有什么好的点子先。<br>未完待续。。</p>\n"},{"title":"Git's Life Cycle-add","date":"2015-08-23T14:44:34.000Z","alias":null,"_content":"\n继续之前的笔记。\n\n## git add语法\n\n``` \n'git add' [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n\t  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n\t  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]\n\t  [--] [<pathspec>...]\n```\n**`git add` 添加文件到本地索引**\n\n` <pathspec> ` - 定要添加文件或目录，但不是提交，只会对文件做一个状态的记录，记录文件或目录状态是new\n## git add 语法示例：\n```\ngit add .        /*添加当前目录下的所有新文件或新修改的文件（用文件指代，下同），但不包括目录*/\ngit add /dir/*   /*添加dir目录下的所有文件，或子目录及子目录下的文件*/\ngit add *.java   /*添加当前目录下所有的java文件，子目录下的java文件会不会添加有待实验*/\ngit add -A       /*添加本地仓库下所有的文件*/\ngit add --no-all /*若修改一个文件后你删除了它，但不想让这个删除被记录（此后提交将忽略删除，不常用）*/\n```\n## 其他可选的选项（options）\n``` java\n\n$ git add <pathspec> -n                /*不会真正地添加记录，只是帮助查看有此次有哪些文件将会被添加或被忽略*/\n$ git add <pathspec> -f                /*强制添加，即使文件已经在.gitignore中被标记为忽略*/\n$ git add <pathspec> -i                /*在Interactive mode中添加文件到仓库的index中*/\n$ git add <pathspec> -e                /*将会打开一个编辑器对比文件（新旧对比），在用户关闭编辑器后添加文件记录*/\n$ git add <pathspec> -u                /*只会更新现有的已经修改的文件，不会添加文件*/\n$ git add <pathspec> --refresh         /*只会更新文件状态，不会新添加文件*/\n$ git add <pathspec> ---ignore-missing /*添加过程出错时忽略当前文件，当前文件将添加索引并继续当前操作*/\n$ git add <pathspec> --                /*如果添加的文件名是git保留字关键字，则用--来加以区分*/\n\n```\n## 参考文档\n{% blockquote Git-SCM http://git-scm.com/docs/git-add git-add官方文档%}\n{% endblockquote %}\n","source":"_posts/Git-s-Life-Cycle-add.md","raw":"title: \"Git's Life Cycle-add\"\ndate: 2015-08-23 22:44:34\nalias: \ntags: \n- 笔记 \n- 工具\ncategories: 总结与分享\n\n---\n\n继续之前的笔记。\n\n## git add语法\n\n``` \n'git add' [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n\t  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n\t  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]\n\t  [--] [<pathspec>...]\n```\n**`git add` 添加文件到本地索引**\n\n` <pathspec> ` - 定要添加文件或目录，但不是提交，只会对文件做一个状态的记录，记录文件或目录状态是new\n## git add 语法示例：\n```\ngit add .        /*添加当前目录下的所有新文件或新修改的文件（用文件指代，下同），但不包括目录*/\ngit add /dir/*   /*添加dir目录下的所有文件，或子目录及子目录下的文件*/\ngit add *.java   /*添加当前目录下所有的java文件，子目录下的java文件会不会添加有待实验*/\ngit add -A       /*添加本地仓库下所有的文件*/\ngit add --no-all /*若修改一个文件后你删除了它，但不想让这个删除被记录（此后提交将忽略删除，不常用）*/\n```\n## 其他可选的选项（options）\n``` java\n\n$ git add <pathspec> -n                /*不会真正地添加记录，只是帮助查看有此次有哪些文件将会被添加或被忽略*/\n$ git add <pathspec> -f                /*强制添加，即使文件已经在.gitignore中被标记为忽略*/\n$ git add <pathspec> -i                /*在Interactive mode中添加文件到仓库的index中*/\n$ git add <pathspec> -e                /*将会打开一个编辑器对比文件（新旧对比），在用户关闭编辑器后添加文件记录*/\n$ git add <pathspec> -u                /*只会更新现有的已经修改的文件，不会添加文件*/\n$ git add <pathspec> --refresh         /*只会更新文件状态，不会新添加文件*/\n$ git add <pathspec> ---ignore-missing /*添加过程出错时忽略当前文件，当前文件将添加索引并继续当前操作*/\n$ git add <pathspec> --                /*如果添加的文件名是git保留字关键字，则用--来加以区分*/\n\n```\n## 参考文档\n{% blockquote Git-SCM http://git-scm.com/docs/git-add git-add官方文档%}\n{% endblockquote %}\n","slug":"Git-s-Life-Cycle-add","published":1,"updated":"2019-12-30T17:16:22.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq1n0006qyvyq0v6dblp","content":"<p>继续之前的笔记。</p>\n<h2 id=\"git-add语法\"><a href=\"#git-add语法\" class=\"headerlink\" title=\"git add语法\"></a>git add语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;git add&apos; [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]</span><br><span class=\"line\">\t  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]</span><br><span class=\"line\">\t  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]</span><br><span class=\"line\">\t  [--] [&lt;pathspec&gt;...]</span><br></pre></td></tr></table></figure>\n<p><strong><code>git add</code> 添加文件到本地索引</strong></p>\n<p><code>&lt;pathspec&gt;</code> - 定要添加文件或目录，但不是提交，只会对文件做一个状态的记录，记录文件或目录状态是new</p>\n<h2 id=\"git-add-语法示例：\"><a href=\"#git-add-语法示例：\" class=\"headerlink\" title=\"git add 语法示例：\"></a>git add 语法示例：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .        /*添加当前目录下的所有新文件或新修改的文件（用文件指代，下同），但不包括目录*/</span><br><span class=\"line\">git add /dir/*   /*添加dir目录下的所有文件，或子目录及子目录下的文件*/</span><br><span class=\"line\">git add *.java   /*添加当前目录下所有的java文件，子目录下的java文件会不会添加有待实验*/</span><br><span class=\"line\">git add -A       /*添加本地仓库下所有的文件*/</span><br><span class=\"line\">git add --no-all /*若修改一个文件后你删除了它，但不想让这个删除被记录（此后提交将忽略删除，不常用）*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他可选的选项（options）\"><a href=\"#其他可选的选项（options）\" class=\"headerlink\" title=\"其他可选的选项（options）\"></a>其他可选的选项（options）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git add &lt;pathspec&gt; -n                <span class=\"comment\">/*不会真正地添加记录，只是帮助查看有此次有哪些文件将会被添加或被忽略*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; -f                <span class=\"comment\">/*强制添加，即使文件已经在.gitignore中被标记为忽略*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; -i                <span class=\"comment\">/*在Interactive mode中添加文件到仓库的index中*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; -e                <span class=\"comment\">/*将会打开一个编辑器对比文件（新旧对比），在用户关闭编辑器后添加文件记录*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; -u                <span class=\"comment\">/*只会更新现有的已经修改的文件，不会添加文件*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; --refresh         <span class=\"comment\">/*只会更新文件状态，不会新添加文件*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; ---ignore-missing <span class=\"comment\">/*添加过程出错时忽略当前文件，当前文件将添加索引并继续当前操作*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; --                <span class=\"comment\">/*如果添加的文件名是git保留字关键字，则用--来加以区分*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote><footer><strong>Git-SCM</strong><cite><a href=\"http://git-scm.com/docs/git-add\" target=\"_blank\" rel=\"noopener\">git-add官方文档</a></cite></footer></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>继续之前的笔记。</p>\n<h2 id=\"git-add语法\"><a href=\"#git-add语法\" class=\"headerlink\" title=\"git add语法\"></a>git add语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;git add&apos; [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]</span><br><span class=\"line\">\t  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]</span><br><span class=\"line\">\t  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]</span><br><span class=\"line\">\t  [--] [&lt;pathspec&gt;...]</span><br></pre></td></tr></table></figure>\n<p><strong><code>git add</code> 添加文件到本地索引</strong></p>\n<p><code>&lt;pathspec&gt;</code> - 定要添加文件或目录，但不是提交，只会对文件做一个状态的记录，记录文件或目录状态是new</p>\n<h2 id=\"git-add-语法示例：\"><a href=\"#git-add-语法示例：\" class=\"headerlink\" title=\"git add 语法示例：\"></a>git add 语法示例：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .        /*添加当前目录下的所有新文件或新修改的文件（用文件指代，下同），但不包括目录*/</span><br><span class=\"line\">git add /dir/*   /*添加dir目录下的所有文件，或子目录及子目录下的文件*/</span><br><span class=\"line\">git add *.java   /*添加当前目录下所有的java文件，子目录下的java文件会不会添加有待实验*/</span><br><span class=\"line\">git add -A       /*添加本地仓库下所有的文件*/</span><br><span class=\"line\">git add --no-all /*若修改一个文件后你删除了它，但不想让这个删除被记录（此后提交将忽略删除，不常用）*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他可选的选项（options）\"><a href=\"#其他可选的选项（options）\" class=\"headerlink\" title=\"其他可选的选项（options）\"></a>其他可选的选项（options）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git add &lt;pathspec&gt; -n                <span class=\"comment\">/*不会真正地添加记录，只是帮助查看有此次有哪些文件将会被添加或被忽略*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; -f                <span class=\"comment\">/*强制添加，即使文件已经在.gitignore中被标记为忽略*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; -i                <span class=\"comment\">/*在Interactive mode中添加文件到仓库的index中*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; -e                <span class=\"comment\">/*将会打开一个编辑器对比文件（新旧对比），在用户关闭编辑器后添加文件记录*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; -u                <span class=\"comment\">/*只会更新现有的已经修改的文件，不会添加文件*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; --refresh         <span class=\"comment\">/*只会更新文件状态，不会新添加文件*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; ---ignore-missing <span class=\"comment\">/*添加过程出错时忽略当前文件，当前文件将添加索引并继续当前操作*/</span></span><br><span class=\"line\">$ git add &lt;pathspec&gt; --                <span class=\"comment\">/*如果添加的文件名是git保留字关键字，则用--来加以区分*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote><footer><strong>Git-SCM</strong><cite><a href=\"http://git-scm.com/docs/git-add\" target=\"_blank\" rel=\"noopener\">git-add官方文档</a></cite></footer></blockquote>\n"},{"title":"Git's Life Cycle - clone","date":"2015-08-23T14:43:20.000Z","alias":null,"_content":"\n\n从这篇 git clone文章开始，我开始来倒腾git的这么几个常用的生命周期。从去年九月开始项目一直在用git，刚开始觉得git很好用，概念很清楚，用着用着没什么问题。随着项目人娄的增加以及项目规模慢慢变大，模块划分越来越清楚，也开始多出了几个仓库。。是有必要再次回顾git的这几条命令了。期间请教过几次同事，向她学习，现将自己一些总结作些记录。\n## git clone语法\n\n``` \n'git clone' [--template=<template_directory>]\n\t  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n\t  [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n\t  [--dissociate] [--separate-git-dir <git dir>]\n\t  [--depth <depth>] [--[no-]single-branch]\n\t  [--recursive | --recurse-submodules] [--] <repository>\n\t  [<directory>]\n```\n**`git clone`** - 已知一个远程仓库地址，从远程仓库中克隆一份到本地\n## git clone 语法示例：\n```\n$ git clone http://linbao-lee.github.com/blog-src.git                  /*从远程仓库克隆不带分支名称的分支到当前目录下的my-linux目录*/\n$ git clone -b branch-name http://linbao-lee.github.com/blog-src.git . /*克隆指定分支到当前目录*/\n$ git clone -l -s -n . ../copy                                         /*拷贝当前目录下的分支到copy目录但不checkout这个分支*/\n\n```\n## 可被git接受的clone地址格式\n``` java\n\nssh://[user@]host.xz[:port]/path/to/repo.git/   /*以user这个用户名去访问远程仓库*/\ngit://host.xz[:port]/path/to/repo.git/          /*git访问方式*/\nhttp[s]://host.xz[:port]/path/to/repo.git/      /*http访问方式，所用协议不同而已，下同*/\nftp[s]://host.xz[:port]/path/to/repo.git/       /*ftp*/\nrsync://host.xz/path/to/repo.git/\n/path/to/repo.git/                              /*访问本地仓库的地址语法格式*/\n\\file:///path/to/repo.git/                      /*同上*/\n\n```\n## 参考文档\n{% blockquote Git-SCM http://git-scm.com/docs/git-clone git-add官方文档%}\n{% endblockquote %}\n","source":"_posts/Git-s-Life-Cycle-clone.md","raw":"title: \"Git's Life Cycle - clone\"\ndate: 2015-08-23 22:43:20\nalias: \ntags: \n- 笔记 \n- 工具\ncategories: 总结与分享\n\n---\n\n\n从这篇 git clone文章开始，我开始来倒腾git的这么几个常用的生命周期。从去年九月开始项目一直在用git，刚开始觉得git很好用，概念很清楚，用着用着没什么问题。随着项目人娄的增加以及项目规模慢慢变大，模块划分越来越清楚，也开始多出了几个仓库。。是有必要再次回顾git的这几条命令了。期间请教过几次同事，向她学习，现将自己一些总结作些记录。\n## git clone语法\n\n``` \n'git clone' [--template=<template_directory>]\n\t  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n\t  [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n\t  [--dissociate] [--separate-git-dir <git dir>]\n\t  [--depth <depth>] [--[no-]single-branch]\n\t  [--recursive | --recurse-submodules] [--] <repository>\n\t  [<directory>]\n```\n**`git clone`** - 已知一个远程仓库地址，从远程仓库中克隆一份到本地\n## git clone 语法示例：\n```\n$ git clone http://linbao-lee.github.com/blog-src.git                  /*从远程仓库克隆不带分支名称的分支到当前目录下的my-linux目录*/\n$ git clone -b branch-name http://linbao-lee.github.com/blog-src.git . /*克隆指定分支到当前目录*/\n$ git clone -l -s -n . ../copy                                         /*拷贝当前目录下的分支到copy目录但不checkout这个分支*/\n\n```\n## 可被git接受的clone地址格式\n``` java\n\nssh://[user@]host.xz[:port]/path/to/repo.git/   /*以user这个用户名去访问远程仓库*/\ngit://host.xz[:port]/path/to/repo.git/          /*git访问方式*/\nhttp[s]://host.xz[:port]/path/to/repo.git/      /*http访问方式，所用协议不同而已，下同*/\nftp[s]://host.xz[:port]/path/to/repo.git/       /*ftp*/\nrsync://host.xz/path/to/repo.git/\n/path/to/repo.git/                              /*访问本地仓库的地址语法格式*/\n\\file:///path/to/repo.git/                      /*同上*/\n\n```\n## 参考文档\n{% blockquote Git-SCM http://git-scm.com/docs/git-clone git-add官方文档%}\n{% endblockquote %}\n","slug":"Git-s-Life-Cycle-clone","published":1,"updated":"2019-12-30T17:16:22.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq1p0008qyvyuwudao28","content":"<p>从这篇 git clone文章开始，我开始来倒腾git的这么几个常用的生命周期。从去年九月开始项目一直在用git，刚开始觉得git很好用，概念很清楚，用着用着没什么问题。随着项目人娄的增加以及项目规模慢慢变大，模块划分越来越清楚，也开始多出了几个仓库。。是有必要再次回顾git的这几条命令了。期间请教过几次同事，向她学习，现将自己一些总结作些记录。</p>\n<h2 id=\"git-clone语法\"><a href=\"#git-clone语法\" class=\"headerlink\" title=\"git clone语法\"></a>git clone语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;git clone&apos; [--template=&lt;template_directory&gt;]</span><br><span class=\"line\">\t  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]</span><br><span class=\"line\">\t  [-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]</span><br><span class=\"line\">\t  [--dissociate] [--separate-git-dir &lt;git dir&gt;]</span><br><span class=\"line\">\t  [--depth &lt;depth&gt;] [--[no-]single-branch]</span><br><span class=\"line\">\t  [--recursive | --recurse-submodules] [--] &lt;repository&gt;</span><br><span class=\"line\">\t  [&lt;directory&gt;]</span><br></pre></td></tr></table></figure>\n<p><strong><code>git clone</code></strong> - 已知一个远程仓库地址，从远程仓库中克隆一份到本地</p>\n<h2 id=\"git-clone-语法示例：\"><a href=\"#git-clone-语法示例：\" class=\"headerlink\" title=\"git clone 语法示例：\"></a>git clone 语法示例：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone http://linbao-lee.github.com/blog-src.git                  /*从远程仓库克隆不带分支名称的分支到当前目录下的my-linux目录*/</span><br><span class=\"line\">$ git clone -b branch-name http://linbao-lee.github.com/blog-src.git . /*克隆指定分支到当前目录*/</span><br><span class=\"line\">$ git clone -l -s -n . ../copy                                         /*拷贝当前目录下的分支到copy目录但不checkout这个分支*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"可被git接受的clone地址格式\"><a href=\"#可被git接受的clone地址格式\" class=\"headerlink\" title=\"可被git接受的clone地址格式\"></a>可被git接受的clone地址格式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh:<span class=\"comment\">//[user@]host.xz[:port]/path/to/repo.git/   /*以user这个用户名去访问远程仓库*/</span></span><br><span class=\"line\">git:<span class=\"comment\">//host.xz[:port]/path/to/repo.git/          /*git访问方式*/</span></span><br><span class=\"line\">http[s]:<span class=\"comment\">//host.xz[:port]/path/to/repo.git/      /*http访问方式，所用协议不同而已，下同*/</span></span><br><span class=\"line\">ftp[s]:<span class=\"comment\">//host.xz[:port]/path/to/repo.git/       /*ftp*/</span></span><br><span class=\"line\">rsync:<span class=\"comment\">//host.xz/path/to/repo.git/</span></span><br><span class=\"line\">/path/to/repo.git/                              <span class=\"comment\">/*访问本地仓库的地址语法格式*/</span></span><br><span class=\"line\">\\file:<span class=\"comment\">///path/to/repo.git/                      /*同上*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote><footer><strong>Git-SCM</strong><cite><a href=\"http://git-scm.com/docs/git-clone\" target=\"_blank\" rel=\"noopener\">git-add官方文档</a></cite></footer></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>从这篇 git clone文章开始，我开始来倒腾git的这么几个常用的生命周期。从去年九月开始项目一直在用git，刚开始觉得git很好用，概念很清楚，用着用着没什么问题。随着项目人娄的增加以及项目规模慢慢变大，模块划分越来越清楚，也开始多出了几个仓库。。是有必要再次回顾git的这几条命令了。期间请教过几次同事，向她学习，现将自己一些总结作些记录。</p>\n<h2 id=\"git-clone语法\"><a href=\"#git-clone语法\" class=\"headerlink\" title=\"git clone语法\"></a>git clone语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;git clone&apos; [--template=&lt;template_directory&gt;]</span><br><span class=\"line\">\t  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]</span><br><span class=\"line\">\t  [-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]</span><br><span class=\"line\">\t  [--dissociate] [--separate-git-dir &lt;git dir&gt;]</span><br><span class=\"line\">\t  [--depth &lt;depth&gt;] [--[no-]single-branch]</span><br><span class=\"line\">\t  [--recursive | --recurse-submodules] [--] &lt;repository&gt;</span><br><span class=\"line\">\t  [&lt;directory&gt;]</span><br></pre></td></tr></table></figure>\n<p><strong><code>git clone</code></strong> - 已知一个远程仓库地址，从远程仓库中克隆一份到本地</p>\n<h2 id=\"git-clone-语法示例：\"><a href=\"#git-clone-语法示例：\" class=\"headerlink\" title=\"git clone 语法示例：\"></a>git clone 语法示例：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone http://linbao-lee.github.com/blog-src.git                  /*从远程仓库克隆不带分支名称的分支到当前目录下的my-linux目录*/</span><br><span class=\"line\">$ git clone -b branch-name http://linbao-lee.github.com/blog-src.git . /*克隆指定分支到当前目录*/</span><br><span class=\"line\">$ git clone -l -s -n . ../copy                                         /*拷贝当前目录下的分支到copy目录但不checkout这个分支*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"可被git接受的clone地址格式\"><a href=\"#可被git接受的clone地址格式\" class=\"headerlink\" title=\"可被git接受的clone地址格式\"></a>可被git接受的clone地址格式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh:<span class=\"comment\">//[user@]host.xz[:port]/path/to/repo.git/   /*以user这个用户名去访问远程仓库*/</span></span><br><span class=\"line\">git:<span class=\"comment\">//host.xz[:port]/path/to/repo.git/          /*git访问方式*/</span></span><br><span class=\"line\">http[s]:<span class=\"comment\">//host.xz[:port]/path/to/repo.git/      /*http访问方式，所用协议不同而已，下同*/</span></span><br><span class=\"line\">ftp[s]:<span class=\"comment\">//host.xz[:port]/path/to/repo.git/       /*ftp*/</span></span><br><span class=\"line\">rsync:<span class=\"comment\">//host.xz/path/to/repo.git/</span></span><br><span class=\"line\">/path/to/repo.git/                              <span class=\"comment\">/*访问本地仓库的地址语法格式*/</span></span><br><span class=\"line\">\\file:<span class=\"comment\">///path/to/repo.git/                      /*同上*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote><footer><strong>Git-SCM</strong><cite><a href=\"http://git-scm.com/docs/git-clone\" target=\"_blank\" rel=\"noopener\">git-add官方文档</a></cite></footer></blockquote>\n"},{"title":"Git's Life Cycle-push","date":"2015-08-23T14:44:59.000Z","alias":null,"_content":"终于到push了,比较复杂 ==！\n\n## git push语法\n\n``` \n'git push' [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]\n\t   [--repo=<repository>] [-f | --force] [--prune] [-v | --verbose]\n\t   [-u | --set-upstream] [--signed]\n\t   [--force-with-lease[=<refname>[:<expect>]]]\n\t   [--no-verify] [<repository> [<refspec>...]]\n```\n**`git push` - 是提交本地已提交的代码到远程仓库**\n提交之前可以使用：\n- `git status`查看当前工作在哪个分支上\n- `git config user.name \"test\"` 设置全局提交用户名\n- `git config user.mail \"test@gmail.com\"` 设置全局提交帐号邮箱\n- `git push <远程主机名> <本地分支名>:<远程分支名>` 提交到远程指定分支\n\n\n## git push 语法示例：\n```\ngit push                  /*如果只有一个分支，则可以省略本地/远程分支名*/\ngit push origin           /*将当前分支推送到origin主机的对应分支*/\ngit push origin master    /*将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支*/\ngit push -u origin master /*将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了*/\ngit push --all origin     /*将所有本地分支都推送到origin主机*/\ngit push --force origin   /*使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项*/\ngit push origin --tags /*push的时候将tag一起push到远程主机*/\n```\n\n## 注意事项\n```\n$ git push origin :master /*将删除origin主机的master分支，等同于*/\n$ git push origin --delete master\n```\n需要说明的是，默认情况下 这条语句等价于提交 本地的master分支，到远程仓库，并作为远程的master分支。\n如果想把 本地的某个分支test 提交到 远程仓库，并作为远程仓库的master分支，或者 作为另外一个名叫test的分支，那么可以这么做。\n\n$ git push origin test:master         // 提交本地test分支 作为 远程的master分支\n$ git push origin test:test              // 提交本地test分支作为远程的test分支\n\n如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。\n\n$ git push origin :test              // 刚提交到远程的test将被删除，但是本地还会保存的，不用担心。\n## 参考文档\n{% blockquote Git-SCM http://git-scm.com/docs/git-push git-push官方文档%}\n{% endblockquote %}","source":"_posts/Git-s-Life-Cycle-push.md","raw":"title: \"Git's Life Cycle-push\"\ndate: 2015-08-23 22:44:59\nalias: \ntags: \n- 笔记 \n- 工具\ncategories: 总结与分享\n\n---\n终于到push了,比较复杂 ==！\n\n## git push语法\n\n``` \n'git push' [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]\n\t   [--repo=<repository>] [-f | --force] [--prune] [-v | --verbose]\n\t   [-u | --set-upstream] [--signed]\n\t   [--force-with-lease[=<refname>[:<expect>]]]\n\t   [--no-verify] [<repository> [<refspec>...]]\n```\n**`git push` - 是提交本地已提交的代码到远程仓库**\n提交之前可以使用：\n- `git status`查看当前工作在哪个分支上\n- `git config user.name \"test\"` 设置全局提交用户名\n- `git config user.mail \"test@gmail.com\"` 设置全局提交帐号邮箱\n- `git push <远程主机名> <本地分支名>:<远程分支名>` 提交到远程指定分支\n\n\n## git push 语法示例：\n```\ngit push                  /*如果只有一个分支，则可以省略本地/远程分支名*/\ngit push origin           /*将当前分支推送到origin主机的对应分支*/\ngit push origin master    /*将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支*/\ngit push -u origin master /*将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了*/\ngit push --all origin     /*将所有本地分支都推送到origin主机*/\ngit push --force origin   /*使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项*/\ngit push origin --tags /*push的时候将tag一起push到远程主机*/\n```\n\n## 注意事项\n```\n$ git push origin :master /*将删除origin主机的master分支，等同于*/\n$ git push origin --delete master\n```\n需要说明的是，默认情况下 这条语句等价于提交 本地的master分支，到远程仓库，并作为远程的master分支。\n如果想把 本地的某个分支test 提交到 远程仓库，并作为远程仓库的master分支，或者 作为另外一个名叫test的分支，那么可以这么做。\n\n$ git push origin test:master         // 提交本地test分支 作为 远程的master分支\n$ git push origin test:test              // 提交本地test分支作为远程的test分支\n\n如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。\n\n$ git push origin :test              // 刚提交到远程的test将被删除，但是本地还会保存的，不用担心。\n## 参考文档\n{% blockquote Git-SCM http://git-scm.com/docs/git-push git-push官方文档%}\n{% endblockquote %}","slug":"Git-s-Life-Cycle-push","published":1,"updated":"2019-12-30T17:16:22.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq1r000aqyvy2yo493pk","content":"<p>终于到push了,比较复杂 ==！</p>\n<h2 id=\"git-push语法\"><a href=\"#git-push语法\" class=\"headerlink\" title=\"git push语法\"></a>git push语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;git push&apos; [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]</span><br><span class=\"line\">\t   [--repo=&lt;repository&gt;] [-f | --force] [--prune] [-v | --verbose]</span><br><span class=\"line\">\t   [-u | --set-upstream] [--signed]</span><br><span class=\"line\">\t   [--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]]]</span><br><span class=\"line\">\t   [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;...]]</span><br></pre></td></tr></table></figure>\n<p><strong><code>git push</code> - 是提交本地已提交的代码到远程仓库</strong><br>提交之前可以使用：</p>\n<ul>\n<li><code>git status</code>查看当前工作在哪个分支上</li>\n<li><code>git config user.name &quot;test&quot;</code> 设置全局提交用户名</li>\n<li><code>git config user.mail &quot;test@gmail.com&quot;</code> 设置全局提交帐号邮箱</li>\n<li><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code> 提交到远程指定分支</li>\n</ul>\n<h2 id=\"git-push-语法示例：\"><a href=\"#git-push-语法示例：\" class=\"headerlink\" title=\"git push 语法示例：\"></a>git push 语法示例：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push                  /*如果只有一个分支，则可以省略本地/远程分支名*/</span><br><span class=\"line\">git push origin           /*将当前分支推送到origin主机的对应分支*/</span><br><span class=\"line\">git push origin master    /*将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支*/</span><br><span class=\"line\">git push -u origin master /*将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了*/</span><br><span class=\"line\">git push --all origin     /*将所有本地分支都推送到origin主机*/</span><br><span class=\"line\">git push --force origin   /*使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项*/</span><br><span class=\"line\">git push origin --tags /*push的时候将tag一起push到远程主机*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :master /*将删除origin主机的master分支，等同于*/</span><br><span class=\"line\">$ git push origin --delete master</span><br></pre></td></tr></table></figure>\n<p>需要说明的是，默认情况下 这条语句等价于提交 本地的master分支，到远程仓库，并作为远程的master分支。<br>如果想把 本地的某个分支test 提交到 远程仓库，并作为远程仓库的master分支，或者 作为另外一个名叫test的分支，那么可以这么做。</p>\n<p>$ git push origin test:master         // 提交本地test分支 作为 远程的master分支<br>$ git push origin test:test              // 提交本地test分支作为远程的test分支</p>\n<p>如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。</p>\n<p>$ git push origin :test              // 刚提交到远程的test将被删除，但是本地还会保存的，不用担心。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote><footer><strong>Git-SCM</strong><cite><a href=\"http://git-scm.com/docs/git-push\" target=\"_blank\" rel=\"noopener\">git-push官方文档</a></cite></footer></blockquote>","site":{"data":{}},"excerpt":"","more":"<p>终于到push了,比较复杂 ==！</p>\n<h2 id=\"git-push语法\"><a href=\"#git-push语法\" class=\"headerlink\" title=\"git push语法\"></a>git push语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;git push&apos; [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]</span><br><span class=\"line\">\t   [--repo=&lt;repository&gt;] [-f | --force] [--prune] [-v | --verbose]</span><br><span class=\"line\">\t   [-u | --set-upstream] [--signed]</span><br><span class=\"line\">\t   [--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]]]</span><br><span class=\"line\">\t   [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;...]]</span><br></pre></td></tr></table></figure>\n<p><strong><code>git push</code> - 是提交本地已提交的代码到远程仓库</strong><br>提交之前可以使用：</p>\n<ul>\n<li><code>git status</code>查看当前工作在哪个分支上</li>\n<li><code>git config user.name &quot;test&quot;</code> 设置全局提交用户名</li>\n<li><code>git config user.mail &quot;test@gmail.com&quot;</code> 设置全局提交帐号邮箱</li>\n<li><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code> 提交到远程指定分支</li>\n</ul>\n<h2 id=\"git-push-语法示例：\"><a href=\"#git-push-语法示例：\" class=\"headerlink\" title=\"git push 语法示例：\"></a>git push 语法示例：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push                  /*如果只有一个分支，则可以省略本地/远程分支名*/</span><br><span class=\"line\">git push origin           /*将当前分支推送到origin主机的对应分支*/</span><br><span class=\"line\">git push origin master    /*将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支*/</span><br><span class=\"line\">git push -u origin master /*将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了*/</span><br><span class=\"line\">git push --all origin     /*将所有本地分支都推送到origin主机*/</span><br><span class=\"line\">git push --force origin   /*使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项*/</span><br><span class=\"line\">git push origin --tags /*push的时候将tag一起push到远程主机*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :master /*将删除origin主机的master分支，等同于*/</span><br><span class=\"line\">$ git push origin --delete master</span><br></pre></td></tr></table></figure>\n<p>需要说明的是，默认情况下 这条语句等价于提交 本地的master分支，到远程仓库，并作为远程的master分支。<br>如果想把 本地的某个分支test 提交到 远程仓库，并作为远程仓库的master分支，或者 作为另外一个名叫test的分支，那么可以这么做。</p>\n<p>$ git push origin test:master         // 提交本地test分支 作为 远程的master分支<br>$ git push origin test:test              // 提交本地test分支作为远程的test分支</p>\n<p>如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。</p>\n<p>$ git push origin :test              // 刚提交到远程的test将被删除，但是本地还会保存的，不用担心。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote><footer><strong>Git-SCM</strong><cite><a href=\"http://git-scm.com/docs/git-push\" target=\"_blank\" rel=\"noopener\">git-push官方文档</a></cite></footer></blockquote>"},{"title":"How to Write a Jquery Plugin Phase 1","date":"2015-05-24T09:57:47.000Z","alias":null,"_content":"周末，可是没有忘记一直想自己封装一个jquery的插件，然后像boostrap那样，选择一个元素然后调用自己的方法，什么事都不用管它自己就帮你做好所有的一切，创建包围，注册监听事件，完成包尾工作，一切都是那么地从容。。。\n好吧，正好公司的项目也要用到一个关于文本的工具，一起来学一下吧\n## 准备工作\n查阅一下编写一个jquery的基本要求：\n1. 在JQuery命名空间下声明只声明一个单独的名称\n2. 接受options参数，以便控制插件的行为\n3. 暴露插件的默认设置 ，以便外面可以访问\n4. 适当地将子函数提供给外部访问调用\n5. 保持私有函数\n6. 支持元数据插件\n\n另外Jquery也提供了两在学重要的方法以便developer在扩展自己插件的时候使用：\n``` javascript\njQuery.extend(object)      即 $.extend(object)，当需要合并参数时也是这个\njQuery.fn.extend(object)   即 $.fn.extend(object)\n```\n这2个API都是为了将自己编写的功能以插件的形式加入到 jquery 中.但是含义上是有区别的.\n`$.extend(object)` 这个函数是用来扩展 jQuery 本身, 也就是扩展 `\"$\"`的\n`$.fn.extend(object)` 这个函数用来为 jQuery 对象提供新的方法.所谓 jQuery 对象, 最常见的我们平时通过jQuery选择器获取的对象, 比如: `$(\"#id\"), $(\".class\")` 等等.\n## 插件主函数体中的this关键字\n这里的 this 是jQuery 对象, 也就是通过 $(\"#id\"), $(\".class\") 之类的选择器获取的对象。\n`注意：`\n  - 与each中的`this`有些不同，`$.each`中的`this`是DOM对象，那是因为`$.each`会自动把`jQuery`对象转换为DOM对象\n  - 在主函数最后记得用`return this;`,是为了实现 jQuery 的链式表达式. 也就是 `return this;` 之后, 可以接着调用其他 jQuery 函数.\n\n## 功能型插件(使用最多的jQuery插件)\n有两种写法，大家可以根据自己的爱好来写\n### 方法定义在extend里：\n```javascript\n(function($) {  \n    $.fn.extend({  \n        readmore: function(options) {  \n            var defaults = {  \n                max_column: 2,  \n            };  \n            var options = $.extend(defaults, options);  \n            var len = parseInt(options['max_column']);  \n            return this.each(function() {  \n                alert('linbao');  \n            });  \n        },\n        functionA:function(){\n        \t//...\n    \t}  \n    });  \n})(jQuery);  \n```\n### 方法定义在extend外：\n```javascript\n//create closure  \n(function($){  \n\t//plugin default value definition\n\t$.fn.readmore.default = {\n\t\tmax_column:4\n\t}\n    //plugin definition  \n    $.fn.readmore = function(options){  \n        debug(this);  \n        var opts = $.extend({},$.fn.hilight.defaults,options);  \n    \treturn this.each(function(){  \n        var $this = $(this);  \n        //build element specific options  \n        var o = $.meta ? $.extend({},opts,$this.data()) : opts;          \n    }); \n    \n    }; \n    //public function definition \n    $.fn.readmore.functionB = function(arg){\n    \t//...\n    }\n    //private function for debuggin  \n    function debug($obj){  \n        if(window.console && window.console.log){  \n            window.console.log('readmore selection count :' + $obj.size());  \n        }  \n    }  \n    //...  \n    //end of closure  \n})(jQuery);  \n```\n这两种方式编写的插件调用方式都一样\n```javascript\n$('div').readmore();\n```\n若要一更改插件的默认值\n```javascript\n$('div').readmore({max_column:5});\n```\n`注意：`\n合并参数时, 使用了 $.extend(), 这个方法的作用是将所有参数 合并成一个大的json对象, 有相同的key时, 后面的参数覆盖前面的参数.\n$.extend 的第一个参数是 {}, 之所以这样, 是因为合并后, 会破坏第一个参数, 所以不能将 defaults 放在第一个.\n说明示例如下: (用chrome的console窗口可以看到输出结果)\n```javascript\n$(function(){\n\tvar defaults = { \"id\": 1, \"name\": \"test\"};\n    var options = { \"sex\": \"man\", \"name\": \"test2\" };\n    console.log(\"合并前, 各个参数如下:\");\n    console.log(defaults);\n    console.log(options);\n    console.log(\"合并后, 各个参数如下:\");\n    $.extend(defaults, options);\n    console.log(defaults); // 这里可以发现 defaults中的内容是 defaults和options合并后的结果\n    console.log(options);\n});\n```\n## 插件中的公有及私有函数\n虽然 javascript 不是纯粹的面向对象的语言, 但是通过其强大的闭包功能, 也能构造出类似其他面向对象语言的公有/私有函数.\n上述两个插件中`functionA `与 `functionB`都是公有函数，可以被插件使用者所覆盖。\n下面示例中的`functionC`是私有函数，使用者不可以更改\n```javascript\n//create closure  \n(function($){  \n\t//plugin default value definition\n\t$.fn.readmore.default = {\n\t\tmax_column:4\n\t}\n    //plugin definition  \n    $.fn.readmore = function(options){  \n        debug(this);  \n        var opts = $.extend({},$.fn.hilight.defaults,options);  \n    \treturn this.each(function(){  \n        var $this = $(this);  \n        //build element specific options  \n        var o = $.meta ? $.extend({},opts,$this.data()) : opts;          \n    }); \n    \n    }; \n    //public function definition \n    $.fn.readmore.functionB = function(arg){\n    \t//...\n    }\n    //private function definition\n    var functionC = function(options){\n    \t//...\n    }  \n})(jQuery);  \n```\n\n`注意:`\n要与`javascript`中定义类进行区别哦~~~\n\n不断学习中。。。","source":"_posts/How-to-Write-a-Jquery-Plugin-Phase-1.md","raw":"title: \"How to Write a Jquery Plugin Phase 1\"\ndate: 2015-05-24 17:57:47\nalias: \ntags: jQuery\ncategories: 语言学习\n\n---\n周末，可是没有忘记一直想自己封装一个jquery的插件，然后像boostrap那样，选择一个元素然后调用自己的方法，什么事都不用管它自己就帮你做好所有的一切，创建包围，注册监听事件，完成包尾工作，一切都是那么地从容。。。\n好吧，正好公司的项目也要用到一个关于文本的工具，一起来学一下吧\n## 准备工作\n查阅一下编写一个jquery的基本要求：\n1. 在JQuery命名空间下声明只声明一个单独的名称\n2. 接受options参数，以便控制插件的行为\n3. 暴露插件的默认设置 ，以便外面可以访问\n4. 适当地将子函数提供给外部访问调用\n5. 保持私有函数\n6. 支持元数据插件\n\n另外Jquery也提供了两在学重要的方法以便developer在扩展自己插件的时候使用：\n``` javascript\njQuery.extend(object)      即 $.extend(object)，当需要合并参数时也是这个\njQuery.fn.extend(object)   即 $.fn.extend(object)\n```\n这2个API都是为了将自己编写的功能以插件的形式加入到 jquery 中.但是含义上是有区别的.\n`$.extend(object)` 这个函数是用来扩展 jQuery 本身, 也就是扩展 `\"$\"`的\n`$.fn.extend(object)` 这个函数用来为 jQuery 对象提供新的方法.所谓 jQuery 对象, 最常见的我们平时通过jQuery选择器获取的对象, 比如: `$(\"#id\"), $(\".class\")` 等等.\n## 插件主函数体中的this关键字\n这里的 this 是jQuery 对象, 也就是通过 $(\"#id\"), $(\".class\") 之类的选择器获取的对象。\n`注意：`\n  - 与each中的`this`有些不同，`$.each`中的`this`是DOM对象，那是因为`$.each`会自动把`jQuery`对象转换为DOM对象\n  - 在主函数最后记得用`return this;`,是为了实现 jQuery 的链式表达式. 也就是 `return this;` 之后, 可以接着调用其他 jQuery 函数.\n\n## 功能型插件(使用最多的jQuery插件)\n有两种写法，大家可以根据自己的爱好来写\n### 方法定义在extend里：\n```javascript\n(function($) {  \n    $.fn.extend({  \n        readmore: function(options) {  \n            var defaults = {  \n                max_column: 2,  \n            };  \n            var options = $.extend(defaults, options);  \n            var len = parseInt(options['max_column']);  \n            return this.each(function() {  \n                alert('linbao');  \n            });  \n        },\n        functionA:function(){\n        \t//...\n    \t}  \n    });  \n})(jQuery);  \n```\n### 方法定义在extend外：\n```javascript\n//create closure  \n(function($){  \n\t//plugin default value definition\n\t$.fn.readmore.default = {\n\t\tmax_column:4\n\t}\n    //plugin definition  \n    $.fn.readmore = function(options){  \n        debug(this);  \n        var opts = $.extend({},$.fn.hilight.defaults,options);  \n    \treturn this.each(function(){  \n        var $this = $(this);  \n        //build element specific options  \n        var o = $.meta ? $.extend({},opts,$this.data()) : opts;          \n    }); \n    \n    }; \n    //public function definition \n    $.fn.readmore.functionB = function(arg){\n    \t//...\n    }\n    //private function for debuggin  \n    function debug($obj){  \n        if(window.console && window.console.log){  \n            window.console.log('readmore selection count :' + $obj.size());  \n        }  \n    }  \n    //...  \n    //end of closure  \n})(jQuery);  \n```\n这两种方式编写的插件调用方式都一样\n```javascript\n$('div').readmore();\n```\n若要一更改插件的默认值\n```javascript\n$('div').readmore({max_column:5});\n```\n`注意：`\n合并参数时, 使用了 $.extend(), 这个方法的作用是将所有参数 合并成一个大的json对象, 有相同的key时, 后面的参数覆盖前面的参数.\n$.extend 的第一个参数是 {}, 之所以这样, 是因为合并后, 会破坏第一个参数, 所以不能将 defaults 放在第一个.\n说明示例如下: (用chrome的console窗口可以看到输出结果)\n```javascript\n$(function(){\n\tvar defaults = { \"id\": 1, \"name\": \"test\"};\n    var options = { \"sex\": \"man\", \"name\": \"test2\" };\n    console.log(\"合并前, 各个参数如下:\");\n    console.log(defaults);\n    console.log(options);\n    console.log(\"合并后, 各个参数如下:\");\n    $.extend(defaults, options);\n    console.log(defaults); // 这里可以发现 defaults中的内容是 defaults和options合并后的结果\n    console.log(options);\n});\n```\n## 插件中的公有及私有函数\n虽然 javascript 不是纯粹的面向对象的语言, 但是通过其强大的闭包功能, 也能构造出类似其他面向对象语言的公有/私有函数.\n上述两个插件中`functionA `与 `functionB`都是公有函数，可以被插件使用者所覆盖。\n下面示例中的`functionC`是私有函数，使用者不可以更改\n```javascript\n//create closure  \n(function($){  \n\t//plugin default value definition\n\t$.fn.readmore.default = {\n\t\tmax_column:4\n\t}\n    //plugin definition  \n    $.fn.readmore = function(options){  \n        debug(this);  \n        var opts = $.extend({},$.fn.hilight.defaults,options);  \n    \treturn this.each(function(){  \n        var $this = $(this);  \n        //build element specific options  \n        var o = $.meta ? $.extend({},opts,$this.data()) : opts;          \n    }); \n    \n    }; \n    //public function definition \n    $.fn.readmore.functionB = function(arg){\n    \t//...\n    }\n    //private function definition\n    var functionC = function(options){\n    \t//...\n    }  \n})(jQuery);  \n```\n\n`注意:`\n要与`javascript`中定义类进行区别哦~~~\n\n不断学习中。。。","slug":"How-to-Write-a-Jquery-Plugin-Phase-1","published":1,"updated":"2019-12-30T17:16:22.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq1v000eqyvy5wqwxkin","content":"<p>周末，可是没有忘记一直想自己封装一个jquery的插件，然后像boostrap那样，选择一个元素然后调用自己的方法，什么事都不用管它自己就帮你做好所有的一切，创建包围，注册监听事件，完成包尾工作，一切都是那么地从容。。。<br>好吧，正好公司的项目也要用到一个关于文本的工具，一起来学一下吧</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>查阅一下编写一个jquery的基本要求：</p>\n<ol>\n<li>在JQuery命名空间下声明只声明一个单独的名称</li>\n<li>接受options参数，以便控制插件的行为</li>\n<li>暴露插件的默认设置 ，以便外面可以访问</li>\n<li>适当地将子函数提供给外部访问调用</li>\n<li>保持私有函数</li>\n<li>支持元数据插件</li>\n</ol>\n<p>另外Jquery也提供了两在学重要的方法以便developer在扩展自己插件的时候使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.extend(object)      即 $.extend(object)，当需要合并参数时也是这个</span><br><span class=\"line\">jQuery.fn.extend(object)   即 $.fn.extend(object)</span><br></pre></td></tr></table></figure></p>\n<p>这2个API都是为了将自己编写的功能以插件的形式加入到 jquery 中.但是含义上是有区别的.<br><code>$.extend(object)</code> 这个函数是用来扩展 jQuery 本身, 也就是扩展 <code>&quot;$&quot;</code>的<br><code>$.fn.extend(object)</code> 这个函数用来为 jQuery 对象提供新的方法.所谓 jQuery 对象, 最常见的我们平时通过jQuery选择器获取的对象, 比如: <code>$(&quot;#id&quot;), $(&quot;.class&quot;)</code> 等等.</p>\n<h2 id=\"插件主函数体中的this关键字\"><a href=\"#插件主函数体中的this关键字\" class=\"headerlink\" title=\"插件主函数体中的this关键字\"></a>插件主函数体中的this关键字</h2><p>这里的 this 是jQuery 对象, 也就是通过 $(“#id”), $(“.class”) 之类的选择器获取的对象。<br><code>注意：</code></p>\n<ul>\n<li>与each中的<code>this</code>有些不同，<code>$.each</code>中的<code>this</code>是DOM对象，那是因为<code>$.each</code>会自动把<code>jQuery</code>对象转换为DOM对象</li>\n<li>在主函数最后记得用<code>return this;</code>,是为了实现 jQuery 的链式表达式. 也就是 <code>return this;</code> 之后, 可以接着调用其他 jQuery 函数.</li>\n</ul>\n<h2 id=\"功能型插件-使用最多的jQuery插件\"><a href=\"#功能型插件-使用最多的jQuery插件\" class=\"headerlink\" title=\"功能型插件(使用最多的jQuery插件)\"></a>功能型插件(使用最多的jQuery插件)</h2><p>有两种写法，大家可以根据自己的爱好来写</p>\n<h3 id=\"方法定义在extend里：\"><a href=\"#方法定义在extend里：\" class=\"headerlink\" title=\"方法定义在extend里：\"></a>方法定义在extend里：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123;  </span><br><span class=\"line\">    $.fn.extend(&#123;  </span><br><span class=\"line\">        readmore: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">var</span> defaults = &#123;  </span><br><span class=\"line\">                max_column: <span class=\"number\">2</span>,  </span><br><span class=\"line\">            &#125;;  </span><br><span class=\"line\">            <span class=\"keyword\">var</span> options = $.extend(defaults, options);  </span><br><span class=\"line\">            <span class=\"keyword\">var</span> len = <span class=\"built_in\">parseInt</span>(options[<span class=\"string\">'max_column'</span>]);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">                alert(<span class=\"string\">'linbao'</span>);  </span><br><span class=\"line\">            &#125;);  </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        functionA:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    \t&#125;  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法定义在extend外：\"><a href=\"#方法定义在extend外：\" class=\"headerlink\" title=\"方法定义在extend外：\"></a>方法定义在extend外：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//create closure  </span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;  </span><br><span class=\"line\">\t<span class=\"comment\">//plugin default value definition</span></span><br><span class=\"line\">\t$.fn.readmore.default = &#123;</span><br><span class=\"line\">\t\tmax_column:<span class=\"number\">4</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//plugin definition  </span></span><br><span class=\"line\">    $.fn.readmore = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;  </span><br><span class=\"line\">        debug(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> opts = $.extend(&#123;&#125;,$.fn.hilight.defaults,options);  </span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//build element specific options  </span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> o = $.meta ? $.extend(&#123;&#125;,opts,$<span class=\"keyword\">this</span>.data()) : opts;          </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">    <span class=\"comment\">//public function definition </span></span><br><span class=\"line\">    $.fn.readmore.functionB = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//private function for debuggin  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debug</span>(<span class=\"params\">$obj</span>)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.console &amp;&amp; <span class=\"built_in\">window</span>.console.log)&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">window</span>.console.log(<span class=\"string\">'readmore selection count :'</span> + $obj.size());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//...  </span></span><br><span class=\"line\">    <span class=\"comment\">//end of closure  </span></span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>\n<p>这两种方式编写的插件调用方式都一样<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'div'</span>).readmore();</span><br></pre></td></tr></table></figure></p>\n<p>若要一更改插件的默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'div'</span>).readmore(&#123;<span class=\"attr\">max_column</span>:<span class=\"number\">5</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><code>注意：</code><br>合并参数时, 使用了 $.extend(), 这个方法的作用是将所有参数 合并成一个大的json对象, 有相同的key时, 后面的参数覆盖前面的参数.<br>$.extend 的第一个参数是 {}, 之所以这样, 是因为合并后, 会破坏第一个参数, 所以不能将 defaults 放在第一个.<br>说明示例如下: (用chrome的console窗口可以看到输出结果)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> defaults = &#123; <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"test\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = &#123; <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"man\"</span>, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"test2\"</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"合并前, 各个参数如下:\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(defaults);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(options);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"合并后, 各个参数如下:\"</span>);</span><br><span class=\"line\">    $.extend(defaults, options);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(defaults); <span class=\"comment\">// 这里可以发现 defaults中的内容是 defaults和options合并后的结果</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(options);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"插件中的公有及私有函数\"><a href=\"#插件中的公有及私有函数\" class=\"headerlink\" title=\"插件中的公有及私有函数\"></a>插件中的公有及私有函数</h2><p>虽然 javascript 不是纯粹的面向对象的语言, 但是通过其强大的闭包功能, 也能构造出类似其他面向对象语言的公有/私有函数.<br>上述两个插件中<code>functionA</code>与 <code>functionB</code>都是公有函数，可以被插件使用者所覆盖。<br>下面示例中的<code>functionC</code>是私有函数，使用者不可以更改<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//create closure  </span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;  </span><br><span class=\"line\">\t<span class=\"comment\">//plugin default value definition</span></span><br><span class=\"line\">\t$.fn.readmore.default = &#123;</span><br><span class=\"line\">\t\tmax_column:<span class=\"number\">4</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//plugin definition  </span></span><br><span class=\"line\">    $.fn.readmore = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;  </span><br><span class=\"line\">        debug(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> opts = $.extend(&#123;&#125;,$.fn.hilight.defaults,options);  </span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//build element specific options  </span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> o = $.meta ? $.extend(&#123;&#125;,opts,$<span class=\"keyword\">this</span>.data()) : opts;          </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">    <span class=\"comment\">//public function definition </span></span><br><span class=\"line\">    $.fn.readmore.functionB = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//private function definition</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> functionC = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure></p>\n<p><code>注意:</code><br>要与<code>javascript</code>中定义类进行区别哦~~~</p>\n<p>不断学习中。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>周末，可是没有忘记一直想自己封装一个jquery的插件，然后像boostrap那样，选择一个元素然后调用自己的方法，什么事都不用管它自己就帮你做好所有的一切，创建包围，注册监听事件，完成包尾工作，一切都是那么地从容。。。<br>好吧，正好公司的项目也要用到一个关于文本的工具，一起来学一下吧</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>查阅一下编写一个jquery的基本要求：</p>\n<ol>\n<li>在JQuery命名空间下声明只声明一个单独的名称</li>\n<li>接受options参数，以便控制插件的行为</li>\n<li>暴露插件的默认设置 ，以便外面可以访问</li>\n<li>适当地将子函数提供给外部访问调用</li>\n<li>保持私有函数</li>\n<li>支持元数据插件</li>\n</ol>\n<p>另外Jquery也提供了两在学重要的方法以便developer在扩展自己插件的时候使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.extend(object)      即 $.extend(object)，当需要合并参数时也是这个</span><br><span class=\"line\">jQuery.fn.extend(object)   即 $.fn.extend(object)</span><br></pre></td></tr></table></figure></p>\n<p>这2个API都是为了将自己编写的功能以插件的形式加入到 jquery 中.但是含义上是有区别的.<br><code>$.extend(object)</code> 这个函数是用来扩展 jQuery 本身, 也就是扩展 <code>&quot;$&quot;</code>的<br><code>$.fn.extend(object)</code> 这个函数用来为 jQuery 对象提供新的方法.所谓 jQuery 对象, 最常见的我们平时通过jQuery选择器获取的对象, 比如: <code>$(&quot;#id&quot;), $(&quot;.class&quot;)</code> 等等.</p>\n<h2 id=\"插件主函数体中的this关键字\"><a href=\"#插件主函数体中的this关键字\" class=\"headerlink\" title=\"插件主函数体中的this关键字\"></a>插件主函数体中的this关键字</h2><p>这里的 this 是jQuery 对象, 也就是通过 $(“#id”), $(“.class”) 之类的选择器获取的对象。<br><code>注意：</code></p>\n<ul>\n<li>与each中的<code>this</code>有些不同，<code>$.each</code>中的<code>this</code>是DOM对象，那是因为<code>$.each</code>会自动把<code>jQuery</code>对象转换为DOM对象</li>\n<li>在主函数最后记得用<code>return this;</code>,是为了实现 jQuery 的链式表达式. 也就是 <code>return this;</code> 之后, 可以接着调用其他 jQuery 函数.</li>\n</ul>\n<h2 id=\"功能型插件-使用最多的jQuery插件\"><a href=\"#功能型插件-使用最多的jQuery插件\" class=\"headerlink\" title=\"功能型插件(使用最多的jQuery插件)\"></a>功能型插件(使用最多的jQuery插件)</h2><p>有两种写法，大家可以根据自己的爱好来写</p>\n<h3 id=\"方法定义在extend里：\"><a href=\"#方法定义在extend里：\" class=\"headerlink\" title=\"方法定义在extend里：\"></a>方法定义在extend里：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123;  </span><br><span class=\"line\">    $.fn.extend(&#123;  </span><br><span class=\"line\">        readmore: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">var</span> defaults = &#123;  </span><br><span class=\"line\">                max_column: <span class=\"number\">2</span>,  </span><br><span class=\"line\">            &#125;;  </span><br><span class=\"line\">            <span class=\"keyword\">var</span> options = $.extend(defaults, options);  </span><br><span class=\"line\">            <span class=\"keyword\">var</span> len = <span class=\"built_in\">parseInt</span>(options[<span class=\"string\">'max_column'</span>]);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">                alert(<span class=\"string\">'linbao'</span>);  </span><br><span class=\"line\">            &#125;);  </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        functionA:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    \t&#125;  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法定义在extend外：\"><a href=\"#方法定义在extend外：\" class=\"headerlink\" title=\"方法定义在extend外：\"></a>方法定义在extend外：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//create closure  </span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;  </span><br><span class=\"line\">\t<span class=\"comment\">//plugin default value definition</span></span><br><span class=\"line\">\t$.fn.readmore.default = &#123;</span><br><span class=\"line\">\t\tmax_column:<span class=\"number\">4</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//plugin definition  </span></span><br><span class=\"line\">    $.fn.readmore = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;  </span><br><span class=\"line\">        debug(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> opts = $.extend(&#123;&#125;,$.fn.hilight.defaults,options);  </span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//build element specific options  </span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> o = $.meta ? $.extend(&#123;&#125;,opts,$<span class=\"keyword\">this</span>.data()) : opts;          </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">    <span class=\"comment\">//public function definition </span></span><br><span class=\"line\">    $.fn.readmore.functionB = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//private function for debuggin  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debug</span>(<span class=\"params\">$obj</span>)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.console &amp;&amp; <span class=\"built_in\">window</span>.console.log)&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">window</span>.console.log(<span class=\"string\">'readmore selection count :'</span> + $obj.size());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//...  </span></span><br><span class=\"line\">    <span class=\"comment\">//end of closure  </span></span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>\n<p>这两种方式编写的插件调用方式都一样<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'div'</span>).readmore();</span><br></pre></td></tr></table></figure></p>\n<p>若要一更改插件的默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'div'</span>).readmore(&#123;<span class=\"attr\">max_column</span>:<span class=\"number\">5</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><code>注意：</code><br>合并参数时, 使用了 $.extend(), 这个方法的作用是将所有参数 合并成一个大的json对象, 有相同的key时, 后面的参数覆盖前面的参数.<br>$.extend 的第一个参数是 {}, 之所以这样, 是因为合并后, 会破坏第一个参数, 所以不能将 defaults 放在第一个.<br>说明示例如下: (用chrome的console窗口可以看到输出结果)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> defaults = &#123; <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"test\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = &#123; <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"man\"</span>, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"test2\"</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"合并前, 各个参数如下:\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(defaults);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(options);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"合并后, 各个参数如下:\"</span>);</span><br><span class=\"line\">    $.extend(defaults, options);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(defaults); <span class=\"comment\">// 这里可以发现 defaults中的内容是 defaults和options合并后的结果</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(options);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"插件中的公有及私有函数\"><a href=\"#插件中的公有及私有函数\" class=\"headerlink\" title=\"插件中的公有及私有函数\"></a>插件中的公有及私有函数</h2><p>虽然 javascript 不是纯粹的面向对象的语言, 但是通过其强大的闭包功能, 也能构造出类似其他面向对象语言的公有/私有函数.<br>上述两个插件中<code>functionA</code>与 <code>functionB</code>都是公有函数，可以被插件使用者所覆盖。<br>下面示例中的<code>functionC</code>是私有函数，使用者不可以更改<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//create closure  </span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;  </span><br><span class=\"line\">\t<span class=\"comment\">//plugin default value definition</span></span><br><span class=\"line\">\t$.fn.readmore.default = &#123;</span><br><span class=\"line\">\t\tmax_column:<span class=\"number\">4</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//plugin definition  </span></span><br><span class=\"line\">    $.fn.readmore = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;  </span><br><span class=\"line\">        debug(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> opts = $.extend(&#123;&#125;,$.fn.hilight.defaults,options);  </span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//build element specific options  </span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> o = $.meta ? $.extend(&#123;&#125;,opts,$<span class=\"keyword\">this</span>.data()) : opts;          </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">    <span class=\"comment\">//public function definition </span></span><br><span class=\"line\">    $.fn.readmore.functionB = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//private function definition</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> functionC = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure></p>\n<p><code>注意:</code><br>要与<code>javascript</code>中定义类进行区别哦~~~</p>\n<p>不断学习中。。。</p>\n"},{"title":"JUnit Test with Mockito","date":"2016-07-27T06:39:07.000Z","alias":null,"_content":"## Prerequisites\nRequires an understanding of unit testing with the JUnit framework.\n\n## Target and challenge of unit testing\n - A unit test should test a class in isolation.\n - Side effects from other classes or the system should be eliminated if possible\n\n## Classifications of different test classes\n\n - A `dummy` object is passed around but never used, i.e., its methods are never called. Such an object can for example be used to fill the parameter list of a method.\n - A `fake` objects have working implementations, but are usually simplified. For example, they use an in memory database and not a real database.\n - A `stub` class is an partial implementation for an interface or class with the purpose of using an instance of this stub class during testing. Stubs usually do responding at all to anything outside what’s programmed in for the test. Stubs may also record information about calls\n - A `mock` object is a dummy implementation for an interface or a class in which you define the output of certain method calls.Mock objects are typically configured. Mock objects typically require less code to configure and should therefore be preferred.\n \n\n## Using Mockito for mocking objects\n\nMockito allows you to create and configure mock objects. \nIf you use Mockito in tests you typically:\n - Mock away external dependencies and insert the mocks into the code under test\n - Execute the code under test\n - Validate that the code executed correctly\n![image](http://note.youdao.com/yws/res/1463/WEBRESOURCE854b853d666db799b40d7e623b2eba31)\n\n## Adding Mockito as dependencies to a project\n\n - Gradle \n ```json\nrepositories { jcenter() }\ndependencies { testCompile \"org.mockito:mockito-core:2.0.57-beta\" }\n```\n - Maven\n```xml\n<dependency>\n    <groupId>org.mockito</groupId>\n    <artifactId>mockito-all</artifactId>\n    <version>2.0.2-beta</version>\n</dependency>\n```\n\n## Using the Mockito API\n\n1.   ### Static imports\n     \n        If you add a static import for `org.mockito.Mockito.\\*;`, you can access Mockitos methods like `mock()` directly. Static imports allows you to call static members, i.e., methods and fields of a class directly without specifying the class.\n\n2.   ### Creating and configuring mock objects with Mockito\n     * Mockito supports the creation of mock objects. For this you can use the static `mock()` method.\nMockito also supports the creation of mock objects based on the `@Mock annotation`.\n\n     * If you use this annotation, you must initialize the mock objects. The MockitoRule allows this. It invokes the static method `MockitoAnnotations.initMocks(this)` to populate the annotated fields. Alternatively you can use `@RunWith(MockitoJUnitRunner.class)`.\n\n    The usage of `@Mock` \n\t```java\n\timport static org.mockito.Mockito.*;\n\timport com.company.demo.IUserDao;\n\n\tpublic class TestDemo  {\n\t        \n\t    ClassToTest testTarget = null;\n\t        \n\t    @Mock //Tells Mockito to mock the userDao instance\n\t    IUserDao userDao; \n\t        \n\t    @beforeClass\n\t    public void setup(){\n\t        testTarget = new ClassToTest(userService);\n\t    }\n\t    @Test\n\t    public void testQuery()  {\n\t        boolean check = testTarget.query(\"select * from t_user\");\n\t        assertTrue(check); \n\t        verify(userDao).query(\"select * from t_user\"); \n\t    }\n\t}\n\t```\n\n3.   ### Configuring mocks\n\n        The `when(...).thenReturn(...)` method chain is be used to specify a condition and a return value for this condition. If you specify more than one value,\tthey are returned in the order of specification until the last one is used. Afterwards the last\tspecified value\tis returned. Mocks can also return different values depending on arguments passed into a method. You also use methods like `anyString()` or `anyInt()` to define that independent of the input value a certain return value should be returned.\nThe `doReturn(...).when(...)`methodCall call chain works similar as `when(...).thenReturn(...)` but is useful for void methods. The `doThrow()` variant can be used for methods which return void to throw an exception. \n4.   ### Verify the calls on the mock objects\n    \n     * Verify that the specified conditions are met - checks the result of a method call \n     * Behavior testing - checks that a method is called with the right parameters\n5.   ### Wrapping Java objects with Spy\n    \n     `@Spy` or the `spy()` method can be used to wrap a real object. Every call, unless specified otherwise, is delegated to the object.\n6.   ### Using @InjectMocks for dependency injection via Mockito\n\n        `@InjectMocks` creates an instance of the class and injects the mocks that are created with the @Mock (or @Spy) annotations into this instance. \n        \n        `Constructor Injection > Property Setter Injection > Field Injection`\n        \n7.   ### Capturing the arguments\n        \n        The ArgumentCaptor class allows to access the arguments of method calls during the verification. This allows to capture these arguments of method calls and to use them for tests.\n\t```java\n\tpublic class MockitoTests {\n\n\t        @Rule public MockitoRule rule = MockitoJUnit.rule();\n\n\t        @Captor\n\t    private ArgumentCaptor<List<String>> captor;\n\n\n\t        @Test\n\t    public final void shouldContainCertainListItem() {\n\t                List<String> asList = Arrays.asList(\"someElement_test\", \"someElement\");\n\t        final List<String> mockedList = mock(List.class);\n\t        mockedList.addAll(asList);\n\n\t        verify(mockedList).addAll(captor.capture());\n\t        final List<String> capturedArgument = captor.<List<String>>getValue();\n\t        assertThat(capturedArgument, hasItem(\"someElement\"));\n\t    }\n\t}\n\t```\n8.   ### Limitations \n\n     - Final classes\n     - Anonymous classes\n     - Primitive types\n\n9. ### Legacy \n\n\t - MockitoAnnotations.init(target) vs @Rule\n\t - new Object vs @InjectMock\n\t - @Spy vs @Mock","source":"_posts/JUnit-Test-with-Mockito.md","raw":"title: JUnit Test with Mockito\ndate: 2016-07-27 14:39:07\nalias: \ntags: \n - Mockito\n - JUnit\ncategories: 语言学习\n---\n## Prerequisites\nRequires an understanding of unit testing with the JUnit framework.\n\n## Target and challenge of unit testing\n - A unit test should test a class in isolation.\n - Side effects from other classes or the system should be eliminated if possible\n\n## Classifications of different test classes\n\n - A `dummy` object is passed around but never used, i.e., its methods are never called. Such an object can for example be used to fill the parameter list of a method.\n - A `fake` objects have working implementations, but are usually simplified. For example, they use an in memory database and not a real database.\n - A `stub` class is an partial implementation for an interface or class with the purpose of using an instance of this stub class during testing. Stubs usually do responding at all to anything outside what’s programmed in for the test. Stubs may also record information about calls\n - A `mock` object is a dummy implementation for an interface or a class in which you define the output of certain method calls.Mock objects are typically configured. Mock objects typically require less code to configure and should therefore be preferred.\n \n\n## Using Mockito for mocking objects\n\nMockito allows you to create and configure mock objects. \nIf you use Mockito in tests you typically:\n - Mock away external dependencies and insert the mocks into the code under test\n - Execute the code under test\n - Validate that the code executed correctly\n![image](http://note.youdao.com/yws/res/1463/WEBRESOURCE854b853d666db799b40d7e623b2eba31)\n\n## Adding Mockito as dependencies to a project\n\n - Gradle \n ```json\nrepositories { jcenter() }\ndependencies { testCompile \"org.mockito:mockito-core:2.0.57-beta\" }\n```\n - Maven\n```xml\n<dependency>\n    <groupId>org.mockito</groupId>\n    <artifactId>mockito-all</artifactId>\n    <version>2.0.2-beta</version>\n</dependency>\n```\n\n## Using the Mockito API\n\n1.   ### Static imports\n     \n        If you add a static import for `org.mockito.Mockito.\\*;`, you can access Mockitos methods like `mock()` directly. Static imports allows you to call static members, i.e., methods and fields of a class directly without specifying the class.\n\n2.   ### Creating and configuring mock objects with Mockito\n     * Mockito supports the creation of mock objects. For this you can use the static `mock()` method.\nMockito also supports the creation of mock objects based on the `@Mock annotation`.\n\n     * If you use this annotation, you must initialize the mock objects. The MockitoRule allows this. It invokes the static method `MockitoAnnotations.initMocks(this)` to populate the annotated fields. Alternatively you can use `@RunWith(MockitoJUnitRunner.class)`.\n\n    The usage of `@Mock` \n\t```java\n\timport static org.mockito.Mockito.*;\n\timport com.company.demo.IUserDao;\n\n\tpublic class TestDemo  {\n\t        \n\t    ClassToTest testTarget = null;\n\t        \n\t    @Mock //Tells Mockito to mock the userDao instance\n\t    IUserDao userDao; \n\t        \n\t    @beforeClass\n\t    public void setup(){\n\t        testTarget = new ClassToTest(userService);\n\t    }\n\t    @Test\n\t    public void testQuery()  {\n\t        boolean check = testTarget.query(\"select * from t_user\");\n\t        assertTrue(check); \n\t        verify(userDao).query(\"select * from t_user\"); \n\t    }\n\t}\n\t```\n\n3.   ### Configuring mocks\n\n        The `when(...).thenReturn(...)` method chain is be used to specify a condition and a return value for this condition. If you specify more than one value,\tthey are returned in the order of specification until the last one is used. Afterwards the last\tspecified value\tis returned. Mocks can also return different values depending on arguments passed into a method. You also use methods like `anyString()` or `anyInt()` to define that independent of the input value a certain return value should be returned.\nThe `doReturn(...).when(...)`methodCall call chain works similar as `when(...).thenReturn(...)` but is useful for void methods. The `doThrow()` variant can be used for methods which return void to throw an exception. \n4.   ### Verify the calls on the mock objects\n    \n     * Verify that the specified conditions are met - checks the result of a method call \n     * Behavior testing - checks that a method is called with the right parameters\n5.   ### Wrapping Java objects with Spy\n    \n     `@Spy` or the `spy()` method can be used to wrap a real object. Every call, unless specified otherwise, is delegated to the object.\n6.   ### Using @InjectMocks for dependency injection via Mockito\n\n        `@InjectMocks` creates an instance of the class and injects the mocks that are created with the @Mock (or @Spy) annotations into this instance. \n        \n        `Constructor Injection > Property Setter Injection > Field Injection`\n        \n7.   ### Capturing the arguments\n        \n        The ArgumentCaptor class allows to access the arguments of method calls during the verification. This allows to capture these arguments of method calls and to use them for tests.\n\t```java\n\tpublic class MockitoTests {\n\n\t        @Rule public MockitoRule rule = MockitoJUnit.rule();\n\n\t        @Captor\n\t    private ArgumentCaptor<List<String>> captor;\n\n\n\t        @Test\n\t    public final void shouldContainCertainListItem() {\n\t                List<String> asList = Arrays.asList(\"someElement_test\", \"someElement\");\n\t        final List<String> mockedList = mock(List.class);\n\t        mockedList.addAll(asList);\n\n\t        verify(mockedList).addAll(captor.capture());\n\t        final List<String> capturedArgument = captor.<List<String>>getValue();\n\t        assertThat(capturedArgument, hasItem(\"someElement\"));\n\t    }\n\t}\n\t```\n8.   ### Limitations \n\n     - Final classes\n     - Anonymous classes\n     - Primitive types\n\n9. ### Legacy \n\n\t - MockitoAnnotations.init(target) vs @Rule\n\t - new Object vs @InjectMock\n\t - @Spy vs @Mock","slug":"JUnit-Test-with-Mockito","published":1,"updated":"2019-12-30T17:16:22.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq1w000fqyvyqy77te7f","content":"<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><p>Requires an understanding of unit testing with the JUnit framework.</p>\n<h2 id=\"Target-and-challenge-of-unit-testing\"><a href=\"#Target-and-challenge-of-unit-testing\" class=\"headerlink\" title=\"Target and challenge of unit testing\"></a>Target and challenge of unit testing</h2><ul>\n<li>A unit test should test a class in isolation.</li>\n<li>Side effects from other classes or the system should be eliminated if possible</li>\n</ul>\n<h2 id=\"Classifications-of-different-test-classes\"><a href=\"#Classifications-of-different-test-classes\" class=\"headerlink\" title=\"Classifications of different test classes\"></a>Classifications of different test classes</h2><ul>\n<li>A <code>dummy</code> object is passed around but never used, i.e., its methods are never called. Such an object can for example be used to fill the parameter list of a method.</li>\n<li>A <code>fake</code> objects have working implementations, but are usually simplified. For example, they use an in memory database and not a real database.</li>\n<li>A <code>stub</code> class is an partial implementation for an interface or class with the purpose of using an instance of this stub class during testing. Stubs usually do responding at all to anything outside what’s programmed in for the test. Stubs may also record information about calls</li>\n<li>A <code>mock</code> object is a dummy implementation for an interface or a class in which you define the output of certain method calls.Mock objects are typically configured. Mock objects typically require less code to configure and should therefore be preferred.</li>\n</ul>\n<h2 id=\"Using-Mockito-for-mocking-objects\"><a href=\"#Using-Mockito-for-mocking-objects\" class=\"headerlink\" title=\"Using Mockito for mocking objects\"></a>Using Mockito for mocking objects</h2><p>Mockito allows you to create and configure mock objects.<br>If you use Mockito in tests you typically:</p>\n<ul>\n<li>Mock away external dependencies and insert the mocks into the code under test</li>\n<li>Execute the code under test</li>\n<li>Validate that the code executed correctly<br><img src=\"http://note.youdao.com/yws/res/1463/WEBRESOURCE854b853d666db799b40d7e623b2eba31\" alt=\"image\"></li>\n</ul>\n<h2 id=\"Adding-Mockito-as-dependencies-to-a-project\"><a href=\"#Adding-Mockito-as-dependencies-to-a-project\" class=\"headerlink\" title=\"Adding Mockito as dependencies to a project\"></a>Adding Mockito as dependencies to a project</h2><ul>\n<li><p>Gradle </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123; jcenter() &#125;</span><br><span class=\"line\">dependencies &#123; testCompile \"org.mockito:mockito-core:2.0.57-beta\" &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Maven</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mockito<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mockito-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.2-beta<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Using-the-Mockito-API\"><a href=\"#Using-the-Mockito-API\" class=\"headerlink\" title=\"Using the Mockito API\"></a>Using the Mockito API</h2><ol>\n<li><h3 id=\"Static-imports\"><a href=\"#Static-imports\" class=\"headerlink\" title=\"Static imports\"></a>Static imports</h3><p>   If you add a static import for <code>org.mockito.Mockito.\\*;</code>, you can access Mockitos methods like <code>mock()</code> directly. Static imports allows you to call static members, i.e., methods and fields of a class directly without specifying the class.</p>\n</li>\n<li><h3 id=\"Creating-and-configuring-mock-objects-with-Mockito\"><a href=\"#Creating-and-configuring-mock-objects-with-Mockito\" class=\"headerlink\" title=\"Creating and configuring mock objects with Mockito\"></a>Creating and configuring mock objects with Mockito</h3><ul>\n<li><p>Mockito supports the creation of mock objects. For this you can use the static <code>mock()</code> method.<br>Mockito also supports the creation of mock objects based on the <code>@Mock annotation</code>.</p>\n</li>\n<li><p>If you use this annotation, you must initialize the mock objects. The MockitoRule allows this. It invokes the static method <code>MockitoAnnotations.initMocks(this)</code> to populate the annotated fields. Alternatively you can use <code>@RunWith(MockitoJUnitRunner.class)</code>.</p>\n</li>\n</ul>\n<p>The usage of <code>@Mock</code> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.mockito.Mockito.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.company.demo.IUserDao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span>  </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    ClassToTest testTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"meta\">@Mock</span> <span class=\"comment\">//Tells Mockito to mock the userDao instance</span></span><br><span class=\"line\">    IUserDao userDao; </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"meta\">@beforeClass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        testTarget = <span class=\"keyword\">new</span> ClassToTest(userService);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQuery</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> check = testTarget.query(<span class=\"string\">\"select * from t_user\"</span>);</span><br><span class=\"line\">        assertTrue(check); </span><br><span class=\"line\">        verify(userDao).query(<span class=\"string\">\"select * from t_user\"</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"Configuring-mocks\"><a href=\"#Configuring-mocks\" class=\"headerlink\" title=\"Configuring mocks\"></a>Configuring mocks</h3><p>   The <code>when(...).thenReturn(...)</code> method chain is be used to specify a condition and a return value for this condition. If you specify more than one value,    they are returned in the order of specification until the last one is used. Afterwards the last    specified value    is returned. Mocks can also return different values depending on arguments passed into a method. You also use methods like <code>anyString()</code> or <code>anyInt()</code> to define that independent of the input value a certain return value should be returned.<br>The <code>doReturn(...).when(...)</code>methodCall call chain works similar as <code>when(...).thenReturn(...)</code> but is useful for void methods. The <code>doThrow()</code> variant can be used for methods which return void to throw an exception. </p>\n</li>\n<li><h3 id=\"Verify-the-calls-on-the-mock-objects\"><a href=\"#Verify-the-calls-on-the-mock-objects\" class=\"headerlink\" title=\"Verify the calls on the mock objects\"></a>Verify the calls on the mock objects</h3><ul>\n<li>Verify that the specified conditions are met - checks the result of a method call </li>\n<li>Behavior testing - checks that a method is called with the right parameters</li>\n</ul>\n</li>\n<li><h3 id=\"Wrapping-Java-objects-with-Spy\"><a href=\"#Wrapping-Java-objects-with-Spy\" class=\"headerlink\" title=\"Wrapping Java objects with Spy\"></a>Wrapping Java objects with Spy</h3><p><code>@Spy</code> or the <code>spy()</code> method can be used to wrap a real object. Every call, unless specified otherwise, is delegated to the object.</p>\n</li>\n<li><h3 id=\"Using-InjectMocks-for-dependency-injection-via-Mockito\"><a href=\"#Using-InjectMocks-for-dependency-injection-via-Mockito\" class=\"headerlink\" title=\"Using @InjectMocks for dependency injection via Mockito\"></a>Using @InjectMocks for dependency injection via Mockito</h3><p>   <code>@InjectMocks</code> creates an instance of the class and injects the mocks that are created with the @Mock (or @Spy) annotations into this instance. </p>\n<p>   <code>Constructor Injection &gt; Property Setter Injection &gt; Field Injection</code></p>\n</li>\n<li><h3 id=\"Capturing-the-arguments\"><a href=\"#Capturing-the-arguments\" class=\"headerlink\" title=\"Capturing the arguments\"></a>Capturing the arguments</h3><p>   The ArgumentCaptor class allows to access the arguments of method calls during the verification. This allows to capture these arguments of method calls and to use them for tests.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MockitoTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Rule</span> <span class=\"keyword\">public</span> MockitoRule rule = MockitoJUnit.rule();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Captor</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArgumentCaptor&lt;List&lt;String&gt;&gt; captor;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldContainCertainListItem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                List&lt;String&gt; asList = Arrays.asList(<span class=\"string\">\"someElement_test\"</span>, <span class=\"string\">\"someElement\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> List&lt;String&gt; mockedList = mock(List<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        mockedList.addAll(asList);</span><br><span class=\"line\"></span><br><span class=\"line\">        verify(mockedList).addAll(captor.capture());</span><br><span class=\"line\">        <span class=\"keyword\">final</span> List&lt;String&gt; capturedArgument = captor.&lt;List&lt;String&gt;&gt;getValue();</span><br><span class=\"line\">        assertThat(capturedArgument, hasItem(<span class=\"string\">\"someElement\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"Limitations\"><a href=\"#Limitations\" class=\"headerlink\" title=\"Limitations\"></a>Limitations</h3><ul>\n<li>Final classes</li>\n<li>Anonymous classes</li>\n<li>Primitive types</li>\n</ul>\n</li>\n<li><h3 id=\"Legacy\"><a href=\"#Legacy\" class=\"headerlink\" title=\"Legacy\"></a>Legacy</h3><ul>\n<li>MockitoAnnotations.init(target) vs @Rule</li>\n<li>new Object vs @InjectMock</li>\n<li>@Spy vs @Mock</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><p>Requires an understanding of unit testing with the JUnit framework.</p>\n<h2 id=\"Target-and-challenge-of-unit-testing\"><a href=\"#Target-and-challenge-of-unit-testing\" class=\"headerlink\" title=\"Target and challenge of unit testing\"></a>Target and challenge of unit testing</h2><ul>\n<li>A unit test should test a class in isolation.</li>\n<li>Side effects from other classes or the system should be eliminated if possible</li>\n</ul>\n<h2 id=\"Classifications-of-different-test-classes\"><a href=\"#Classifications-of-different-test-classes\" class=\"headerlink\" title=\"Classifications of different test classes\"></a>Classifications of different test classes</h2><ul>\n<li>A <code>dummy</code> object is passed around but never used, i.e., its methods are never called. Such an object can for example be used to fill the parameter list of a method.</li>\n<li>A <code>fake</code> objects have working implementations, but are usually simplified. For example, they use an in memory database and not a real database.</li>\n<li>A <code>stub</code> class is an partial implementation for an interface or class with the purpose of using an instance of this stub class during testing. Stubs usually do responding at all to anything outside what’s programmed in for the test. Stubs may also record information about calls</li>\n<li>A <code>mock</code> object is a dummy implementation for an interface or a class in which you define the output of certain method calls.Mock objects are typically configured. Mock objects typically require less code to configure and should therefore be preferred.</li>\n</ul>\n<h2 id=\"Using-Mockito-for-mocking-objects\"><a href=\"#Using-Mockito-for-mocking-objects\" class=\"headerlink\" title=\"Using Mockito for mocking objects\"></a>Using Mockito for mocking objects</h2><p>Mockito allows you to create and configure mock objects.<br>If you use Mockito in tests you typically:</p>\n<ul>\n<li>Mock away external dependencies and insert the mocks into the code under test</li>\n<li>Execute the code under test</li>\n<li>Validate that the code executed correctly<br><img src=\"http://note.youdao.com/yws/res/1463/WEBRESOURCE854b853d666db799b40d7e623b2eba31\" alt=\"image\"></li>\n</ul>\n<h2 id=\"Adding-Mockito-as-dependencies-to-a-project\"><a href=\"#Adding-Mockito-as-dependencies-to-a-project\" class=\"headerlink\" title=\"Adding Mockito as dependencies to a project\"></a>Adding Mockito as dependencies to a project</h2><ul>\n<li><p>Gradle </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123; jcenter() &#125;</span><br><span class=\"line\">dependencies &#123; testCompile \"org.mockito:mockito-core:2.0.57-beta\" &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Maven</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mockito<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mockito-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.2-beta<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Using-the-Mockito-API\"><a href=\"#Using-the-Mockito-API\" class=\"headerlink\" title=\"Using the Mockito API\"></a>Using the Mockito API</h2><ol>\n<li><h3 id=\"Static-imports\"><a href=\"#Static-imports\" class=\"headerlink\" title=\"Static imports\"></a>Static imports</h3><p>   If you add a static import for <code>org.mockito.Mockito.\\*;</code>, you can access Mockitos methods like <code>mock()</code> directly. Static imports allows you to call static members, i.e., methods and fields of a class directly without specifying the class.</p>\n</li>\n<li><h3 id=\"Creating-and-configuring-mock-objects-with-Mockito\"><a href=\"#Creating-and-configuring-mock-objects-with-Mockito\" class=\"headerlink\" title=\"Creating and configuring mock objects with Mockito\"></a>Creating and configuring mock objects with Mockito</h3><ul>\n<li><p>Mockito supports the creation of mock objects. For this you can use the static <code>mock()</code> method.<br>Mockito also supports the creation of mock objects based on the <code>@Mock annotation</code>.</p>\n</li>\n<li><p>If you use this annotation, you must initialize the mock objects. The MockitoRule allows this. It invokes the static method <code>MockitoAnnotations.initMocks(this)</code> to populate the annotated fields. Alternatively you can use <code>@RunWith(MockitoJUnitRunner.class)</code>.</p>\n</li>\n</ul>\n<p>The usage of <code>@Mock</code> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.mockito.Mockito.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.company.demo.IUserDao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span>  </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    ClassToTest testTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"meta\">@Mock</span> <span class=\"comment\">//Tells Mockito to mock the userDao instance</span></span><br><span class=\"line\">    IUserDao userDao; </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"meta\">@beforeClass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        testTarget = <span class=\"keyword\">new</span> ClassToTest(userService);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQuery</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> check = testTarget.query(<span class=\"string\">\"select * from t_user\"</span>);</span><br><span class=\"line\">        assertTrue(check); </span><br><span class=\"line\">        verify(userDao).query(<span class=\"string\">\"select * from t_user\"</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"Configuring-mocks\"><a href=\"#Configuring-mocks\" class=\"headerlink\" title=\"Configuring mocks\"></a>Configuring mocks</h3><p>   The <code>when(...).thenReturn(...)</code> method chain is be used to specify a condition and a return value for this condition. If you specify more than one value,    they are returned in the order of specification until the last one is used. Afterwards the last    specified value    is returned. Mocks can also return different values depending on arguments passed into a method. You also use methods like <code>anyString()</code> or <code>anyInt()</code> to define that independent of the input value a certain return value should be returned.<br>The <code>doReturn(...).when(...)</code>methodCall call chain works similar as <code>when(...).thenReturn(...)</code> but is useful for void methods. The <code>doThrow()</code> variant can be used for methods which return void to throw an exception. </p>\n</li>\n<li><h3 id=\"Verify-the-calls-on-the-mock-objects\"><a href=\"#Verify-the-calls-on-the-mock-objects\" class=\"headerlink\" title=\"Verify the calls on the mock objects\"></a>Verify the calls on the mock objects</h3><ul>\n<li>Verify that the specified conditions are met - checks the result of a method call </li>\n<li>Behavior testing - checks that a method is called with the right parameters</li>\n</ul>\n</li>\n<li><h3 id=\"Wrapping-Java-objects-with-Spy\"><a href=\"#Wrapping-Java-objects-with-Spy\" class=\"headerlink\" title=\"Wrapping Java objects with Spy\"></a>Wrapping Java objects with Spy</h3><p><code>@Spy</code> or the <code>spy()</code> method can be used to wrap a real object. Every call, unless specified otherwise, is delegated to the object.</p>\n</li>\n<li><h3 id=\"Using-InjectMocks-for-dependency-injection-via-Mockito\"><a href=\"#Using-InjectMocks-for-dependency-injection-via-Mockito\" class=\"headerlink\" title=\"Using @InjectMocks for dependency injection via Mockito\"></a>Using @InjectMocks for dependency injection via Mockito</h3><p>   <code>@InjectMocks</code> creates an instance of the class and injects the mocks that are created with the @Mock (or @Spy) annotations into this instance. </p>\n<p>   <code>Constructor Injection &gt; Property Setter Injection &gt; Field Injection</code></p>\n</li>\n<li><h3 id=\"Capturing-the-arguments\"><a href=\"#Capturing-the-arguments\" class=\"headerlink\" title=\"Capturing the arguments\"></a>Capturing the arguments</h3><p>   The ArgumentCaptor class allows to access the arguments of method calls during the verification. This allows to capture these arguments of method calls and to use them for tests.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MockitoTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Rule</span> <span class=\"keyword\">public</span> MockitoRule rule = MockitoJUnit.rule();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Captor</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArgumentCaptor&lt;List&lt;String&gt;&gt; captor;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldContainCertainListItem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                List&lt;String&gt; asList = Arrays.asList(<span class=\"string\">\"someElement_test\"</span>, <span class=\"string\">\"someElement\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> List&lt;String&gt; mockedList = mock(List<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        mockedList.addAll(asList);</span><br><span class=\"line\"></span><br><span class=\"line\">        verify(mockedList).addAll(captor.capture());</span><br><span class=\"line\">        <span class=\"keyword\">final</span> List&lt;String&gt; capturedArgument = captor.&lt;List&lt;String&gt;&gt;getValue();</span><br><span class=\"line\">        assertThat(capturedArgument, hasItem(<span class=\"string\">\"someElement\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"Limitations\"><a href=\"#Limitations\" class=\"headerlink\" title=\"Limitations\"></a>Limitations</h3><ul>\n<li>Final classes</li>\n<li>Anonymous classes</li>\n<li>Primitive types</li>\n</ul>\n</li>\n<li><h3 id=\"Legacy\"><a href=\"#Legacy\" class=\"headerlink\" title=\"Legacy\"></a>Legacy</h3><ul>\n<li>MockitoAnnotations.init(target) vs @Rule</li>\n<li>new Object vs @InjectMock</li>\n<li>@Spy vs @Mock</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Markdown","date":"2015-05-08T17:01:20.000Z","description":null,"_content":"# Markdown 是一种「电子邮件」风格的「标记语言」\nMarkdown 具有以下优点：\n- 纯文本，所以兼容性极强，可以用所有文本编辑器打开；\n- 让你专注于文字而不是排版\n- 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等\n- Markdown 的标记语法有极好的可读性\n\nMarkdown 的语法已经足够简单，对于一个从事开发工作的人员来讲很容易就可以掌握，本人自己也在学习Markdown 语法当中，谨以此文放于博客中，以作日后参考\n\n# Markdown的一般语法 \n## 标题\n\n在Markdown中，你只需要在文本前面加上 `#` 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 `#` 即可，标题字号相应降低。例如：\n{% codeblock %}\n # 一级标题\n ## 二级标题 \n ### 三级标题 \n #### 四级标题 \n ##### 五级标题 \n ###### 六级标题 \n{% endcodeblock %}\n *注：`#` 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法*\n\n ## 列表\n\n 在 Markdown 中，你只需要在文字前面加上 `-` 就可以了，例如：\n\n ### 无序列表：\n {% codeblock %}\n- 文本1\n- 文本2\n- 文本3\n{% endcodeblock %}\n输出：\n\n- 文本1\n- 文本2\n- 文本3\n\n### 有序列表\n{% codeblock %}\n1. 文本1\n2. 文本2\n3. 文本3\n{% endcodeblock %}\n输出：\n\n1. 文本1\n2. 文本2\n3. 文本3\n*注：`-`、`1.` 和文本之间要保留一个字符的空格\n\n## 链接和图片\n\n### 插入链接\nMarkdown 中，插入链接不需要其他按钮，你只需要使用 ` [显示文本](链接地址) ` 这样的语法即可，例如：\n{% codeblock %}\n[点击这里](http://linbao.github.io \"访问我的主页\" ) \n{% endcodeblock %}\n输出：\n[点击这里](http://linbao.github.io \"访问我的主页\") \n\n### 插入图片\n{% codeblock %}\n![](https://linbao-lee.github.io/css/img/author.jpg)\n{% endcodeblock %}\n## 引用\n\n在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 ` > ` 就好了，例如：\n\n\\> 失败是成功之母\n\n最终显示的结果为：\n> 失败是成功之母\n> 失败是成功之母\n\n## 粗体和斜体\n非常简单，用 `** ` 包含一段文本就是粗体的语法，用`*`包含一段文本就是斜体的语法\n\n参考[Markdown 语法说明](http://wowubuntu.com/markdown/)","source":"_posts/Markdown.md","raw":"title: \"Markdown\"\ndate: 2015-05-09 01:01:20\ntags: 语言学习\ndescription: \n---\n# Markdown 是一种「电子邮件」风格的「标记语言」\nMarkdown 具有以下优点：\n- 纯文本，所以兼容性极强，可以用所有文本编辑器打开；\n- 让你专注于文字而不是排版\n- 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等\n- Markdown 的标记语法有极好的可读性\n\nMarkdown 的语法已经足够简单，对于一个从事开发工作的人员来讲很容易就可以掌握，本人自己也在学习Markdown 语法当中，谨以此文放于博客中，以作日后参考\n\n# Markdown的一般语法 \n## 标题\n\n在Markdown中，你只需要在文本前面加上 `#` 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 `#` 即可，标题字号相应降低。例如：\n{% codeblock %}\n # 一级标题\n ## 二级标题 \n ### 三级标题 \n #### 四级标题 \n ##### 五级标题 \n ###### 六级标题 \n{% endcodeblock %}\n *注：`#` 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法*\n\n ## 列表\n\n 在 Markdown 中，你只需要在文字前面加上 `-` 就可以了，例如：\n\n ### 无序列表：\n {% codeblock %}\n- 文本1\n- 文本2\n- 文本3\n{% endcodeblock %}\n输出：\n\n- 文本1\n- 文本2\n- 文本3\n\n### 有序列表\n{% codeblock %}\n1. 文本1\n2. 文本2\n3. 文本3\n{% endcodeblock %}\n输出：\n\n1. 文本1\n2. 文本2\n3. 文本3\n*注：`-`、`1.` 和文本之间要保留一个字符的空格\n\n## 链接和图片\n\n### 插入链接\nMarkdown 中，插入链接不需要其他按钮，你只需要使用 ` [显示文本](链接地址) ` 这样的语法即可，例如：\n{% codeblock %}\n[点击这里](http://linbao.github.io \"访问我的主页\" ) \n{% endcodeblock %}\n输出：\n[点击这里](http://linbao.github.io \"访问我的主页\") \n\n### 插入图片\n{% codeblock %}\n![](https://linbao-lee.github.io/css/img/author.jpg)\n{% endcodeblock %}\n## 引用\n\n在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 ` > ` 就好了，例如：\n\n\\> 失败是成功之母\n\n最终显示的结果为：\n> 失败是成功之母\n> 失败是成功之母\n\n## 粗体和斜体\n非常简单，用 `** ` 包含一段文本就是粗体的语法，用`*`包含一段文本就是斜体的语法\n\n参考[Markdown 语法说明](http://wowubuntu.com/markdown/)","slug":"Markdown","published":1,"updated":"2019-12-30T17:16:22.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq1z000jqyvy471r6lv9","content":"<h1 id=\"Markdown-是一种「电子邮件」风格的「标记语言」\"><a href=\"#Markdown-是一种「电子邮件」风格的「标记语言」\" class=\"headerlink\" title=\"Markdown 是一种「电子邮件」风格的「标记语言」\"></a>Markdown 是一种「电子邮件」风格的「标记语言」</h1><p>Markdown 具有以下优点：</p>\n<ul>\n<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开；</li>\n<li>让你专注于文字而不是排版</li>\n<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等</li>\n<li>Markdown 的标记语法有极好的可读性</li>\n</ul>\n<p>Markdown 的语法已经足够简单，对于一个从事开发工作的人员来讲很容易就可以掌握，本人自己也在学习Markdown 语法当中，谨以此文放于博客中，以作日后参考</p>\n<h1 id=\"Markdown的一般语法\"><a href=\"#Markdown的一般语法\" class=\"headerlink\" title=\"Markdown的一般语法\"></a>Markdown的一般语法</h1><h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>在Markdown中，你只需要在文本前面加上 <code>#</code> 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 <code>#</code> 即可，标题字号相应降低。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题 </span><br><span class=\"line\">### 三级标题 </span><br><span class=\"line\">#### 四级标题 </span><br><span class=\"line\">##### 五级标题 </span><br><span class=\"line\">###### 六级标题 </span><br></pre></td></tr></table></figure><br> <em>注：<code>#</code> 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法</em></p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p> 在 Markdown 中，你只需要在文字前面加上 <code>-</code> 就可以了，例如：</p>\n<h3 id=\"无序列表：\"><a href=\"#无序列表：\" class=\"headerlink\" title=\"无序列表：\"></a>无序列表：</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 文本1</span><br><span class=\"line\">- 文本2</span><br><span class=\"line\">- 文本3</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<ul>\n<li>文本1</li>\n<li>文本2</li>\n<li>文本3</li>\n</ul>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 文本1</span><br><span class=\"line\">2. 文本2</span><br><span class=\"line\">3. 文本3</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<ol>\n<li>文本1</li>\n<li>文本2</li>\n<li>文本3<br>*注：<code>-</code>、<code>1.</code> 和文本之间要保留一个字符的空格</li>\n</ol>\n<h2 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h2><h3 id=\"插入链接\"><a href=\"#插入链接\" class=\"headerlink\" title=\"插入链接\"></a>插入链接</h3><p>Markdown 中，插入链接不需要其他按钮，你只需要使用 <code>[显示文本](链接地址)</code> 这样的语法即可，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[点击这里](http://linbao.github.io &quot;访问我的主页&quot; ) </span><br></pre></td></tr></table></figure><br>输出：<br><a href=\"http://linbao.github.io\" title=\"访问我的主页\" target=\"_blank\" rel=\"noopener\">点击这里</a> </p>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](https://linbao-lee.github.io/css/img/author.jpg)</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 <code>&gt;</code> 就好了，例如：</p>\n<p>> 失败是成功之母</p>\n<p>最终显示的结果为：</p>\n<blockquote>\n<p>失败是成功之母<br>失败是成功之母</p>\n</blockquote>\n<h2 id=\"粗体和斜体\"><a href=\"#粗体和斜体\" class=\"headerlink\" title=\"粗体和斜体\"></a>粗体和斜体</h2><p>非常简单，用 <code>**</code> 包含一段文本就是粗体的语法，用<code>*</code>包含一段文本就是斜体的语法</p>\n<p>参考<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown 语法说明</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Markdown-是一种「电子邮件」风格的「标记语言」\"><a href=\"#Markdown-是一种「电子邮件」风格的「标记语言」\" class=\"headerlink\" title=\"Markdown 是一种「电子邮件」风格的「标记语言」\"></a>Markdown 是一种「电子邮件」风格的「标记语言」</h1><p>Markdown 具有以下优点：</p>\n<ul>\n<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开；</li>\n<li>让你专注于文字而不是排版</li>\n<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等</li>\n<li>Markdown 的标记语法有极好的可读性</li>\n</ul>\n<p>Markdown 的语法已经足够简单，对于一个从事开发工作的人员来讲很容易就可以掌握，本人自己也在学习Markdown 语法当中，谨以此文放于博客中，以作日后参考</p>\n<h1 id=\"Markdown的一般语法\"><a href=\"#Markdown的一般语法\" class=\"headerlink\" title=\"Markdown的一般语法\"></a>Markdown的一般语法</h1><h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>在Markdown中，你只需要在文本前面加上 <code>#</code> 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 <code>#</code> 即可，标题字号相应降低。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题 </span><br><span class=\"line\">### 三级标题 </span><br><span class=\"line\">#### 四级标题 </span><br><span class=\"line\">##### 五级标题 </span><br><span class=\"line\">###### 六级标题 </span><br></pre></td></tr></table></figure><br> <em>注：<code>#</code> 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法</em></p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p> 在 Markdown 中，你只需要在文字前面加上 <code>-</code> 就可以了，例如：</p>\n<h3 id=\"无序列表：\"><a href=\"#无序列表：\" class=\"headerlink\" title=\"无序列表：\"></a>无序列表：</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 文本1</span><br><span class=\"line\">- 文本2</span><br><span class=\"line\">- 文本3</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<ul>\n<li>文本1</li>\n<li>文本2</li>\n<li>文本3</li>\n</ul>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 文本1</span><br><span class=\"line\">2. 文本2</span><br><span class=\"line\">3. 文本3</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<ol>\n<li>文本1</li>\n<li>文本2</li>\n<li>文本3<br>*注：<code>-</code>、<code>1.</code> 和文本之间要保留一个字符的空格</li>\n</ol>\n<h2 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h2><h3 id=\"插入链接\"><a href=\"#插入链接\" class=\"headerlink\" title=\"插入链接\"></a>插入链接</h3><p>Markdown 中，插入链接不需要其他按钮，你只需要使用 <code>[显示文本](链接地址)</code> 这样的语法即可，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[点击这里](http://linbao.github.io &quot;访问我的主页&quot; ) </span><br></pre></td></tr></table></figure><br>输出：<br><a href=\"http://linbao.github.io\" title=\"访问我的主页\" target=\"_blank\" rel=\"noopener\">点击这里</a> </p>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](https://linbao-lee.github.io/css/img/author.jpg)</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 <code>&gt;</code> 就好了，例如：</p>\n<p>> 失败是成功之母</p>\n<p>最终显示的结果为：</p>\n<blockquote>\n<p>失败是成功之母<br>失败是成功之母</p>\n</blockquote>\n<h2 id=\"粗体和斜体\"><a href=\"#粗体和斜体\" class=\"headerlink\" title=\"粗体和斜体\"></a>粗体和斜体</h2><p>非常简单，用 <code>**</code> 包含一段文本就是粗体的语法，用<code>*</code>包含一段文本就是斜体的语法</p>\n<p>参考<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown 语法说明</a></p>\n"},{"title":"OSGi开发中的一些认识和总结","date":"2015-08-25T14:40:41.000Z","alias":null,"_content":"## 前言\nOSGI(Open Services Gateway Initiative)，或者通俗点说JAVA动态模块系统，定义了一套模块应用开发的框架。OSGI容器实现方案如Knopflerfish, Equinox, and Apache Felix允许你把你的应用分成多个功能模块，这样通过依赖管理这些功能会更加方便。\n和Servlet和EJB规范类似，OSGI规范包含两大块：\n- 一个OSGI容器需要实现的服务集合；\n- 一种OSGI容器和应用之间通信的机制。\n\n开发OSGI平台意味着你需要使用OSGI API编写你的应用，然后将其部署到OSGI容器中。从开发者的视角来看，OSGI提供以下优势：\n \n1. 你可以动态地安装、卸载、启动、停止不同的应用模块，而不需要重启容器。\n2. 你的应用可以在同一时刻跑多个同一个模块的实例。\n3. OSGI在SOA领域提供成熟的解决方案，包括嵌入式，移动设备和富客户端应用等。\n \nOSGI容器被设计专门用来开发可分解为功能模块的复杂的Java应用。几乎所有企业应用服务提供商支持或计划支持OSGI。Spring框架同样支持OSGI，通过Spring DM（Spring Dynamic Modules for OSGI Service Platforms）项目，可以让我们在Spring上更方便的应用OSGI。\n从企业应用开发者的角度看，OSGI容器侵入性非常小，你可以方便地将其嵌入一个企业应用。举个例子来说，假设你在开发一个复杂的web应用。你希望将这个应用分解成多个功能模块。一个View层模块，一个Model层模块，一个DAO模块。使用嵌入式OSGI容器来跨依赖地管理这些模块可以让你随时更新你的DAO模块却不需要重启你的服务器。\n只要你的应用完全符合OSGI规范，它就可以在所有符合OSGI规范的容器内运行。现在，有三种流行的开源OSGI容器：\n \n- Equinox是OSGI Service Platform Release 4的一个实现。是Eclipse 模块化运行时的核心。\n- Knopflerfish另一个选择。\n- Apache Felix是Apache软件基金会赞助的一个OSGI容器\n \n在这篇文章里我们使用Equinox作为我们的OSGI容器。\n## 尝试开发一个Hello World bundle\n \n在OSGI的领域，发布的软件是以bundle的形式出现。bundle由java class类和资源文件组成，向设备所有者提供功能，同时可以为其他的bundles提供服务。Eclipse对开发bundles提供了强大的支持。Eclipse不仅仅提供创建bundles的功能，它还集成了Equinox这个OSGI容器，你可以在其上开发和调试OSGI组件。其实所有的Eclipse插件都是使用Eclipse规范代码写的OSGI bundle。接下来，你将可以学到如何使用Eclipse IDE开发一个Hello world osgi bundle。\n \n## 开始开发bundle\n \n我们一步步的开始： \n启动Eclipse，依次点 File --> New --> Project。\n选择Plug-in Project，next。\n输入Project Name项目名称，比如com.howard.sample.HelloWorld,Target Platform(目标平台)里的an OSGI framework，选择standard。\n剩下的保持默认，next。\n下个对话框也默认，next。\n然后选择Hello OSGI Bundle作为模版。Finish。\nEclipse会飞快的为你创建Hello world bundle的模版代码。主要包含两个文件：Activator.java和MANIFEST.MF。\n \nActivator.java的代码如下所示：\n\n``` java\nimport org.osgi.framework.BundleActivator;\nimport org.osgi.framework.BundleContext;\npublic class Activator implements BundleActivator {\n    public void start(BundleContext context) throws Exception {\n        System.out.println(\"Hello world\");\n    }\n    public void stop(BundleContext context) throws Exception {\n        System.out.println(\"Goodbye World\");\n    }\n}\n```\n如果你的bundle在启动和关闭的时候需要被通知，你可以考虑实现BundleActivator接口。以下是定义Activator的一些注意点：\n1. 你的Activator类需要一个公有的无参数构造函数。OSGI框架会通过类反射的方式来实例化一个Activator类。\n2. 容器启动bundle过程中负责调用你的Activator类的start方法。bundle可以在此初始化资源比如说初始化数据库连接。start方法需要一个参数，BundleContext对象。这个对象允许bundles以取得OSGI容器相关信息的方式和框架交互。如果某一个bundle有异常抛出，容器将对该bundle标记为stopped并不将其纳入service列表。\n3. 容器关闭的时候会调用你的Activator类方法stop(),你可以利用这个机会做一些清理的操作。\n\n## 关于MANIFEST.MF文件\n这个文件是你的bundle的部署描述文件。格式和Jar里的MANIFEST.MF是一样的。包含的不少名值对，就像如下：\n\n``` manifest\nManifest-Version: 1.0  \nBundle-ManifestVersion: 2  \nBundle-Name: HelloWorld Plug-in  \nBundle-SymbolicName: com.howard.sample.HelloWorld  \nBundle-Version: 1.0.0  \nBundle-Activator: com.howard.sample.helloworld.Activator  \nBundle-Vendor: HOWARD  \nBundle-RequiredExecutionEnvironment: JavaSE-1.6  \nImport-Package: org.osgi.framework;version=\"1.3.0\" \n```\n分别来看下：\n \n`Bundle-ManifestVersion`数值为2意味着本bundle支持OSGI规范第四版；如果是1那就是支持OSGI规范第三版。\n`Bundle-Name` 给bundle定义一个短名，方便人员阅读\n`Bundle-SymbolicName` 给bundle定义一个唯一的非局部名。方便分辨。\n`Bundle-Activator` 声明在start和stop事件发生时会被通知的监听类的名字。\n`Import-Package`  定义bundle的导入包。\n\nHello World bundle完成了，接下来我们运行一下。\n\n## 运行bundle\n1. 点击Run --> Run Configuration\n2. 在左边的OSGI Framework选项里右键 new ，创建一个新的OSGI Run Configuration\n名字随便取好了，我们取个OSGi hello world。\n3. 你会注意到中间的窗口里Workspace项目里有一子项 com.howard.sample.HelloWorld,将其勾选上，其他的不用管。这时的状态应该如下图。\n4. 点击Run按钮。在控制台你应该可以看见点东西了。那是叫做OSGI控制台的东东。随之而来的，还有一个\"Hello world\"。\n\n## OSGI控制台\nOSGI控制台是一个OSGI容器的命令行界面。你可以利用它做些诸如启动，关闭，安装bundles，更新和删除bundles等操作。现在，点击OSGI控制台所在的位置，回车，你就会发现可以输入命令了。这时的OSGI控制台应该如下图：\n\n\n\n下面列出一些常用的OSGI命令，你可以试着和OSGI容器交互。\n`ss` 显示已安装的bundles的状态信息，信息包括bundle ID，短名，状态等等。\n`start` 启动一个bundle\n`stop`  关闭一个bundle\n`update`  载入一个新的JAR文件更新一个bundle\n`install`  安装一个新的bundle到容器中\n`uninstall`  卸载一个已在容器中的bundle\n\n## 依赖管理\nOSGI规范允许你把你的应用分解成多个模块然后管理各个模块间的依赖关系。\n这需要通过bundle scope来完成。默认情况下，一个bundle内的class对其他bundle来说是不可见的。那么，如果要让一个bundle访问另一个bundle里的class要怎么做？解决的方案就是从源bundle导出包，然后在目标bundle里导入。\n接下来我们对此做一个例子。\n \n首先，我们需要先创建一个com.howard.sample.HelloService bundle,我们将通过它导出一个包。\n然后，我们在com.howard.sample.HelloWorld 这个bundle里导入包。\n\n### 导出包\n1. 创建名为com.howard.sample.HelloService的bundle，创建步骤和前面一样。\n2. 在这个bundle内，添加一个com.howard.sample.service.HelloService.java 接口，代码如下：\n\n``` java\npublic interface HelloService {  \n    public String sayHello();  \n}  \n```\n3. 创建一个com.howard.sample.service.impl.HelloServiceImpl.java类实现刚才的接口：\n\n``` java\npublic class HelloServiceImpl implements HelloService{  \n    public String sayHello() {  \n        System.out.println(\"Inside HelloServiceImple.sayHello()\");  \n        return \"Say Hello\";  \n    }  \n}  \n```\n4. 打开MANIFEST.MF,选择Runtime标签项，在Exported Packages选项栏，点击Add并且选择com.howard.sample.service这个包。然后MANIFEST.MF的代码应该如下：\n\n``` manifest\nManifest-Version: 1.0\nBundle-ManifestVersion: 2\nBundle-Name: HelloService Plug-in\nBundle-SymbolicName: com.howard.sample.HelloService\nBundle-Version: 1.0.0\nBundle-Activator: com.howard.sample.helloservice.Activator\nBundle-Vendor: HOWARD\nBundle-RequiredExecutionEnvironment: JavaSE-1.6\nImport-Package: org.osgi.framework;version=\"1.3.0\"\nExport-Package: com.howard.sample.service\n```\n你可以看到，MANIFEST.MF文件和刚才的HelloWorld的那份很类似。唯一的区别就是这个多了Export-Package这个标记，对应的值就是我们刚才选择的com.howard.sample.service。\nExport-Package标记告诉OSGI容器在com.howard.sample.service包内的classes可以被外部访问。\n注意，我们仅仅暴露了HelloService接口，而不是直接暴露HelloServiceImpl实现。\n### 导入包\n\n接下来我们要更新原来的HelloWorld bundle以导入com.howard.sample.service包。步骤如下：\n1. 进入HelloWorld bundle，打开MANIFEST.MF，进入Dependencies标签页，在Imported Packages里添加com.howard.sample.service。MANIFEST.MF文件应该如下所示：\n\n``` manifest\nManifest-Version: 1.0\nBundle-ManifestVersion: 2\nBundle-Name: HelloWorld Plug-in\nBundle-SymbolicName: com.howard.sample.HelloWorld\nBundle-Version: 1.0.0\nBundle-Activator: com.howard.sample.helloworld.Activator\nBundle-Vendor: HOWARD\nBundle-RequiredExecutionEnvironment: JavaSE-1.6\nImport-Package: com.howard.sample.service,\n org.osgi.framework;version=\"1.3.0\"\n ```\n 没错，Import-package标记的值也就是导入的包名之间是用逗号隔开的。在这里导入了两个包om.howard.sample.service和org.osgi.framework。后者是使用Activator类时必须导入的包。\n \n2. 接下来，打开HelloWorld项目下的Activator.java文件，这时候你会发现可以使用HelloService这个接口了。但还是不能使用HelloServiceImpl实现类。Eclipse会告诉你：Access restriction（访问禁止）。\n\n## Class级别可见域\n为什么OSGI容器可以做到让jar包中的一些classes可见而另一些又不可见呢。\n答案其实就是OSGI容器自定义了java class loader来有选择的加载类。OSGI容器为每一个bundle都创建了不同的class loader。因此，bundle可以访问的classes包括\n- `Boot classpath` ：所有的java基础类。\n- `Framework classpath` ：OSGI框架级别的classloader加载的类\n- `Bundle classpath` ：Bundle本身引用的关系紧密的JAR的路径\n- `Imported packages` ：就是在MANIFEST.MF里声明的导入包，一旦声明，在bundle内就可见了。]\n\nundle级别的可见域允许你可以随时放心的更改HelloServiceImpl实现类而不需要去担心依赖关系会被破坏。\n## OSGI服务\nOSGI框架是实现SOA的绝佳土壤。通过它可以实现bundles暴露服务接口给其他bundles消费而不需要让细节暴露。消费bundles甚至可以完全不知道提供服务的bundles。凭着可以良好的隐藏具体实现的能力，OSGI当之无愧是SOA的一种较完美的实现方案。\n \nOSGI中，提供服务的bundle在OSGI容器上将一个POJO注册成一个service。消费者bundle请求OSGI容器中基于某个特殊接口的注册service。一旦找到，消费者bundle就会绑定它，然后就可以调用service中的方法了。举个例子会更容易说明。\n\n### 导出services\n1. 确保com.howard.sample.HelloService里的MANIFEST.MF导入org.osgi.framework包\n2. 创建com.howard.sample.service.impl.HelloServiceActivator.java,代码如下：\n\n``` java\npublic class HelloServiceActivator implements BundleActivator {  \n    ServiceRegistration helloServiceRegistration;  \n    @Override  \n    public void start(BundleContext context) throws Exception {  \n        HelloService helloService = new HelloServiceImpl();  \n        helloServiceRegistration = context.registerService(HelloService.class  \n                .getName(), helloService, null);  \n    }  \n  \n    @Override  \n    public void stop(BundleContext context) throws Exception {  \n        helloServiceRegistration.unregister();  \n    }  \n  \n} \n```\n我们就是用BundleContext的registerService方法注册service的。这个方法需要三个参数。\n- service的接口名。如果service实现了多个接口，那样你需要传入一个包含所有接口名的String数组。在这里我们传入的是HelloService这个接口。\n- 真正的service实现。在例子中我们传了一个HelloServiceImpl实现。\n- service属性。这个参数可以在有多个service实现同一个接口的情况下，消费者用来区分真正感兴趣的service。\n\n3. 最后一步就是修改HelloService的MANIFEST.MF文件，将Bundle-Activator改成com.howard.sample.service.impl.HelloServiceActivator\n\n现在HelloService bundle已经随时准备将HelloServiceImpl服务发布了。OSGI容器启动HelloServie bundle的时候会让HelloServiceActivator运作，在那个时候将HelloServiceImpl注册到容器中，接下来就是创建消费者的问题了。\n\n### 导入service\n我们的消费者就是HelloWorld bundle，主要修改的就是其中的Activator.java,修改代码如下：\n\n``` java \npublic class Activator implements BundleActivator {  \nServiceReference helloServiceReference;  \n    public void start(BundleContext context) throws Exception {  \n        System.out.println(\"Hello World!!\");  \n        helloServiceReference=context.getServiceReference(HelloService.class.getName());  \n        HelloService helloService=(HelloService)context.getService(helloServiceReference);  \n        System.out.println(helloService.sayHello());  \n    }  \n    public void stop(BundleContext context) throws Exception {  \n        System.out.println(\"Goodbye World!!\");  \n        context.ungetService(helloServiceReference);  \n    }  \n}  \n```\n很简单的代码 。。\n\n在运行之前我们在Run-->Run Configurations对话框里，把HelloWorld和HelloService这两个bundle前面的钩都打上。然后运行时你会发现HelloServiceImpl.sayHello()方法已经被调用了。\n \n在OSGI控制台输入ss并回车，所有容器内的bundle状态一目了然。其中id为0的bundle是OSGI框架基础bundle，另两个就是HelloService和HelloWorld了，它俩的id是随机的，状态是ACTIVE也就是已启动状态。假设HelloService的id为7，HelloWorld为8。\n \n输入stop 8就可以暂停bundle的运行，容器内这个bundle还是存在的，只是状态变成了RESOLVED。再次启动使用start 8，然后就会看见HelloWorld bundle消费了HelloService的服务。\n\n### 创建服务工厂\n\n刚才例子所示，我们会在HelloService bundle启动时初始化并注册service。然后不管存不存在消费端，这个service都会存在，而且消费端取得的service 实例其实都是同一个。OK，某些servie是比较耗费资源的主，我们不希望它一直占用资源，最好是在真正用它的时候创建不用的时候销毁就最好了。\n \n解决如上问题的方案就是使用ServiceFactory接口的实现来代替原先service具体的实现到OSGI容器去注册。这样，以后只有当其他bundle请求该服务时，才会由ServiceFactory实现类来处理请求并返回一个新的service实例。\n \n实例步骤如下：\n1. 在HelloService bundle创建一个实现ServiceFactory接口的类HelloServiceFactory类，代码如下：\n\n``` java \npublic class HelloServiceFactory implements ServiceFactory {\n    private int usageCounter = 0;\n    @Override\n    public Object getService(Bundle bundle, ServiceRegistration registration) {\n        System.out.println(\"Create object of HelloService for \" + bundle.getSymbolicName());\n        usageCounter++;\n        System.out.println(\"Number of bundles using service \" + usageCounter);\n        HelloService helloService = new HelloServiceImpl();\n        return helloService;\n    }\n    @Override\n    public void ungetService(Bundle bundle, ServiceRegistration registration, Object service) {\n        System.out.println(\"Release object of HelloService for \" + bundle.getSymbolicName());\n        usageCounter--;\n        System.out.println(\"Number of bundles using service \" + usageCounter);\n    }\n}\n```\nServiceFactory接口定义了两个方法：\n \n`getService` 方法：特定的bundle在第一次调用BundleContext的getService方法时由OSGI框架调用，在实例代码中，我们用这个方法来返回一个新的HelloService的实现。OSGI框架会缓存这个返回的对象，如果同一个bundle在未来再次调用BundleContext的getService方法的话，会直接返回这个缓存中的对象。\n`ungetService` 方法：bundle释放service的时候由OSGI容器调用。\n2. 修改HelloServiceActivator.java的start方法，将ServiceFactory作为服务注册，代码如下：\n\n``` java\npublic class HelloServiceActivator implements BundleActivator {\n    ServiceRegistration helloServiceRegistration;\n    @Override\n    public void start(BundleContext context) throws Exception {\n        HelloServiceFactory helloServiceFactory = new HelloServiceFactory();\n        helloServiceRegistration = context.registerService(HelloService.class\n                .getName(), helloServiceFactory, null);\n    }\n\n    @Override\n    public void stop(BundleContext context) throws Exception {\n        helloServiceRegistration.unregister();\n    }\n}\n```\n现在运行下试试看，你会发现HelloWorld bundle启动时才会初始化HelloService，控制台会打印出\"Number of bundles using service 1\"，当HelloWorld bundle暂停时会打印出\"Number of bundles using service 0\"。\n### services跟踪\n某种情形下，我们可能需要在某个特殊的接口有新的服务注册或取消注册时通知消费端。这时我们可以使用ServiceTracker类。如下步骤所示：\n1. 在HelloWorld bundle里的MANIFEST.MF导入org.util.tracker包。\n2. 创建HelloServiceTracker类，代码如下：\n\n``` java\npublic class HelloServiceTracker extends ServiceTracker {\n    public HelloServiceTracker(BundleContext context) {\n        super(context, HelloService.class.getName(),null);\n    }\n    public Object addingService(ServiceReference reference) {\n        System.out.println(\"Inside HelloServiceTracker.addingService \" + reference.getBundle());\n        return super.addingService(reference);\n    }\n    public void removedService(ServiceReference reference, Object service) {\n        System.out.println(\"Inside HelloServiceTracker.removedService \" + reference.getBundle());\n        super.removedService(reference, service);\n    }\n}\n```\n\n我们在HelloServiceTracker的构造函数里将HelloService接口名传进去，ServiceTracker会跟踪实现这个接口的所有的注册services。ServiceTracker主要有两个重要方法：\n- `addingService`方法 ：bundle注册一个基于给定接口的service时调用。\n- `removeService`方法：bundle取消注册一个基于给定接口的service时调用。\n\n3. 修改Activator类，使用刚刚创建的HelloServiceTracker来获取service：\n\n``` java \npublic class Activator implements BundleActivator {\n    HelloServiceTracker helloServiceTracker;\n    public void start(BundleContext context) throws Exception {\n        System.out.println(\"Hello World!!\");\n        helloServiceTracker= new HelloServiceTracker(context);\n        helloServiceTracker.open();\n        HelloService helloService=(HelloService)helloServiceTracker.getService();\n        System.out.println(helloService.sayHello());\n    }\n    \n    public void stop(BundleContext context) throws Exception {\n        System.out.println(\"Goodbye World!!\");\n        helloServiceTracker.close();\n    }\n}\n```\n\n现在运行一下，可以发现只要HelloService bundle启动或是暂停都会导致HelloServiceTracker的对addingService或removedService方法的调用。\n \nServiceTracker不仅仅能跟踪Service的动向，它还能通过getService方法取得Service实例并返回。但是如果同一个接口下有多个service注册，这时返回哪个service呢？这时候就需要看service的等级哪个高了。这个等级是service注册时的property属性里的一项：SERVICE_RANKING。谁的SERVICE_RANKING高，就返回谁。\n如果有两个一样高的呢？这时再看这两个service谁的PID更低了\n\n\n[文章出处]\n{% blockquote longdick http://longdick.iteye.com/blog/457310 人人都会OSGI--实例讲解OSGI开发 %}\n{% endblockquote %}\n[参考资料]\n{% blockquote IBM-DeveloperWorks http://www.ibm.com/developerworks/cn/opensource/os-cn-osgi-spring/ 基于 OSGi 和 Spring 开发 Web 应用%}\n{% endblockquote %}","source":"_posts/OSGi开发中的一些认识和总结.md","raw":"title: \"OSGi开发中的一些认识和总结\"\ndate: 2015-08-25 22:40:41\nalias: \ntags: \n- OSGi\n- 语言学习\n- 笔记\ncategories: 总结与分享\n\n---\n## 前言\nOSGI(Open Services Gateway Initiative)，或者通俗点说JAVA动态模块系统，定义了一套模块应用开发的框架。OSGI容器实现方案如Knopflerfish, Equinox, and Apache Felix允许你把你的应用分成多个功能模块，这样通过依赖管理这些功能会更加方便。\n和Servlet和EJB规范类似，OSGI规范包含两大块：\n- 一个OSGI容器需要实现的服务集合；\n- 一种OSGI容器和应用之间通信的机制。\n\n开发OSGI平台意味着你需要使用OSGI API编写你的应用，然后将其部署到OSGI容器中。从开发者的视角来看，OSGI提供以下优势：\n \n1. 你可以动态地安装、卸载、启动、停止不同的应用模块，而不需要重启容器。\n2. 你的应用可以在同一时刻跑多个同一个模块的实例。\n3. OSGI在SOA领域提供成熟的解决方案，包括嵌入式，移动设备和富客户端应用等。\n \nOSGI容器被设计专门用来开发可分解为功能模块的复杂的Java应用。几乎所有企业应用服务提供商支持或计划支持OSGI。Spring框架同样支持OSGI，通过Spring DM（Spring Dynamic Modules for OSGI Service Platforms）项目，可以让我们在Spring上更方便的应用OSGI。\n从企业应用开发者的角度看，OSGI容器侵入性非常小，你可以方便地将其嵌入一个企业应用。举个例子来说，假设你在开发一个复杂的web应用。你希望将这个应用分解成多个功能模块。一个View层模块，一个Model层模块，一个DAO模块。使用嵌入式OSGI容器来跨依赖地管理这些模块可以让你随时更新你的DAO模块却不需要重启你的服务器。\n只要你的应用完全符合OSGI规范，它就可以在所有符合OSGI规范的容器内运行。现在，有三种流行的开源OSGI容器：\n \n- Equinox是OSGI Service Platform Release 4的一个实现。是Eclipse 模块化运行时的核心。\n- Knopflerfish另一个选择。\n- Apache Felix是Apache软件基金会赞助的一个OSGI容器\n \n在这篇文章里我们使用Equinox作为我们的OSGI容器。\n## 尝试开发一个Hello World bundle\n \n在OSGI的领域，发布的软件是以bundle的形式出现。bundle由java class类和资源文件组成，向设备所有者提供功能，同时可以为其他的bundles提供服务。Eclipse对开发bundles提供了强大的支持。Eclipse不仅仅提供创建bundles的功能，它还集成了Equinox这个OSGI容器，你可以在其上开发和调试OSGI组件。其实所有的Eclipse插件都是使用Eclipse规范代码写的OSGI bundle。接下来，你将可以学到如何使用Eclipse IDE开发一个Hello world osgi bundle。\n \n## 开始开发bundle\n \n我们一步步的开始： \n启动Eclipse，依次点 File --> New --> Project。\n选择Plug-in Project，next。\n输入Project Name项目名称，比如com.howard.sample.HelloWorld,Target Platform(目标平台)里的an OSGI framework，选择standard。\n剩下的保持默认，next。\n下个对话框也默认，next。\n然后选择Hello OSGI Bundle作为模版。Finish。\nEclipse会飞快的为你创建Hello world bundle的模版代码。主要包含两个文件：Activator.java和MANIFEST.MF。\n \nActivator.java的代码如下所示：\n\n``` java\nimport org.osgi.framework.BundleActivator;\nimport org.osgi.framework.BundleContext;\npublic class Activator implements BundleActivator {\n    public void start(BundleContext context) throws Exception {\n        System.out.println(\"Hello world\");\n    }\n    public void stop(BundleContext context) throws Exception {\n        System.out.println(\"Goodbye World\");\n    }\n}\n```\n如果你的bundle在启动和关闭的时候需要被通知，你可以考虑实现BundleActivator接口。以下是定义Activator的一些注意点：\n1. 你的Activator类需要一个公有的无参数构造函数。OSGI框架会通过类反射的方式来实例化一个Activator类。\n2. 容器启动bundle过程中负责调用你的Activator类的start方法。bundle可以在此初始化资源比如说初始化数据库连接。start方法需要一个参数，BundleContext对象。这个对象允许bundles以取得OSGI容器相关信息的方式和框架交互。如果某一个bundle有异常抛出，容器将对该bundle标记为stopped并不将其纳入service列表。\n3. 容器关闭的时候会调用你的Activator类方法stop(),你可以利用这个机会做一些清理的操作。\n\n## 关于MANIFEST.MF文件\n这个文件是你的bundle的部署描述文件。格式和Jar里的MANIFEST.MF是一样的。包含的不少名值对，就像如下：\n\n``` manifest\nManifest-Version: 1.0  \nBundle-ManifestVersion: 2  \nBundle-Name: HelloWorld Plug-in  \nBundle-SymbolicName: com.howard.sample.HelloWorld  \nBundle-Version: 1.0.0  \nBundle-Activator: com.howard.sample.helloworld.Activator  \nBundle-Vendor: HOWARD  \nBundle-RequiredExecutionEnvironment: JavaSE-1.6  \nImport-Package: org.osgi.framework;version=\"1.3.0\" \n```\n分别来看下：\n \n`Bundle-ManifestVersion`数值为2意味着本bundle支持OSGI规范第四版；如果是1那就是支持OSGI规范第三版。\n`Bundle-Name` 给bundle定义一个短名，方便人员阅读\n`Bundle-SymbolicName` 给bundle定义一个唯一的非局部名。方便分辨。\n`Bundle-Activator` 声明在start和stop事件发生时会被通知的监听类的名字。\n`Import-Package`  定义bundle的导入包。\n\nHello World bundle完成了，接下来我们运行一下。\n\n## 运行bundle\n1. 点击Run --> Run Configuration\n2. 在左边的OSGI Framework选项里右键 new ，创建一个新的OSGI Run Configuration\n名字随便取好了，我们取个OSGi hello world。\n3. 你会注意到中间的窗口里Workspace项目里有一子项 com.howard.sample.HelloWorld,将其勾选上，其他的不用管。这时的状态应该如下图。\n4. 点击Run按钮。在控制台你应该可以看见点东西了。那是叫做OSGI控制台的东东。随之而来的，还有一个\"Hello world\"。\n\n## OSGI控制台\nOSGI控制台是一个OSGI容器的命令行界面。你可以利用它做些诸如启动，关闭，安装bundles，更新和删除bundles等操作。现在，点击OSGI控制台所在的位置，回车，你就会发现可以输入命令了。这时的OSGI控制台应该如下图：\n\n\n\n下面列出一些常用的OSGI命令，你可以试着和OSGI容器交互。\n`ss` 显示已安装的bundles的状态信息，信息包括bundle ID，短名，状态等等。\n`start` 启动一个bundle\n`stop`  关闭一个bundle\n`update`  载入一个新的JAR文件更新一个bundle\n`install`  安装一个新的bundle到容器中\n`uninstall`  卸载一个已在容器中的bundle\n\n## 依赖管理\nOSGI规范允许你把你的应用分解成多个模块然后管理各个模块间的依赖关系。\n这需要通过bundle scope来完成。默认情况下，一个bundle内的class对其他bundle来说是不可见的。那么，如果要让一个bundle访问另一个bundle里的class要怎么做？解决的方案就是从源bundle导出包，然后在目标bundle里导入。\n接下来我们对此做一个例子。\n \n首先，我们需要先创建一个com.howard.sample.HelloService bundle,我们将通过它导出一个包。\n然后，我们在com.howard.sample.HelloWorld 这个bundle里导入包。\n\n### 导出包\n1. 创建名为com.howard.sample.HelloService的bundle，创建步骤和前面一样。\n2. 在这个bundle内，添加一个com.howard.sample.service.HelloService.java 接口，代码如下：\n\n``` java\npublic interface HelloService {  \n    public String sayHello();  \n}  \n```\n3. 创建一个com.howard.sample.service.impl.HelloServiceImpl.java类实现刚才的接口：\n\n``` java\npublic class HelloServiceImpl implements HelloService{  \n    public String sayHello() {  \n        System.out.println(\"Inside HelloServiceImple.sayHello()\");  \n        return \"Say Hello\";  \n    }  \n}  \n```\n4. 打开MANIFEST.MF,选择Runtime标签项，在Exported Packages选项栏，点击Add并且选择com.howard.sample.service这个包。然后MANIFEST.MF的代码应该如下：\n\n``` manifest\nManifest-Version: 1.0\nBundle-ManifestVersion: 2\nBundle-Name: HelloService Plug-in\nBundle-SymbolicName: com.howard.sample.HelloService\nBundle-Version: 1.0.0\nBundle-Activator: com.howard.sample.helloservice.Activator\nBundle-Vendor: HOWARD\nBundle-RequiredExecutionEnvironment: JavaSE-1.6\nImport-Package: org.osgi.framework;version=\"1.3.0\"\nExport-Package: com.howard.sample.service\n```\n你可以看到，MANIFEST.MF文件和刚才的HelloWorld的那份很类似。唯一的区别就是这个多了Export-Package这个标记，对应的值就是我们刚才选择的com.howard.sample.service。\nExport-Package标记告诉OSGI容器在com.howard.sample.service包内的classes可以被外部访问。\n注意，我们仅仅暴露了HelloService接口，而不是直接暴露HelloServiceImpl实现。\n### 导入包\n\n接下来我们要更新原来的HelloWorld bundle以导入com.howard.sample.service包。步骤如下：\n1. 进入HelloWorld bundle，打开MANIFEST.MF，进入Dependencies标签页，在Imported Packages里添加com.howard.sample.service。MANIFEST.MF文件应该如下所示：\n\n``` manifest\nManifest-Version: 1.0\nBundle-ManifestVersion: 2\nBundle-Name: HelloWorld Plug-in\nBundle-SymbolicName: com.howard.sample.HelloWorld\nBundle-Version: 1.0.0\nBundle-Activator: com.howard.sample.helloworld.Activator\nBundle-Vendor: HOWARD\nBundle-RequiredExecutionEnvironment: JavaSE-1.6\nImport-Package: com.howard.sample.service,\n org.osgi.framework;version=\"1.3.0\"\n ```\n 没错，Import-package标记的值也就是导入的包名之间是用逗号隔开的。在这里导入了两个包om.howard.sample.service和org.osgi.framework。后者是使用Activator类时必须导入的包。\n \n2. 接下来，打开HelloWorld项目下的Activator.java文件，这时候你会发现可以使用HelloService这个接口了。但还是不能使用HelloServiceImpl实现类。Eclipse会告诉你：Access restriction（访问禁止）。\n\n## Class级别可见域\n为什么OSGI容器可以做到让jar包中的一些classes可见而另一些又不可见呢。\n答案其实就是OSGI容器自定义了java class loader来有选择的加载类。OSGI容器为每一个bundle都创建了不同的class loader。因此，bundle可以访问的classes包括\n- `Boot classpath` ：所有的java基础类。\n- `Framework classpath` ：OSGI框架级别的classloader加载的类\n- `Bundle classpath` ：Bundle本身引用的关系紧密的JAR的路径\n- `Imported packages` ：就是在MANIFEST.MF里声明的导入包，一旦声明，在bundle内就可见了。]\n\nundle级别的可见域允许你可以随时放心的更改HelloServiceImpl实现类而不需要去担心依赖关系会被破坏。\n## OSGI服务\nOSGI框架是实现SOA的绝佳土壤。通过它可以实现bundles暴露服务接口给其他bundles消费而不需要让细节暴露。消费bundles甚至可以完全不知道提供服务的bundles。凭着可以良好的隐藏具体实现的能力，OSGI当之无愧是SOA的一种较完美的实现方案。\n \nOSGI中，提供服务的bundle在OSGI容器上将一个POJO注册成一个service。消费者bundle请求OSGI容器中基于某个特殊接口的注册service。一旦找到，消费者bundle就会绑定它，然后就可以调用service中的方法了。举个例子会更容易说明。\n\n### 导出services\n1. 确保com.howard.sample.HelloService里的MANIFEST.MF导入org.osgi.framework包\n2. 创建com.howard.sample.service.impl.HelloServiceActivator.java,代码如下：\n\n``` java\npublic class HelloServiceActivator implements BundleActivator {  \n    ServiceRegistration helloServiceRegistration;  \n    @Override  \n    public void start(BundleContext context) throws Exception {  \n        HelloService helloService = new HelloServiceImpl();  \n        helloServiceRegistration = context.registerService(HelloService.class  \n                .getName(), helloService, null);  \n    }  \n  \n    @Override  \n    public void stop(BundleContext context) throws Exception {  \n        helloServiceRegistration.unregister();  \n    }  \n  \n} \n```\n我们就是用BundleContext的registerService方法注册service的。这个方法需要三个参数。\n- service的接口名。如果service实现了多个接口，那样你需要传入一个包含所有接口名的String数组。在这里我们传入的是HelloService这个接口。\n- 真正的service实现。在例子中我们传了一个HelloServiceImpl实现。\n- service属性。这个参数可以在有多个service实现同一个接口的情况下，消费者用来区分真正感兴趣的service。\n\n3. 最后一步就是修改HelloService的MANIFEST.MF文件，将Bundle-Activator改成com.howard.sample.service.impl.HelloServiceActivator\n\n现在HelloService bundle已经随时准备将HelloServiceImpl服务发布了。OSGI容器启动HelloServie bundle的时候会让HelloServiceActivator运作，在那个时候将HelloServiceImpl注册到容器中，接下来就是创建消费者的问题了。\n\n### 导入service\n我们的消费者就是HelloWorld bundle，主要修改的就是其中的Activator.java,修改代码如下：\n\n``` java \npublic class Activator implements BundleActivator {  \nServiceReference helloServiceReference;  \n    public void start(BundleContext context) throws Exception {  \n        System.out.println(\"Hello World!!\");  \n        helloServiceReference=context.getServiceReference(HelloService.class.getName());  \n        HelloService helloService=(HelloService)context.getService(helloServiceReference);  \n        System.out.println(helloService.sayHello());  \n    }  \n    public void stop(BundleContext context) throws Exception {  \n        System.out.println(\"Goodbye World!!\");  \n        context.ungetService(helloServiceReference);  \n    }  \n}  \n```\n很简单的代码 。。\n\n在运行之前我们在Run-->Run Configurations对话框里，把HelloWorld和HelloService这两个bundle前面的钩都打上。然后运行时你会发现HelloServiceImpl.sayHello()方法已经被调用了。\n \n在OSGI控制台输入ss并回车，所有容器内的bundle状态一目了然。其中id为0的bundle是OSGI框架基础bundle，另两个就是HelloService和HelloWorld了，它俩的id是随机的，状态是ACTIVE也就是已启动状态。假设HelloService的id为7，HelloWorld为8。\n \n输入stop 8就可以暂停bundle的运行，容器内这个bundle还是存在的，只是状态变成了RESOLVED。再次启动使用start 8，然后就会看见HelloWorld bundle消费了HelloService的服务。\n\n### 创建服务工厂\n\n刚才例子所示，我们会在HelloService bundle启动时初始化并注册service。然后不管存不存在消费端，这个service都会存在，而且消费端取得的service 实例其实都是同一个。OK，某些servie是比较耗费资源的主，我们不希望它一直占用资源，最好是在真正用它的时候创建不用的时候销毁就最好了。\n \n解决如上问题的方案就是使用ServiceFactory接口的实现来代替原先service具体的实现到OSGI容器去注册。这样，以后只有当其他bundle请求该服务时，才会由ServiceFactory实现类来处理请求并返回一个新的service实例。\n \n实例步骤如下：\n1. 在HelloService bundle创建一个实现ServiceFactory接口的类HelloServiceFactory类，代码如下：\n\n``` java \npublic class HelloServiceFactory implements ServiceFactory {\n    private int usageCounter = 0;\n    @Override\n    public Object getService(Bundle bundle, ServiceRegistration registration) {\n        System.out.println(\"Create object of HelloService for \" + bundle.getSymbolicName());\n        usageCounter++;\n        System.out.println(\"Number of bundles using service \" + usageCounter);\n        HelloService helloService = new HelloServiceImpl();\n        return helloService;\n    }\n    @Override\n    public void ungetService(Bundle bundle, ServiceRegistration registration, Object service) {\n        System.out.println(\"Release object of HelloService for \" + bundle.getSymbolicName());\n        usageCounter--;\n        System.out.println(\"Number of bundles using service \" + usageCounter);\n    }\n}\n```\nServiceFactory接口定义了两个方法：\n \n`getService` 方法：特定的bundle在第一次调用BundleContext的getService方法时由OSGI框架调用，在实例代码中，我们用这个方法来返回一个新的HelloService的实现。OSGI框架会缓存这个返回的对象，如果同一个bundle在未来再次调用BundleContext的getService方法的话，会直接返回这个缓存中的对象。\n`ungetService` 方法：bundle释放service的时候由OSGI容器调用。\n2. 修改HelloServiceActivator.java的start方法，将ServiceFactory作为服务注册，代码如下：\n\n``` java\npublic class HelloServiceActivator implements BundleActivator {\n    ServiceRegistration helloServiceRegistration;\n    @Override\n    public void start(BundleContext context) throws Exception {\n        HelloServiceFactory helloServiceFactory = new HelloServiceFactory();\n        helloServiceRegistration = context.registerService(HelloService.class\n                .getName(), helloServiceFactory, null);\n    }\n\n    @Override\n    public void stop(BundleContext context) throws Exception {\n        helloServiceRegistration.unregister();\n    }\n}\n```\n现在运行下试试看，你会发现HelloWorld bundle启动时才会初始化HelloService，控制台会打印出\"Number of bundles using service 1\"，当HelloWorld bundle暂停时会打印出\"Number of bundles using service 0\"。\n### services跟踪\n某种情形下，我们可能需要在某个特殊的接口有新的服务注册或取消注册时通知消费端。这时我们可以使用ServiceTracker类。如下步骤所示：\n1. 在HelloWorld bundle里的MANIFEST.MF导入org.util.tracker包。\n2. 创建HelloServiceTracker类，代码如下：\n\n``` java\npublic class HelloServiceTracker extends ServiceTracker {\n    public HelloServiceTracker(BundleContext context) {\n        super(context, HelloService.class.getName(),null);\n    }\n    public Object addingService(ServiceReference reference) {\n        System.out.println(\"Inside HelloServiceTracker.addingService \" + reference.getBundle());\n        return super.addingService(reference);\n    }\n    public void removedService(ServiceReference reference, Object service) {\n        System.out.println(\"Inside HelloServiceTracker.removedService \" + reference.getBundle());\n        super.removedService(reference, service);\n    }\n}\n```\n\n我们在HelloServiceTracker的构造函数里将HelloService接口名传进去，ServiceTracker会跟踪实现这个接口的所有的注册services。ServiceTracker主要有两个重要方法：\n- `addingService`方法 ：bundle注册一个基于给定接口的service时调用。\n- `removeService`方法：bundle取消注册一个基于给定接口的service时调用。\n\n3. 修改Activator类，使用刚刚创建的HelloServiceTracker来获取service：\n\n``` java \npublic class Activator implements BundleActivator {\n    HelloServiceTracker helloServiceTracker;\n    public void start(BundleContext context) throws Exception {\n        System.out.println(\"Hello World!!\");\n        helloServiceTracker= new HelloServiceTracker(context);\n        helloServiceTracker.open();\n        HelloService helloService=(HelloService)helloServiceTracker.getService();\n        System.out.println(helloService.sayHello());\n    }\n    \n    public void stop(BundleContext context) throws Exception {\n        System.out.println(\"Goodbye World!!\");\n        helloServiceTracker.close();\n    }\n}\n```\n\n现在运行一下，可以发现只要HelloService bundle启动或是暂停都会导致HelloServiceTracker的对addingService或removedService方法的调用。\n \nServiceTracker不仅仅能跟踪Service的动向，它还能通过getService方法取得Service实例并返回。但是如果同一个接口下有多个service注册，这时返回哪个service呢？这时候就需要看service的等级哪个高了。这个等级是service注册时的property属性里的一项：SERVICE_RANKING。谁的SERVICE_RANKING高，就返回谁。\n如果有两个一样高的呢？这时再看这两个service谁的PID更低了\n\n\n[文章出处]\n{% blockquote longdick http://longdick.iteye.com/blog/457310 人人都会OSGI--实例讲解OSGI开发 %}\n{% endblockquote %}\n[参考资料]\n{% blockquote IBM-DeveloperWorks http://www.ibm.com/developerworks/cn/opensource/os-cn-osgi-spring/ 基于 OSGi 和 Spring 开发 Web 应用%}\n{% endblockquote %}","slug":"OSGi开发中的一些认识和总结","published":1,"updated":"2019-12-30T17:16:22.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq20000lqyvyocrhvycx","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>OSGI(Open Services Gateway Initiative)，或者通俗点说JAVA动态模块系统，定义了一套模块应用开发的框架。OSGI容器实现方案如Knopflerfish, Equinox, and Apache Felix允许你把你的应用分成多个功能模块，这样通过依赖管理这些功能会更加方便。<br>和Servlet和EJB规范类似，OSGI规范包含两大块：</p>\n<ul>\n<li>一个OSGI容器需要实现的服务集合；</li>\n<li>一种OSGI容器和应用之间通信的机制。</li>\n</ul>\n<p>开发OSGI平台意味着你需要使用OSGI API编写你的应用，然后将其部署到OSGI容器中。从开发者的视角来看，OSGI提供以下优势：</p>\n<ol>\n<li>你可以动态地安装、卸载、启动、停止不同的应用模块，而不需要重启容器。</li>\n<li>你的应用可以在同一时刻跑多个同一个模块的实例。</li>\n<li>OSGI在SOA领域提供成熟的解决方案，包括嵌入式，移动设备和富客户端应用等。</li>\n</ol>\n<p>OSGI容器被设计专门用来开发可分解为功能模块的复杂的Java应用。几乎所有企业应用服务提供商支持或计划支持OSGI。Spring框架同样支持OSGI，通过Spring DM（Spring Dynamic Modules for OSGI Service Platforms）项目，可以让我们在Spring上更方便的应用OSGI。<br>从企业应用开发者的角度看，OSGI容器侵入性非常小，你可以方便地将其嵌入一个企业应用。举个例子来说，假设你在开发一个复杂的web应用。你希望将这个应用分解成多个功能模块。一个View层模块，一个Model层模块，一个DAO模块。使用嵌入式OSGI容器来跨依赖地管理这些模块可以让你随时更新你的DAO模块却不需要重启你的服务器。<br>只要你的应用完全符合OSGI规范，它就可以在所有符合OSGI规范的容器内运行。现在，有三种流行的开源OSGI容器：</p>\n<ul>\n<li>Equinox是OSGI Service Platform Release 4的一个实现。是Eclipse 模块化运行时的核心。</li>\n<li>Knopflerfish另一个选择。</li>\n<li>Apache Felix是Apache软件基金会赞助的一个OSGI容器</li>\n</ul>\n<p>在这篇文章里我们使用Equinox作为我们的OSGI容器。</p>\n<h2 id=\"尝试开发一个Hello-World-bundle\"><a href=\"#尝试开发一个Hello-World-bundle\" class=\"headerlink\" title=\"尝试开发一个Hello World bundle\"></a>尝试开发一个Hello World bundle</h2><p>在OSGI的领域，发布的软件是以bundle的形式出现。bundle由java class类和资源文件组成，向设备所有者提供功能，同时可以为其他的bundles提供服务。Eclipse对开发bundles提供了强大的支持。Eclipse不仅仅提供创建bundles的功能，它还集成了Equinox这个OSGI容器，你可以在其上开发和调试OSGI组件。其实所有的Eclipse插件都是使用Eclipse规范代码写的OSGI bundle。接下来，你将可以学到如何使用Eclipse IDE开发一个Hello world osgi bundle。</p>\n<h2 id=\"开始开发bundle\"><a href=\"#开始开发bundle\" class=\"headerlink\" title=\"开始开发bundle\"></a>开始开发bundle</h2><p>我们一步步的开始：<br>启动Eclipse，依次点 File –&gt; New –&gt; Project。<br>选择Plug-in Project，next。<br>输入Project Name项目名称，比如com.howard.sample.HelloWorld,Target Platform(目标平台)里的an OSGI framework，选择standard。<br>剩下的保持默认，next。<br>下个对话框也默认，next。<br>然后选择Hello OSGI Bundle作为模版。Finish。<br>Eclipse会飞快的为你创建Hello world bundle的模版代码。主要包含两个文件：Activator.java和MANIFEST.MF。</p>\n<p>Activator.java的代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.osgi.framework.BundleActivator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.osgi.framework.BundleContext;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activator</span> <span class=\"keyword\">implements</span> <span class=\"title\">BundleActivator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello world\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Goodbye World\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你的bundle在启动和关闭的时候需要被通知，你可以考虑实现BundleActivator接口。以下是定义Activator的一些注意点：</p>\n<ol>\n<li>你的Activator类需要一个公有的无参数构造函数。OSGI框架会通过类反射的方式来实例化一个Activator类。</li>\n<li>容器启动bundle过程中负责调用你的Activator类的start方法。bundle可以在此初始化资源比如说初始化数据库连接。start方法需要一个参数，BundleContext对象。这个对象允许bundles以取得OSGI容器相关信息的方式和框架交互。如果某一个bundle有异常抛出，容器将对该bundle标记为stopped并不将其纳入service列表。</li>\n<li>容器关闭的时候会调用你的Activator类方法stop(),你可以利用这个机会做一些清理的操作。</li>\n</ol>\n<h2 id=\"关于MANIFEST-MF文件\"><a href=\"#关于MANIFEST-MF文件\" class=\"headerlink\" title=\"关于MANIFEST.MF文件\"></a>关于MANIFEST.MF文件</h2><p>这个文件是你的bundle的部署描述文件。格式和Jar里的MANIFEST.MF是一样的。包含的不少名值对，就像如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0  </span><br><span class=\"line\">Bundle-ManifestVersion: 2  </span><br><span class=\"line\">Bundle-Name: HelloWorld Plug-in  </span><br><span class=\"line\">Bundle-SymbolicName: com.howard.sample.HelloWorld  </span><br><span class=\"line\">Bundle-Version: 1.0.0  </span><br><span class=\"line\">Bundle-Activator: com.howard.sample.helloworld.Activator  </span><br><span class=\"line\">Bundle-Vendor: HOWARD  </span><br><span class=\"line\">Bundle-RequiredExecutionEnvironment: JavaSE-1.6  </span><br><span class=\"line\">Import-Package: org.osgi.framework;version=&quot;1.3.0&quot;</span><br></pre></td></tr></table></figure>\n<p>分别来看下：</p>\n<p><code>Bundle-ManifestVersion</code>数值为2意味着本bundle支持OSGI规范第四版；如果是1那就是支持OSGI规范第三版。<br><code>Bundle-Name</code> 给bundle定义一个短名，方便人员阅读<br><code>Bundle-SymbolicName</code> 给bundle定义一个唯一的非局部名。方便分辨。<br><code>Bundle-Activator</code> 声明在start和stop事件发生时会被通知的监听类的名字。<br><code>Import-Package</code>  定义bundle的导入包。</p>\n<p>Hello World bundle完成了，接下来我们运行一下。</p>\n<h2 id=\"运行bundle\"><a href=\"#运行bundle\" class=\"headerlink\" title=\"运行bundle\"></a>运行bundle</h2><ol>\n<li>点击Run –&gt; Run Configuration</li>\n<li>在左边的OSGI Framework选项里右键 new ，创建一个新的OSGI Run Configuration<br>名字随便取好了，我们取个OSGi hello world。</li>\n<li>你会注意到中间的窗口里Workspace项目里有一子项 com.howard.sample.HelloWorld,将其勾选上，其他的不用管。这时的状态应该如下图。</li>\n<li>点击Run按钮。在控制台你应该可以看见点东西了。那是叫做OSGI控制台的东东。随之而来的，还有一个”Hello world”。</li>\n</ol>\n<h2 id=\"OSGI控制台\"><a href=\"#OSGI控制台\" class=\"headerlink\" title=\"OSGI控制台\"></a>OSGI控制台</h2><p>OSGI控制台是一个OSGI容器的命令行界面。你可以利用它做些诸如启动，关闭，安装bundles，更新和删除bundles等操作。现在，点击OSGI控制台所在的位置，回车，你就会发现可以输入命令了。这时的OSGI控制台应该如下图：</p>\n<p>下面列出一些常用的OSGI命令，你可以试着和OSGI容器交互。<br><code>ss</code> 显示已安装的bundles的状态信息，信息包括bundle ID，短名，状态等等。<br><code>start</code> 启动一个bundle<br><code>stop</code>  关闭一个bundle<br><code>update</code>  载入一个新的JAR文件更新一个bundle<br><code>install</code>  安装一个新的bundle到容器中<br><code>uninstall</code>  卸载一个已在容器中的bundle</p>\n<h2 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h2><p>OSGI规范允许你把你的应用分解成多个模块然后管理各个模块间的依赖关系。<br>这需要通过bundle scope来完成。默认情况下，一个bundle内的class对其他bundle来说是不可见的。那么，如果要让一个bundle访问另一个bundle里的class要怎么做？解决的方案就是从源bundle导出包，然后在目标bundle里导入。<br>接下来我们对此做一个例子。</p>\n<p>首先，我们需要先创建一个com.howard.sample.HelloService bundle,我们将通过它导出一个包。<br>然后，我们在com.howard.sample.HelloWorld 这个bundle里导入包。</p>\n<h3 id=\"导出包\"><a href=\"#导出包\" class=\"headerlink\" title=\"导出包\"></a>导出包</h3><ol>\n<li>创建名为com.howard.sample.HelloService的bundle，创建步骤和前面一样。</li>\n<li>在这个bundle内，添加一个com.howard.sample.service.HelloService.java 接口，代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloService</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建一个com.howard.sample.service.impl.HelloServiceImpl.java类实现刚才的接口：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloService</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inside HelloServiceImple.sayHello()\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Say Hello\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>打开MANIFEST.MF,选择Runtime标签项，在Exported Packages选项栏，点击Add并且选择com.howard.sample.service这个包。然后MANIFEST.MF的代码应该如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Bundle-ManifestVersion: 2</span><br><span class=\"line\">Bundle-Name: HelloService Plug-in</span><br><span class=\"line\">Bundle-SymbolicName: com.howard.sample.HelloService</span><br><span class=\"line\">Bundle-Version: 1.0.0</span><br><span class=\"line\">Bundle-Activator: com.howard.sample.helloservice.Activator</span><br><span class=\"line\">Bundle-Vendor: HOWARD</span><br><span class=\"line\">Bundle-RequiredExecutionEnvironment: JavaSE-1.6</span><br><span class=\"line\">Import-Package: org.osgi.framework;version=&quot;1.3.0&quot;</span><br><span class=\"line\">Export-Package: com.howard.sample.service</span><br></pre></td></tr></table></figure>\n<p>你可以看到，MANIFEST.MF文件和刚才的HelloWorld的那份很类似。唯一的区别就是这个多了Export-Package这个标记，对应的值就是我们刚才选择的com.howard.sample.service。<br>Export-Package标记告诉OSGI容器在com.howard.sample.service包内的classes可以被外部访问。<br>注意，我们仅仅暴露了HelloService接口，而不是直接暴露HelloServiceImpl实现。</p>\n<h3 id=\"导入包\"><a href=\"#导入包\" class=\"headerlink\" title=\"导入包\"></a>导入包</h3><p>接下来我们要更新原来的HelloWorld bundle以导入com.howard.sample.service包。步骤如下：</p>\n<ol>\n<li>进入HelloWorld bundle，打开MANIFEST.MF，进入Dependencies标签页，在Imported Packages里添加com.howard.sample.service。MANIFEST.MF文件应该如下所示：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Bundle-ManifestVersion: 2</span><br><span class=\"line\">Bundle-Name: HelloWorld Plug-in</span><br><span class=\"line\">Bundle-SymbolicName: com.howard.sample.HelloWorld</span><br><span class=\"line\">Bundle-Version: 1.0.0</span><br><span class=\"line\">Bundle-Activator: com.howard.sample.helloworld.Activator</span><br><span class=\"line\">Bundle-Vendor: HOWARD</span><br><span class=\"line\">Bundle-RequiredExecutionEnvironment: JavaSE-1.6</span><br><span class=\"line\">Import-Package: com.howard.sample.service,</span><br><span class=\"line\"> org.osgi.framework;version=&quot;1.3.0&quot;</span><br></pre></td></tr></table></figure>\n<p> 没错，Import-package标记的值也就是导入的包名之间是用逗号隔开的。在这里导入了两个包om.howard.sample.service和org.osgi.framework。后者是使用Activator类时必须导入的包。</p>\n<ol start=\"2\">\n<li>接下来，打开HelloWorld项目下的Activator.java文件，这时候你会发现可以使用HelloService这个接口了。但还是不能使用HelloServiceImpl实现类。Eclipse会告诉你：Access restriction（访问禁止）。</li>\n</ol>\n<h2 id=\"Class级别可见域\"><a href=\"#Class级别可见域\" class=\"headerlink\" title=\"Class级别可见域\"></a>Class级别可见域</h2><p>为什么OSGI容器可以做到让jar包中的一些classes可见而另一些又不可见呢。<br>答案其实就是OSGI容器自定义了java class loader来有选择的加载类。OSGI容器为每一个bundle都创建了不同的class loader。因此，bundle可以访问的classes包括</p>\n<ul>\n<li><code>Boot classpath</code> ：所有的java基础类。</li>\n<li><code>Framework classpath</code> ：OSGI框架级别的classloader加载的类</li>\n<li><code>Bundle classpath</code> ：Bundle本身引用的关系紧密的JAR的路径</li>\n<li><code>Imported packages</code> ：就是在MANIFEST.MF里声明的导入包，一旦声明，在bundle内就可见了。]</li>\n</ul>\n<p>undle级别的可见域允许你可以随时放心的更改HelloServiceImpl实现类而不需要去担心依赖关系会被破坏。</p>\n<h2 id=\"OSGI服务\"><a href=\"#OSGI服务\" class=\"headerlink\" title=\"OSGI服务\"></a>OSGI服务</h2><p>OSGI框架是实现SOA的绝佳土壤。通过它可以实现bundles暴露服务接口给其他bundles消费而不需要让细节暴露。消费bundles甚至可以完全不知道提供服务的bundles。凭着可以良好的隐藏具体实现的能力，OSGI当之无愧是SOA的一种较完美的实现方案。</p>\n<p>OSGI中，提供服务的bundle在OSGI容器上将一个POJO注册成一个service。消费者bundle请求OSGI容器中基于某个特殊接口的注册service。一旦找到，消费者bundle就会绑定它，然后就可以调用service中的方法了。举个例子会更容易说明。</p>\n<h3 id=\"导出services\"><a href=\"#导出services\" class=\"headerlink\" title=\"导出services\"></a>导出services</h3><ol>\n<li>确保com.howard.sample.HelloService里的MANIFEST.MF导入org.osgi.framework包</li>\n<li>创建com.howard.sample.service.impl.HelloServiceActivator.java,代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceActivator</span> <span class=\"keyword\">implements</span> <span class=\"title\">BundleActivator</span> </span>&#123;  </span><br><span class=\"line\">    ServiceRegistration helloServiceRegistration;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </span><br><span class=\"line\">        HelloService helloService = <span class=\"keyword\">new</span> HelloServiceImpl();  </span><br><span class=\"line\">        helloServiceRegistration = context.registerService(HelloService<span class=\"class\">.<span class=\"keyword\">class</span>  </span></span><br><span class=\"line\"><span class=\"class\">                .<span class=\"title\">getName</span>(), <span class=\"title\">helloService</span>, <span class=\"title\">null</span>)</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </span><br><span class=\"line\">        helloServiceRegistration.unregister();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们就是用BundleContext的registerService方法注册service的。这个方法需要三个参数。</p>\n<ul>\n<li>service的接口名。如果service实现了多个接口，那样你需要传入一个包含所有接口名的String数组。在这里我们传入的是HelloService这个接口。</li>\n<li>真正的service实现。在例子中我们传了一个HelloServiceImpl实现。</li>\n<li>service属性。这个参数可以在有多个service实现同一个接口的情况下，消费者用来区分真正感兴趣的service。</li>\n</ul>\n<ol start=\"3\">\n<li>最后一步就是修改HelloService的MANIFEST.MF文件，将Bundle-Activator改成com.howard.sample.service.impl.HelloServiceActivator</li>\n</ol>\n<p>现在HelloService bundle已经随时准备将HelloServiceImpl服务发布了。OSGI容器启动HelloServie bundle的时候会让HelloServiceActivator运作，在那个时候将HelloServiceImpl注册到容器中，接下来就是创建消费者的问题了。</p>\n<h3 id=\"导入service\"><a href=\"#导入service\" class=\"headerlink\" title=\"导入service\"></a>导入service</h3><p>我们的消费者就是HelloWorld bundle，主要修改的就是其中的Activator.java,修改代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activator</span> <span class=\"keyword\">implements</span> <span class=\"title\">BundleActivator</span> </span>&#123;  </span><br><span class=\"line\">ServiceReference helloServiceReference;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!!\"</span>);  </span><br><span class=\"line\">        helloServiceReference=context.getServiceReference(HelloService<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>())</span>;  </span><br><span class=\"line\">        HelloService helloService=(HelloService)context.getService(helloServiceReference);  </span><br><span class=\"line\">        System.out.println(helloService.sayHello());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Goodbye World!!\"</span>);  </span><br><span class=\"line\">        context.ungetService(helloServiceReference);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单的代码 。。</p>\n<p>在运行之前我们在Run–&gt;Run Configurations对话框里，把HelloWorld和HelloService这两个bundle前面的钩都打上。然后运行时你会发现HelloServiceImpl.sayHello()方法已经被调用了。</p>\n<p>在OSGI控制台输入ss并回车，所有容器内的bundle状态一目了然。其中id为0的bundle是OSGI框架基础bundle，另两个就是HelloService和HelloWorld了，它俩的id是随机的，状态是ACTIVE也就是已启动状态。假设HelloService的id为7，HelloWorld为8。</p>\n<p>输入stop 8就可以暂停bundle的运行，容器内这个bundle还是存在的，只是状态变成了RESOLVED。再次启动使用start 8，然后就会看见HelloWorld bundle消费了HelloService的服务。</p>\n<h3 id=\"创建服务工厂\"><a href=\"#创建服务工厂\" class=\"headerlink\" title=\"创建服务工厂\"></a>创建服务工厂</h3><p>刚才例子所示，我们会在HelloService bundle启动时初始化并注册service。然后不管存不存在消费端，这个service都会存在，而且消费端取得的service 实例其实都是同一个。OK，某些servie是比较耗费资源的主，我们不希望它一直占用资源，最好是在真正用它的时候创建不用的时候销毁就最好了。</p>\n<p>解决如上问题的方案就是使用ServiceFactory接口的实现来代替原先service具体的实现到OSGI容器去注册。这样，以后只有当其他bundle请求该服务时，才会由ServiceFactory实现类来处理请求并返回一个新的service实例。</p>\n<p>实例步骤如下：</p>\n<ol>\n<li>在HelloService bundle创建一个实现ServiceFactory接口的类HelloServiceFactory类，代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServiceFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> usageCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getService</span><span class=\"params\">(Bundle bundle, ServiceRegistration registration)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Create object of HelloService for \"</span> + bundle.getSymbolicName());</span><br><span class=\"line\">        usageCounter++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Number of bundles using service \"</span> + usageCounter);</span><br><span class=\"line\">        HelloService helloService = <span class=\"keyword\">new</span> HelloServiceImpl();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ungetService</span><span class=\"params\">(Bundle bundle, ServiceRegistration registration, Object service)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Release object of HelloService for \"</span> + bundle.getSymbolicName());</span><br><span class=\"line\">        usageCounter--;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Number of bundles using service \"</span> + usageCounter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ServiceFactory接口定义了两个方法：</p>\n<p><code>getService</code> 方法：特定的bundle在第一次调用BundleContext的getService方法时由OSGI框架调用，在实例代码中，我们用这个方法来返回一个新的HelloService的实现。OSGI框架会缓存这个返回的对象，如果同一个bundle在未来再次调用BundleContext的getService方法的话，会直接返回这个缓存中的对象。<br><code>ungetService</code> 方法：bundle释放service的时候由OSGI容器调用。</p>\n<ol start=\"2\">\n<li>修改HelloServiceActivator.java的start方法，将ServiceFactory作为服务注册，代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceActivator</span> <span class=\"keyword\">implements</span> <span class=\"title\">BundleActivator</span> </span>&#123;</span><br><span class=\"line\">    ServiceRegistration helloServiceRegistration;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HelloServiceFactory helloServiceFactory = <span class=\"keyword\">new</span> HelloServiceFactory();</span><br><span class=\"line\">        helloServiceRegistration = context.registerService(HelloService<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                .<span class=\"title\">getName</span>(), <span class=\"title\">helloServiceFactory</span>, <span class=\"title\">null</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        helloServiceRegistration.unregister();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在运行下试试看，你会发现HelloWorld bundle启动时才会初始化HelloService，控制台会打印出”Number of bundles using service 1”，当HelloWorld bundle暂停时会打印出”Number of bundles using service 0”。</p>\n<h3 id=\"services跟踪\"><a href=\"#services跟踪\" class=\"headerlink\" title=\"services跟踪\"></a>services跟踪</h3><p>某种情形下，我们可能需要在某个特殊的接口有新的服务注册或取消注册时通知消费端。这时我们可以使用ServiceTracker类。如下步骤所示：</p>\n<ol>\n<li>在HelloWorld bundle里的MANIFEST.MF导入org.util.tracker包。</li>\n<li>创建HelloServiceTracker类，代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceTracker</span> <span class=\"keyword\">extends</span> <span class=\"title\">ServiceTracker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloServiceTracker</span><span class=\"params\">(BundleContext context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, HelloService<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>(),<span class=\"title\">null</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">addingService</span><span class=\"params\">(ServiceReference reference)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inside HelloServiceTracker.addingService \"</span> + reference.getBundle());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.addingService(reference);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removedService</span><span class=\"params\">(ServiceReference reference, Object service)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inside HelloServiceTracker.removedService \"</span> + reference.getBundle());</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.removedService(reference, service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在HelloServiceTracker的构造函数里将HelloService接口名传进去，ServiceTracker会跟踪实现这个接口的所有的注册services。ServiceTracker主要有两个重要方法：</p>\n<ul>\n<li><code>addingService</code>方法 ：bundle注册一个基于给定接口的service时调用。</li>\n<li><code>removeService</code>方法：bundle取消注册一个基于给定接口的service时调用。</li>\n</ul>\n<ol start=\"3\">\n<li>修改Activator类，使用刚刚创建的HelloServiceTracker来获取service：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activator</span> <span class=\"keyword\">implements</span> <span class=\"title\">BundleActivator</span> </span>&#123;</span><br><span class=\"line\">    HelloServiceTracker helloServiceTracker;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!!\"</span>);</span><br><span class=\"line\">        helloServiceTracker= <span class=\"keyword\">new</span> HelloServiceTracker(context);</span><br><span class=\"line\">        helloServiceTracker.open();</span><br><span class=\"line\">        HelloService helloService=(HelloService)helloServiceTracker.getService();</span><br><span class=\"line\">        System.out.println(helloService.sayHello());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Goodbye World!!\"</span>);</span><br><span class=\"line\">        helloServiceTracker.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在运行一下，可以发现只要HelloService bundle启动或是暂停都会导致HelloServiceTracker的对addingService或removedService方法的调用。</p>\n<p>ServiceTracker不仅仅能跟踪Service的动向，它还能通过getService方法取得Service实例并返回。但是如果同一个接口下有多个service注册，这时返回哪个service呢？这时候就需要看service的等级哪个高了。这个等级是service注册时的property属性里的一项：SERVICE_RANKING。谁的SERVICE_RANKING高，就返回谁。<br>如果有两个一样高的呢？这时再看这两个service谁的PID更低了</p>\n<p>[文章出处]<br><blockquote><footer><strong>longdick</strong><cite><a href=\"http://longdick.iteye.com/blog/457310\" target=\"_blank\" rel=\"noopener\">人人都会OSGI--实例讲解OSGI开发</a></cite></footer></blockquote><br>[参考资料]<br><blockquote><footer><strong>IBM-DeveloperWorks</strong><cite><a href=\"http://www.ibm.com/developerworks/cn/opensource/os-cn-osgi-spring/\" target=\"_blank\" rel=\"noopener\">基于 OSGi 和 Spring 开发 Web 应用</a></cite></footer></blockquote></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>OSGI(Open Services Gateway Initiative)，或者通俗点说JAVA动态模块系统，定义了一套模块应用开发的框架。OSGI容器实现方案如Knopflerfish, Equinox, and Apache Felix允许你把你的应用分成多个功能模块，这样通过依赖管理这些功能会更加方便。<br>和Servlet和EJB规范类似，OSGI规范包含两大块：</p>\n<ul>\n<li>一个OSGI容器需要实现的服务集合；</li>\n<li>一种OSGI容器和应用之间通信的机制。</li>\n</ul>\n<p>开发OSGI平台意味着你需要使用OSGI API编写你的应用，然后将其部署到OSGI容器中。从开发者的视角来看，OSGI提供以下优势：</p>\n<ol>\n<li>你可以动态地安装、卸载、启动、停止不同的应用模块，而不需要重启容器。</li>\n<li>你的应用可以在同一时刻跑多个同一个模块的实例。</li>\n<li>OSGI在SOA领域提供成熟的解决方案，包括嵌入式，移动设备和富客户端应用等。</li>\n</ol>\n<p>OSGI容器被设计专门用来开发可分解为功能模块的复杂的Java应用。几乎所有企业应用服务提供商支持或计划支持OSGI。Spring框架同样支持OSGI，通过Spring DM（Spring Dynamic Modules for OSGI Service Platforms）项目，可以让我们在Spring上更方便的应用OSGI。<br>从企业应用开发者的角度看，OSGI容器侵入性非常小，你可以方便地将其嵌入一个企业应用。举个例子来说，假设你在开发一个复杂的web应用。你希望将这个应用分解成多个功能模块。一个View层模块，一个Model层模块，一个DAO模块。使用嵌入式OSGI容器来跨依赖地管理这些模块可以让你随时更新你的DAO模块却不需要重启你的服务器。<br>只要你的应用完全符合OSGI规范，它就可以在所有符合OSGI规范的容器内运行。现在，有三种流行的开源OSGI容器：</p>\n<ul>\n<li>Equinox是OSGI Service Platform Release 4的一个实现。是Eclipse 模块化运行时的核心。</li>\n<li>Knopflerfish另一个选择。</li>\n<li>Apache Felix是Apache软件基金会赞助的一个OSGI容器</li>\n</ul>\n<p>在这篇文章里我们使用Equinox作为我们的OSGI容器。</p>\n<h2 id=\"尝试开发一个Hello-World-bundle\"><a href=\"#尝试开发一个Hello-World-bundle\" class=\"headerlink\" title=\"尝试开发一个Hello World bundle\"></a>尝试开发一个Hello World bundle</h2><p>在OSGI的领域，发布的软件是以bundle的形式出现。bundle由java class类和资源文件组成，向设备所有者提供功能，同时可以为其他的bundles提供服务。Eclipse对开发bundles提供了强大的支持。Eclipse不仅仅提供创建bundles的功能，它还集成了Equinox这个OSGI容器，你可以在其上开发和调试OSGI组件。其实所有的Eclipse插件都是使用Eclipse规范代码写的OSGI bundle。接下来，你将可以学到如何使用Eclipse IDE开发一个Hello world osgi bundle。</p>\n<h2 id=\"开始开发bundle\"><a href=\"#开始开发bundle\" class=\"headerlink\" title=\"开始开发bundle\"></a>开始开发bundle</h2><p>我们一步步的开始：<br>启动Eclipse，依次点 File –&gt; New –&gt; Project。<br>选择Plug-in Project，next。<br>输入Project Name项目名称，比如com.howard.sample.HelloWorld,Target Platform(目标平台)里的an OSGI framework，选择standard。<br>剩下的保持默认，next。<br>下个对话框也默认，next。<br>然后选择Hello OSGI Bundle作为模版。Finish。<br>Eclipse会飞快的为你创建Hello world bundle的模版代码。主要包含两个文件：Activator.java和MANIFEST.MF。</p>\n<p>Activator.java的代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.osgi.framework.BundleActivator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.osgi.framework.BundleContext;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activator</span> <span class=\"keyword\">implements</span> <span class=\"title\">BundleActivator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello world\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Goodbye World\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你的bundle在启动和关闭的时候需要被通知，你可以考虑实现BundleActivator接口。以下是定义Activator的一些注意点：</p>\n<ol>\n<li>你的Activator类需要一个公有的无参数构造函数。OSGI框架会通过类反射的方式来实例化一个Activator类。</li>\n<li>容器启动bundle过程中负责调用你的Activator类的start方法。bundle可以在此初始化资源比如说初始化数据库连接。start方法需要一个参数，BundleContext对象。这个对象允许bundles以取得OSGI容器相关信息的方式和框架交互。如果某一个bundle有异常抛出，容器将对该bundle标记为stopped并不将其纳入service列表。</li>\n<li>容器关闭的时候会调用你的Activator类方法stop(),你可以利用这个机会做一些清理的操作。</li>\n</ol>\n<h2 id=\"关于MANIFEST-MF文件\"><a href=\"#关于MANIFEST-MF文件\" class=\"headerlink\" title=\"关于MANIFEST.MF文件\"></a>关于MANIFEST.MF文件</h2><p>这个文件是你的bundle的部署描述文件。格式和Jar里的MANIFEST.MF是一样的。包含的不少名值对，就像如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0  </span><br><span class=\"line\">Bundle-ManifestVersion: 2  </span><br><span class=\"line\">Bundle-Name: HelloWorld Plug-in  </span><br><span class=\"line\">Bundle-SymbolicName: com.howard.sample.HelloWorld  </span><br><span class=\"line\">Bundle-Version: 1.0.0  </span><br><span class=\"line\">Bundle-Activator: com.howard.sample.helloworld.Activator  </span><br><span class=\"line\">Bundle-Vendor: HOWARD  </span><br><span class=\"line\">Bundle-RequiredExecutionEnvironment: JavaSE-1.6  </span><br><span class=\"line\">Import-Package: org.osgi.framework;version=&quot;1.3.0&quot;</span><br></pre></td></tr></table></figure>\n<p>分别来看下：</p>\n<p><code>Bundle-ManifestVersion</code>数值为2意味着本bundle支持OSGI规范第四版；如果是1那就是支持OSGI规范第三版。<br><code>Bundle-Name</code> 给bundle定义一个短名，方便人员阅读<br><code>Bundle-SymbolicName</code> 给bundle定义一个唯一的非局部名。方便分辨。<br><code>Bundle-Activator</code> 声明在start和stop事件发生时会被通知的监听类的名字。<br><code>Import-Package</code>  定义bundle的导入包。</p>\n<p>Hello World bundle完成了，接下来我们运行一下。</p>\n<h2 id=\"运行bundle\"><a href=\"#运行bundle\" class=\"headerlink\" title=\"运行bundle\"></a>运行bundle</h2><ol>\n<li>点击Run –&gt; Run Configuration</li>\n<li>在左边的OSGI Framework选项里右键 new ，创建一个新的OSGI Run Configuration<br>名字随便取好了，我们取个OSGi hello world。</li>\n<li>你会注意到中间的窗口里Workspace项目里有一子项 com.howard.sample.HelloWorld,将其勾选上，其他的不用管。这时的状态应该如下图。</li>\n<li>点击Run按钮。在控制台你应该可以看见点东西了。那是叫做OSGI控制台的东东。随之而来的，还有一个”Hello world”。</li>\n</ol>\n<h2 id=\"OSGI控制台\"><a href=\"#OSGI控制台\" class=\"headerlink\" title=\"OSGI控制台\"></a>OSGI控制台</h2><p>OSGI控制台是一个OSGI容器的命令行界面。你可以利用它做些诸如启动，关闭，安装bundles，更新和删除bundles等操作。现在，点击OSGI控制台所在的位置，回车，你就会发现可以输入命令了。这时的OSGI控制台应该如下图：</p>\n<p>下面列出一些常用的OSGI命令，你可以试着和OSGI容器交互。<br><code>ss</code> 显示已安装的bundles的状态信息，信息包括bundle ID，短名，状态等等。<br><code>start</code> 启动一个bundle<br><code>stop</code>  关闭一个bundle<br><code>update</code>  载入一个新的JAR文件更新一个bundle<br><code>install</code>  安装一个新的bundle到容器中<br><code>uninstall</code>  卸载一个已在容器中的bundle</p>\n<h2 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h2><p>OSGI规范允许你把你的应用分解成多个模块然后管理各个模块间的依赖关系。<br>这需要通过bundle scope来完成。默认情况下，一个bundle内的class对其他bundle来说是不可见的。那么，如果要让一个bundle访问另一个bundle里的class要怎么做？解决的方案就是从源bundle导出包，然后在目标bundle里导入。<br>接下来我们对此做一个例子。</p>\n<p>首先，我们需要先创建一个com.howard.sample.HelloService bundle,我们将通过它导出一个包。<br>然后，我们在com.howard.sample.HelloWorld 这个bundle里导入包。</p>\n<h3 id=\"导出包\"><a href=\"#导出包\" class=\"headerlink\" title=\"导出包\"></a>导出包</h3><ol>\n<li>创建名为com.howard.sample.HelloService的bundle，创建步骤和前面一样。</li>\n<li>在这个bundle内，添加一个com.howard.sample.service.HelloService.java 接口，代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloService</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建一个com.howard.sample.service.impl.HelloServiceImpl.java类实现刚才的接口：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloService</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inside HelloServiceImple.sayHello()\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Say Hello\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>打开MANIFEST.MF,选择Runtime标签项，在Exported Packages选项栏，点击Add并且选择com.howard.sample.service这个包。然后MANIFEST.MF的代码应该如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Bundle-ManifestVersion: 2</span><br><span class=\"line\">Bundle-Name: HelloService Plug-in</span><br><span class=\"line\">Bundle-SymbolicName: com.howard.sample.HelloService</span><br><span class=\"line\">Bundle-Version: 1.0.0</span><br><span class=\"line\">Bundle-Activator: com.howard.sample.helloservice.Activator</span><br><span class=\"line\">Bundle-Vendor: HOWARD</span><br><span class=\"line\">Bundle-RequiredExecutionEnvironment: JavaSE-1.6</span><br><span class=\"line\">Import-Package: org.osgi.framework;version=&quot;1.3.0&quot;</span><br><span class=\"line\">Export-Package: com.howard.sample.service</span><br></pre></td></tr></table></figure>\n<p>你可以看到，MANIFEST.MF文件和刚才的HelloWorld的那份很类似。唯一的区别就是这个多了Export-Package这个标记，对应的值就是我们刚才选择的com.howard.sample.service。<br>Export-Package标记告诉OSGI容器在com.howard.sample.service包内的classes可以被外部访问。<br>注意，我们仅仅暴露了HelloService接口，而不是直接暴露HelloServiceImpl实现。</p>\n<h3 id=\"导入包\"><a href=\"#导入包\" class=\"headerlink\" title=\"导入包\"></a>导入包</h3><p>接下来我们要更新原来的HelloWorld bundle以导入com.howard.sample.service包。步骤如下：</p>\n<ol>\n<li>进入HelloWorld bundle，打开MANIFEST.MF，进入Dependencies标签页，在Imported Packages里添加com.howard.sample.service。MANIFEST.MF文件应该如下所示：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Bundle-ManifestVersion: 2</span><br><span class=\"line\">Bundle-Name: HelloWorld Plug-in</span><br><span class=\"line\">Bundle-SymbolicName: com.howard.sample.HelloWorld</span><br><span class=\"line\">Bundle-Version: 1.0.0</span><br><span class=\"line\">Bundle-Activator: com.howard.sample.helloworld.Activator</span><br><span class=\"line\">Bundle-Vendor: HOWARD</span><br><span class=\"line\">Bundle-RequiredExecutionEnvironment: JavaSE-1.6</span><br><span class=\"line\">Import-Package: com.howard.sample.service,</span><br><span class=\"line\"> org.osgi.framework;version=&quot;1.3.0&quot;</span><br></pre></td></tr></table></figure>\n<p> 没错，Import-package标记的值也就是导入的包名之间是用逗号隔开的。在这里导入了两个包om.howard.sample.service和org.osgi.framework。后者是使用Activator类时必须导入的包。</p>\n<ol start=\"2\">\n<li>接下来，打开HelloWorld项目下的Activator.java文件，这时候你会发现可以使用HelloService这个接口了。但还是不能使用HelloServiceImpl实现类。Eclipse会告诉你：Access restriction（访问禁止）。</li>\n</ol>\n<h2 id=\"Class级别可见域\"><a href=\"#Class级别可见域\" class=\"headerlink\" title=\"Class级别可见域\"></a>Class级别可见域</h2><p>为什么OSGI容器可以做到让jar包中的一些classes可见而另一些又不可见呢。<br>答案其实就是OSGI容器自定义了java class loader来有选择的加载类。OSGI容器为每一个bundle都创建了不同的class loader。因此，bundle可以访问的classes包括</p>\n<ul>\n<li><code>Boot classpath</code> ：所有的java基础类。</li>\n<li><code>Framework classpath</code> ：OSGI框架级别的classloader加载的类</li>\n<li><code>Bundle classpath</code> ：Bundle本身引用的关系紧密的JAR的路径</li>\n<li><code>Imported packages</code> ：就是在MANIFEST.MF里声明的导入包，一旦声明，在bundle内就可见了。]</li>\n</ul>\n<p>undle级别的可见域允许你可以随时放心的更改HelloServiceImpl实现类而不需要去担心依赖关系会被破坏。</p>\n<h2 id=\"OSGI服务\"><a href=\"#OSGI服务\" class=\"headerlink\" title=\"OSGI服务\"></a>OSGI服务</h2><p>OSGI框架是实现SOA的绝佳土壤。通过它可以实现bundles暴露服务接口给其他bundles消费而不需要让细节暴露。消费bundles甚至可以完全不知道提供服务的bundles。凭着可以良好的隐藏具体实现的能力，OSGI当之无愧是SOA的一种较完美的实现方案。</p>\n<p>OSGI中，提供服务的bundle在OSGI容器上将一个POJO注册成一个service。消费者bundle请求OSGI容器中基于某个特殊接口的注册service。一旦找到，消费者bundle就会绑定它，然后就可以调用service中的方法了。举个例子会更容易说明。</p>\n<h3 id=\"导出services\"><a href=\"#导出services\" class=\"headerlink\" title=\"导出services\"></a>导出services</h3><ol>\n<li>确保com.howard.sample.HelloService里的MANIFEST.MF导入org.osgi.framework包</li>\n<li>创建com.howard.sample.service.impl.HelloServiceActivator.java,代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceActivator</span> <span class=\"keyword\">implements</span> <span class=\"title\">BundleActivator</span> </span>&#123;  </span><br><span class=\"line\">    ServiceRegistration helloServiceRegistration;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </span><br><span class=\"line\">        HelloService helloService = <span class=\"keyword\">new</span> HelloServiceImpl();  </span><br><span class=\"line\">        helloServiceRegistration = context.registerService(HelloService<span class=\"class\">.<span class=\"keyword\">class</span>  </span></span><br><span class=\"line\"><span class=\"class\">                .<span class=\"title\">getName</span>(), <span class=\"title\">helloService</span>, <span class=\"title\">null</span>)</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </span><br><span class=\"line\">        helloServiceRegistration.unregister();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们就是用BundleContext的registerService方法注册service的。这个方法需要三个参数。</p>\n<ul>\n<li>service的接口名。如果service实现了多个接口，那样你需要传入一个包含所有接口名的String数组。在这里我们传入的是HelloService这个接口。</li>\n<li>真正的service实现。在例子中我们传了一个HelloServiceImpl实现。</li>\n<li>service属性。这个参数可以在有多个service实现同一个接口的情况下，消费者用来区分真正感兴趣的service。</li>\n</ul>\n<ol start=\"3\">\n<li>最后一步就是修改HelloService的MANIFEST.MF文件，将Bundle-Activator改成com.howard.sample.service.impl.HelloServiceActivator</li>\n</ol>\n<p>现在HelloService bundle已经随时准备将HelloServiceImpl服务发布了。OSGI容器启动HelloServie bundle的时候会让HelloServiceActivator运作，在那个时候将HelloServiceImpl注册到容器中，接下来就是创建消费者的问题了。</p>\n<h3 id=\"导入service\"><a href=\"#导入service\" class=\"headerlink\" title=\"导入service\"></a>导入service</h3><p>我们的消费者就是HelloWorld bundle，主要修改的就是其中的Activator.java,修改代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activator</span> <span class=\"keyword\">implements</span> <span class=\"title\">BundleActivator</span> </span>&#123;  </span><br><span class=\"line\">ServiceReference helloServiceReference;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!!\"</span>);  </span><br><span class=\"line\">        helloServiceReference=context.getServiceReference(HelloService<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>())</span>;  </span><br><span class=\"line\">        HelloService helloService=(HelloService)context.getService(helloServiceReference);  </span><br><span class=\"line\">        System.out.println(helloService.sayHello());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Goodbye World!!\"</span>);  </span><br><span class=\"line\">        context.ungetService(helloServiceReference);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单的代码 。。</p>\n<p>在运行之前我们在Run–&gt;Run Configurations对话框里，把HelloWorld和HelloService这两个bundle前面的钩都打上。然后运行时你会发现HelloServiceImpl.sayHello()方法已经被调用了。</p>\n<p>在OSGI控制台输入ss并回车，所有容器内的bundle状态一目了然。其中id为0的bundle是OSGI框架基础bundle，另两个就是HelloService和HelloWorld了，它俩的id是随机的，状态是ACTIVE也就是已启动状态。假设HelloService的id为7，HelloWorld为8。</p>\n<p>输入stop 8就可以暂停bundle的运行，容器内这个bundle还是存在的，只是状态变成了RESOLVED。再次启动使用start 8，然后就会看见HelloWorld bundle消费了HelloService的服务。</p>\n<h3 id=\"创建服务工厂\"><a href=\"#创建服务工厂\" class=\"headerlink\" title=\"创建服务工厂\"></a>创建服务工厂</h3><p>刚才例子所示，我们会在HelloService bundle启动时初始化并注册service。然后不管存不存在消费端，这个service都会存在，而且消费端取得的service 实例其实都是同一个。OK，某些servie是比较耗费资源的主，我们不希望它一直占用资源，最好是在真正用它的时候创建不用的时候销毁就最好了。</p>\n<p>解决如上问题的方案就是使用ServiceFactory接口的实现来代替原先service具体的实现到OSGI容器去注册。这样，以后只有当其他bundle请求该服务时，才会由ServiceFactory实现类来处理请求并返回一个新的service实例。</p>\n<p>实例步骤如下：</p>\n<ol>\n<li>在HelloService bundle创建一个实现ServiceFactory接口的类HelloServiceFactory类，代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServiceFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> usageCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getService</span><span class=\"params\">(Bundle bundle, ServiceRegistration registration)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Create object of HelloService for \"</span> + bundle.getSymbolicName());</span><br><span class=\"line\">        usageCounter++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Number of bundles using service \"</span> + usageCounter);</span><br><span class=\"line\">        HelloService helloService = <span class=\"keyword\">new</span> HelloServiceImpl();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ungetService</span><span class=\"params\">(Bundle bundle, ServiceRegistration registration, Object service)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Release object of HelloService for \"</span> + bundle.getSymbolicName());</span><br><span class=\"line\">        usageCounter--;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Number of bundles using service \"</span> + usageCounter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ServiceFactory接口定义了两个方法：</p>\n<p><code>getService</code> 方法：特定的bundle在第一次调用BundleContext的getService方法时由OSGI框架调用，在实例代码中，我们用这个方法来返回一个新的HelloService的实现。OSGI框架会缓存这个返回的对象，如果同一个bundle在未来再次调用BundleContext的getService方法的话，会直接返回这个缓存中的对象。<br><code>ungetService</code> 方法：bundle释放service的时候由OSGI容器调用。</p>\n<ol start=\"2\">\n<li>修改HelloServiceActivator.java的start方法，将ServiceFactory作为服务注册，代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceActivator</span> <span class=\"keyword\">implements</span> <span class=\"title\">BundleActivator</span> </span>&#123;</span><br><span class=\"line\">    ServiceRegistration helloServiceRegistration;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HelloServiceFactory helloServiceFactory = <span class=\"keyword\">new</span> HelloServiceFactory();</span><br><span class=\"line\">        helloServiceRegistration = context.registerService(HelloService<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                .<span class=\"title\">getName</span>(), <span class=\"title\">helloServiceFactory</span>, <span class=\"title\">null</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        helloServiceRegistration.unregister();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在运行下试试看，你会发现HelloWorld bundle启动时才会初始化HelloService，控制台会打印出”Number of bundles using service 1”，当HelloWorld bundle暂停时会打印出”Number of bundles using service 0”。</p>\n<h3 id=\"services跟踪\"><a href=\"#services跟踪\" class=\"headerlink\" title=\"services跟踪\"></a>services跟踪</h3><p>某种情形下，我们可能需要在某个特殊的接口有新的服务注册或取消注册时通知消费端。这时我们可以使用ServiceTracker类。如下步骤所示：</p>\n<ol>\n<li>在HelloWorld bundle里的MANIFEST.MF导入org.util.tracker包。</li>\n<li>创建HelloServiceTracker类，代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceTracker</span> <span class=\"keyword\">extends</span> <span class=\"title\">ServiceTracker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloServiceTracker</span><span class=\"params\">(BundleContext context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, HelloService<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>(),<span class=\"title\">null</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">addingService</span><span class=\"params\">(ServiceReference reference)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inside HelloServiceTracker.addingService \"</span> + reference.getBundle());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.addingService(reference);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removedService</span><span class=\"params\">(ServiceReference reference, Object service)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inside HelloServiceTracker.removedService \"</span> + reference.getBundle());</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.removedService(reference, service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在HelloServiceTracker的构造函数里将HelloService接口名传进去，ServiceTracker会跟踪实现这个接口的所有的注册services。ServiceTracker主要有两个重要方法：</p>\n<ul>\n<li><code>addingService</code>方法 ：bundle注册一个基于给定接口的service时调用。</li>\n<li><code>removeService</code>方法：bundle取消注册一个基于给定接口的service时调用。</li>\n</ul>\n<ol start=\"3\">\n<li>修改Activator类，使用刚刚创建的HelloServiceTracker来获取service：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activator</span> <span class=\"keyword\">implements</span> <span class=\"title\">BundleActivator</span> </span>&#123;</span><br><span class=\"line\">    HelloServiceTracker helloServiceTracker;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!!\"</span>);</span><br><span class=\"line\">        helloServiceTracker= <span class=\"keyword\">new</span> HelloServiceTracker(context);</span><br><span class=\"line\">        helloServiceTracker.open();</span><br><span class=\"line\">        HelloService helloService=(HelloService)helloServiceTracker.getService();</span><br><span class=\"line\">        System.out.println(helloService.sayHello());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(BundleContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Goodbye World!!\"</span>);</span><br><span class=\"line\">        helloServiceTracker.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在运行一下，可以发现只要HelloService bundle启动或是暂停都会导致HelloServiceTracker的对addingService或removedService方法的调用。</p>\n<p>ServiceTracker不仅仅能跟踪Service的动向，它还能通过getService方法取得Service实例并返回。但是如果同一个接口下有多个service注册，这时返回哪个service呢？这时候就需要看service的等级哪个高了。这个等级是service注册时的property属性里的一项：SERVICE_RANKING。谁的SERVICE_RANKING高，就返回谁。<br>如果有两个一样高的呢？这时再看这两个service谁的PID更低了</p>\n<p>[文章出处]<br><blockquote><footer><strong>longdick</strong><cite><a href=\"http://longdick.iteye.com/blog/457310\" target=\"_blank\" rel=\"noopener\">人人都会OSGI--实例讲解OSGI开发</a></cite></footer></blockquote><br>[参考资料]<br><blockquote><footer><strong>IBM-DeveloperWorks</strong><cite><a href=\"http://www.ibm.com/developerworks/cn/opensource/os-cn-osgi-spring/\" target=\"_blank\" rel=\"noopener\">基于 OSGi 和 Spring 开发 Web 应用</a></cite></footer></blockquote></p>\n"},{"title":"Settings for specific database and their maven dependencies","date":"2015-07-04T15:03:21.000Z","alias":null,"_content":"## 各种数据库Hibernate链接配置\n### Derby\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>org.apache.derby</groupId>\n        <artifactId>derbyclient</artifactId>\n        <version>10.2.2.0</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.DerbyDialect\nhibernate.connection.driver_class=org.apache.derby.jdbc.ClientDriver\nhibernate.connection.url=jdbc:derby://localhost/trails;create=true\nhibernate.connection.username=any\nhibernate.connection.password=value\nhibernate.hbm2ddl.auto=update\n```\n### MySQL\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>5.0.5</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect\nhibernate.connection.driver_class=com.mysql.jdbc.Driver\nhibernate.connection.url=jdbc:mysql://localhost/trails?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8\nhibernate.connection.username=root\nhibernate.connection.password=\nhibernate.hbm2ddl.auto=update\n```\n### H2\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>com.h2database</groupId>\n        <artifactId>h2</artifactId>\n        <version>1.0.20070304</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.H2Dialect\nhibernate.connection.driver_class=org.h2.Driver\nhibernate.connection.url=jdbc:h2:trails\nhibernate.connection.username=sa\nhibernate.connection.password=\nhibernate.hbm2ddl.auto=update\n```\n### Oracle\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>com.oracle</groupId>\n        <artifactId>ojdbc14</artifactId>\n        <version>10.2.0.2.0</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.Oracle9Dialect\nhibernate.connection.driver_class=oracle.jdbc.OracleDriver\nhibernate.connection.url=jdbc:oracle:thin:@localhost:1521:XE\nhibernate.connection.username=system\nhibernate.connection.password=system\nhibernate.hbm2ddl.auto=update\n \n# The Oracle JDBC driver doesn't like prepared statement caching very much.\nhibernate.statement_cache.size=0\n# or baching with BLOBs very much.\nhibernate.jdbc.batch_size=0\n \n# After a while, Oracle throws this exception: too many open cursors\n# Disable PreparedStatement caching for the connection pool too.\n# http://www.hibernate.org/120.html#A10\nhibernate.dbcp.ps.maxIdle = 0\n \n# Stoping hibernate from using the column-names in queries to retrieve data from the resultsets\n# More info in http://www.jroller.com/page/dashorst?entry=hibernate_3_1_something_performance1\nhibernate.jdbc.wrap_result_sets=true\n```\n### PostgreSQL\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>postgresql</groupId>\n        <artifactId>postgresql</artifactId>\n        <version>8.2-504.jdbc3</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\nhibernate.connection.driver_class=org.postgresql.Driver\nhibernate.connection.url=jdbc:postgresql://localhost/trails\nhibernate.connection.username=postgres\nhibernate.connection.password=postgres\nhibernate.hbm2ddl.auto=update\n```\n### Microsoft SQL Server\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>net.sourceforge.jtds</groupId>\n        <artifactId>jtds</artifactId>\n        <version>1.2</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.SQLServerDialect\nhibernate.connection.driver_class=net.sourceforge.jtds.jdbc.Driver\nhibernate.connection.url=jdbc:jtds:sqlserver://localhost:1433/trails\nhibernate.connection.username=sa\nhibernate.connection.password=\nhibernate.hbm2ddl.auto=update\n```\n### HSQLDB \n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>hsqldb</groupId>\n        <artifactId>hsqldb</artifactId>\n        <version>1.8.0.7</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.HSQLDialect\nhibernate.connection.driver_class=org.hsqldb.jdbcDriver\nhibernate.connection.url=jdbc:hsqldb:trails;shutdown=true\nhibernate.connection.username=sa\nhibernate.connection.password=\nhibernate.hbm2ddl.auto=update\n```","source":"_posts/Settings-for-specific-database-and-their-maven-dependencies.md","raw":"title: \"Settings for specific database and their maven dependencies\"\ndate: 2015-07-04 23:03:21\nalias: \ntags: 笔记\ncategories: Maven\n\n---\n## 各种数据库Hibernate链接配置\n### Derby\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>org.apache.derby</groupId>\n        <artifactId>derbyclient</artifactId>\n        <version>10.2.2.0</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.DerbyDialect\nhibernate.connection.driver_class=org.apache.derby.jdbc.ClientDriver\nhibernate.connection.url=jdbc:derby://localhost/trails;create=true\nhibernate.connection.username=any\nhibernate.connection.password=value\nhibernate.hbm2ddl.auto=update\n```\n### MySQL\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>5.0.5</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect\nhibernate.connection.driver_class=com.mysql.jdbc.Driver\nhibernate.connection.url=jdbc:mysql://localhost/trails?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8\nhibernate.connection.username=root\nhibernate.connection.password=\nhibernate.hbm2ddl.auto=update\n```\n### H2\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>com.h2database</groupId>\n        <artifactId>h2</artifactId>\n        <version>1.0.20070304</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.H2Dialect\nhibernate.connection.driver_class=org.h2.Driver\nhibernate.connection.url=jdbc:h2:trails\nhibernate.connection.username=sa\nhibernate.connection.password=\nhibernate.hbm2ddl.auto=update\n```\n### Oracle\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>com.oracle</groupId>\n        <artifactId>ojdbc14</artifactId>\n        <version>10.2.0.2.0</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.Oracle9Dialect\nhibernate.connection.driver_class=oracle.jdbc.OracleDriver\nhibernate.connection.url=jdbc:oracle:thin:@localhost:1521:XE\nhibernate.connection.username=system\nhibernate.connection.password=system\nhibernate.hbm2ddl.auto=update\n \n# The Oracle JDBC driver doesn't like prepared statement caching very much.\nhibernate.statement_cache.size=0\n# or baching with BLOBs very much.\nhibernate.jdbc.batch_size=0\n \n# After a while, Oracle throws this exception: too many open cursors\n# Disable PreparedStatement caching for the connection pool too.\n# http://www.hibernate.org/120.html#A10\nhibernate.dbcp.ps.maxIdle = 0\n \n# Stoping hibernate from using the column-names in queries to retrieve data from the resultsets\n# More info in http://www.jroller.com/page/dashorst?entry=hibernate_3_1_something_performance1\nhibernate.jdbc.wrap_result_sets=true\n```\n### PostgreSQL\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>postgresql</groupId>\n        <artifactId>postgresql</artifactId>\n        <version>8.2-504.jdbc3</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\nhibernate.connection.driver_class=org.postgresql.Driver\nhibernate.connection.url=jdbc:postgresql://localhost/trails\nhibernate.connection.username=postgres\nhibernate.connection.password=postgres\nhibernate.hbm2ddl.auto=update\n```\n### Microsoft SQL Server\n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>net.sourceforge.jtds</groupId>\n        <artifactId>jtds</artifactId>\n        <version>1.2</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.SQLServerDialect\nhibernate.connection.driver_class=net.sourceforge.jtds.jdbc.Driver\nhibernate.connection.url=jdbc:jtds:sqlserver://localhost:1433/trails\nhibernate.connection.username=sa\nhibernate.connection.password=\nhibernate.hbm2ddl.auto=update\n```\n### HSQLDB \n**db driver maven dependency**\n```xml\n<dependency>\n        <groupId>hsqldb</groupId>\n        <artifactId>hsqldb</artifactId>\n        <version>1.8.0.7</version>\n</dependency>\n```\n**hibernate.properties**\n``` java\nhibernate.dialect=org.hibernate.dialect.HSQLDialect\nhibernate.connection.driver_class=org.hsqldb.jdbcDriver\nhibernate.connection.url=jdbc:hsqldb:trails;shutdown=true\nhibernate.connection.username=sa\nhibernate.connection.password=\nhibernate.hbm2ddl.auto=update\n```","slug":"Settings-for-specific-database-and-their-maven-dependencies","published":1,"updated":"2019-12-30T17:16:22.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq22000qqyvyi1b1wrj0","content":"<h2 id=\"各种数据库Hibernate链接配置\"><a href=\"#各种数据库Hibernate链接配置\" class=\"headerlink\" title=\"各种数据库Hibernate链接配置\"></a>各种数据库Hibernate链接配置</h2><h3 id=\"Derby\"><a href=\"#Derby\" class=\"headerlink\" title=\"Derby\"></a>Derby</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.derby<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>derbyclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>10.2.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.DerbyDialect</span><br><span class=\"line\">hibernate.connection.driver_class=org.apache.derby.jdbc.ClientDriver</span><br><span class=\"line\">hibernate.connection.url=jdbc:derby:<span class=\"comment\">//localhost/trails;create=true</span></span><br><span class=\"line\">hibernate.connection.username=any</span><br><span class=\"line\">hibernate.connection.password=value</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect</span><br><span class=\"line\">hibernate.connection.driver_class=com.mysql.jdbc.Driver</span><br><span class=\"line\">hibernate.connection.url=jdbc:mysql:<span class=\"comment\">//localhost/trails?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8</span></span><br><span class=\"line\">hibernate.connection.username=root</span><br><span class=\"line\">hibernate.connection.password=</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"H2\"><a href=\"#H2\" class=\"headerlink\" title=\"H2\"></a>H2</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.20070304<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.H2Dialect</span><br><span class=\"line\">hibernate.connection.driver_class=org.h2.Driver</span><br><span class=\"line\">hibernate.connection.url=jdbc:h2:trails</span><br><span class=\"line\">hibernate.connection.username=sa</span><br><span class=\"line\">hibernate.connection.password=</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.oracle<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>ojdbc14<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>10.2.0.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.Oracle9Dialect</span><br><span class=\"line\">hibernate.connection.driver_class=oracle.jdbc.OracleDriver</span><br><span class=\"line\">hibernate.connection.url=jdbc:oracle:thin:<span class=\"meta\">@localhost</span>:<span class=\"number\">1521</span>:XE</span><br><span class=\"line\">hibernate.connection.username=system</span><br><span class=\"line\">hibernate.connection.password=system</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br><span class=\"line\"> </span><br><span class=\"line\"># The Oracle JDBC driver doesn't like prepared statement caching very much.</span><br><span class=\"line\">hibernate.statement_cache.size=<span class=\"number\">0</span></span><br><span class=\"line\"># or baching with BLOBs very much.</span><br><span class=\"line\">hibernate.jdbc.batch_size=<span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\"># After a while, Oracle throws this exception: too many open cursors</span><br><span class=\"line\"># Disable PreparedStatement caching for the connection pool too.</span><br><span class=\"line\"># http://www.hibernate.org/120.html#A10</span><br><span class=\"line\">hibernate.dbcp.ps.maxIdle = <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\"># Stoping hibernate from using the column-names in queries to retrieve data from the resultsets</span><br><span class=\"line\"># More info in http://www.jroller.com/page/dashorst?entry=hibernate_3_1_something_performance1</span><br><span class=\"line\">hibernate.jdbc.wrap_result_sets=<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>postgresql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>postgresql<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.2-504.jdbc3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect</span><br><span class=\"line\">hibernate.connection.driver_class=org.postgresql.Driver</span><br><span class=\"line\">hibernate.connection.url=jdbc:postgresql:<span class=\"comment\">//localhost/trails</span></span><br><span class=\"line\">hibernate.connection.username=postgres</span><br><span class=\"line\">hibernate.connection.password=postgres</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Microsoft-SQL-Server\"><a href=\"#Microsoft-SQL-Server\" class=\"headerlink\" title=\"Microsoft SQL Server\"></a>Microsoft SQL Server</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sourceforge.jtds<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jtds<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.SQLServerDialect</span><br><span class=\"line\">hibernate.connection.driver_class=net.sourceforge.jtds.jdbc.Driver</span><br><span class=\"line\">hibernate.connection.url=jdbc:jtds:sqlserver:<span class=\"comment\">//localhost:1433/trails</span></span><br><span class=\"line\">hibernate.connection.username=sa</span><br><span class=\"line\">hibernate.connection.password=</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"HSQLDB\"><a href=\"#HSQLDB\" class=\"headerlink\" title=\"HSQLDB\"></a>HSQLDB</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>hsqldb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hsqldb<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.0.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.HSQLDialect</span><br><span class=\"line\">hibernate.connection.driver_class=org.hsqldb.jdbcDriver</span><br><span class=\"line\">hibernate.connection.url=jdbc:hsqldb:trails;shutdown=<span class=\"keyword\">true</span></span><br><span class=\"line\">hibernate.connection.username=sa</span><br><span class=\"line\">hibernate.connection.password=</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"各种数据库Hibernate链接配置\"><a href=\"#各种数据库Hibernate链接配置\" class=\"headerlink\" title=\"各种数据库Hibernate链接配置\"></a>各种数据库Hibernate链接配置</h2><h3 id=\"Derby\"><a href=\"#Derby\" class=\"headerlink\" title=\"Derby\"></a>Derby</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.derby<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>derbyclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>10.2.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.DerbyDialect</span><br><span class=\"line\">hibernate.connection.driver_class=org.apache.derby.jdbc.ClientDriver</span><br><span class=\"line\">hibernate.connection.url=jdbc:derby:<span class=\"comment\">//localhost/trails;create=true</span></span><br><span class=\"line\">hibernate.connection.username=any</span><br><span class=\"line\">hibernate.connection.password=value</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect</span><br><span class=\"line\">hibernate.connection.driver_class=com.mysql.jdbc.Driver</span><br><span class=\"line\">hibernate.connection.url=jdbc:mysql:<span class=\"comment\">//localhost/trails?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8</span></span><br><span class=\"line\">hibernate.connection.username=root</span><br><span class=\"line\">hibernate.connection.password=</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"H2\"><a href=\"#H2\" class=\"headerlink\" title=\"H2\"></a>H2</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.20070304<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.H2Dialect</span><br><span class=\"line\">hibernate.connection.driver_class=org.h2.Driver</span><br><span class=\"line\">hibernate.connection.url=jdbc:h2:trails</span><br><span class=\"line\">hibernate.connection.username=sa</span><br><span class=\"line\">hibernate.connection.password=</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.oracle<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>ojdbc14<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>10.2.0.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.Oracle9Dialect</span><br><span class=\"line\">hibernate.connection.driver_class=oracle.jdbc.OracleDriver</span><br><span class=\"line\">hibernate.connection.url=jdbc:oracle:thin:<span class=\"meta\">@localhost</span>:<span class=\"number\">1521</span>:XE</span><br><span class=\"line\">hibernate.connection.username=system</span><br><span class=\"line\">hibernate.connection.password=system</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br><span class=\"line\"> </span><br><span class=\"line\"># The Oracle JDBC driver doesn't like prepared statement caching very much.</span><br><span class=\"line\">hibernate.statement_cache.size=<span class=\"number\">0</span></span><br><span class=\"line\"># or baching with BLOBs very much.</span><br><span class=\"line\">hibernate.jdbc.batch_size=<span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\"># After a while, Oracle throws this exception: too many open cursors</span><br><span class=\"line\"># Disable PreparedStatement caching for the connection pool too.</span><br><span class=\"line\"># http://www.hibernate.org/120.html#A10</span><br><span class=\"line\">hibernate.dbcp.ps.maxIdle = <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\"># Stoping hibernate from using the column-names in queries to retrieve data from the resultsets</span><br><span class=\"line\"># More info in http://www.jroller.com/page/dashorst?entry=hibernate_3_1_something_performance1</span><br><span class=\"line\">hibernate.jdbc.wrap_result_sets=<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>postgresql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>postgresql<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.2-504.jdbc3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect</span><br><span class=\"line\">hibernate.connection.driver_class=org.postgresql.Driver</span><br><span class=\"line\">hibernate.connection.url=jdbc:postgresql:<span class=\"comment\">//localhost/trails</span></span><br><span class=\"line\">hibernate.connection.username=postgres</span><br><span class=\"line\">hibernate.connection.password=postgres</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Microsoft-SQL-Server\"><a href=\"#Microsoft-SQL-Server\" class=\"headerlink\" title=\"Microsoft SQL Server\"></a>Microsoft SQL Server</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sourceforge.jtds<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jtds<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.SQLServerDialect</span><br><span class=\"line\">hibernate.connection.driver_class=net.sourceforge.jtds.jdbc.Driver</span><br><span class=\"line\">hibernate.connection.url=jdbc:jtds:sqlserver:<span class=\"comment\">//localhost:1433/trails</span></span><br><span class=\"line\">hibernate.connection.username=sa</span><br><span class=\"line\">hibernate.connection.password=</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"HSQLDB\"><a href=\"#HSQLDB\" class=\"headerlink\" title=\"HSQLDB\"></a>HSQLDB</h3><p><strong>db driver maven dependency</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>hsqldb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hsqldb<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.0.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>hibernate.properties</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hibernate.dialect=org.hibernate.dialect.HSQLDialect</span><br><span class=\"line\">hibernate.connection.driver_class=org.hsqldb.jdbcDriver</span><br><span class=\"line\">hibernate.connection.url=jdbc:hsqldb:trails;shutdown=<span class=\"keyword\">true</span></span><br><span class=\"line\">hibernate.connection.username=sa</span><br><span class=\"line\">hibernate.connection.password=</span><br><span class=\"line\">hibernate.hbm2ddl.auto=update</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Sightly","date":"2015-05-16T14:46:16.000Z","alias":"aem/index.html","comments":1,"_content":"Since myself has been work on French AEM project for several months, I realy recogize the perfect of Sightly langue.Sightly is an HTML templating language, it’s focus on keeping your markup beautiful, and thus maintainable, once made dynamic. This article is to introduce the Sightly HTML templating system and provides a quick reference of the syntax and available block statements.\n\n## Getting Started\nEvery Sightly template is an HTML5 document or fragment, augmented with a specific syntax that adds the dynamic functionality. Here's a first example:\n```html\n<h1 data-sly-test=\"${properties.jcr:title}\">\n    ${properties.jcr:title}\n</h1>\n```\nTwo different kind of syntaxes have to be distinguished:\n{% blockquote %}\n- ** Sightly Block Statements: ** To define structural block elements within the template, Sightly employs HTML5 data attributes. This allows to attach behavior to existing HTML elements. All Sightly-specific attributes are prefixed with ` data-sly- ` .\n- ** Sightly Expression Language: ** Sightly expressions are delimited by characters ` ${ ` and ` } `. At runtime, these expressions are evauated and their value is injected into the outgoing HTML stream. They can occur within the HTML text or within HTML attribute values.\n{% endblockquote %}\n\n```html\n<p data-sly-use.logic=\"logic.js\">\n    <a href=\"${logic.link}\">\n        ${logic.text}\n    </a>\n</p>\n```\n```html\n<h1 data-sly-test=\"${currentPage.title}\">\n    <a href=\"${currentPage.path}.html\">\n        ${currentPage.title}\n    </a>\n</h1>\n```\nFor the code example above:\n\n- Line 1: The ` data-sly-test ` statement checks if the page title exists and is not empty. If so, the ` <h1> `  element and its content is displayed, otherwise it is removed altogether.\n- Line 2: This expression renders the page path into the href attribute. Since Sightly knows the HTML syntax, href and src attributes are automatically protected against cross-site scripting (XSS) injections accordingly. For instance if the variable contained a javascript: URL, it would have been removed.\n- Line 3: This expression displays the page title as text. Many special characters are escaped to make it impossible to inject cross-site scripts.\n\n## Comments\n``` javascript \n<!--/* A Sightly Comment */--> \n```\n## Expressions\nSightly expressions are used to access the data structures that provide the dynamic elements of the HTML output. A Sightly expression is delimited by ` ${ ` and ` } `. The expression syntax includes literals, variables, operators and options:\n### Literals\n\n** Boolean **\nBoolean represents a logical entity and can have two values: true, and false.\n``` javascript \n${true} ${false} \n```\n** Numbers **\nThere is only one number type: integers. Floating point numbers are not supported:\n``` javascript \n${42} //will echo 42            \n```\n\n** Strings **\nThey represent textual data, and can be single or double quoted:\n``` javascript \n${'foo'} ${\"bar\"} \n```\nSingle character escape  sequences: \\\\ \\' \\\" \\t \\n \\r \\f \\b\n```javascript \n${'it\\'s great'}\n```\nUnicode escape sequences: \\u followed by 4 hexadecimal digits:\n``` javascript \n${'it\\u0027s great'}\n```\n### Variables \nSimple member access:\n``` javascript\n${properties.text} \n```\nColons are permitted in identifiers, which is useful for accessing JCR properties:\n```javascript\n${properties.jcr:title} \n```\nAccessing members with special characters (in this case a space):\n```javascript \n${properties['my property']} \n```\nAccessing members dynamically:\n```javascript\n${properties[myVar]} \n```\n### Operators \nLogical NOT:\n``` javascript  \n${!var} //\n```\nLogical AND:\n``` javascript\n${varOne && varTwo}\n```\nLogical OR (can be used to provide string defaults):\n``` javascript \n${varOne || varTwo} \n${properties.text || properties.default}\n```\nConditional:\n``` javascript\n${varChoice ? varOne : varTwo}\n```\nComparison (only supports integers):\n```javascript\n${varOne < varTwo} \n${varOne > varTwo}  \n${varOne <= varTwo} \n${varOne >= varTwo} \n```\nEquality and inequality (only supports two variables of identical type):\n```javascript\n${varOne == varTwo}\n${varOne != varTwo} \n```\nGrouping parentheses:\n``` javascript\n${varOne && (varTwo || varThree)} \n```\n\n### Options\nExpression options can act on the expression and modify it, or serve as parameters when used in conjunction with block statements.\n\nEverything after the ` @ `  is an option:\n``` javascript \n${myVar @ optOne} \n```\nOptions can have a value, which may be a variable or a literal:\n``` javascript\n${myVar @ optOne=bar} \n${myVar @ optOne='bar'} \n```\nMultiple options are separated by commas:\n``` javascript \n${myVar @ optOne, optTwo=bar} \n```\nParametric expressions containing only options are also possible:\n``` javascript\n ${@ optOne, optTwo=bar} \n```\n### Block Statements\n\nSightly block statements are custom data attributes added directly to existing HTML. This allows easy and unobtrusive annotation of a prototype static HTML page, converting it to a functioning dynamic template without breaking the validity of the HTML code.\nuse\n` data-sly-use `: Initializes a helper object (defined in JavaScript or Java) and exposes it through a variable.\nInitialize a JavaScript object, where the source file is located in the same directory as the template. Note that the filename must be used:\n```html\n<div data-sly-use.nav=\"navigation.js\">${nav.foo}</div>\n```\nInitialize a Java class, where the source file is located in the same directory as the template. Note that the classname must be used, not the file name:\n```html\n<div data-sly-use.nav=\"Navigation\">${nav.foo}</div>\n```\nInitialize a Java class, where that class is installed as part of an OSGi bundle. Note that its fully-qualified class name must be used:\n``` html \n<div data-sly-use.nav=\"org.example.Navigation\">${nav.foo}</div> \n```\nParameters can be passed to the initialization using options. Generally this feature should only be used by Sightly code that is itself within a ` data-sly-template ` block:\n``` html\n<div data-sly-use.nav=\"${'navigation.js' @parentPage=currentPage}\">${nav.foo}</div>\n```\nInitialize another Sightly template that can then be called using ` data-sly-call `:\n``` html \n<div data-sly-use.nav=\"navTemplate.html\" data-sly-call=\"${nav.foo}\"></div>\n```\n\n{% blockquote Adobe http://docs.adobe.com/content/docs/en/aem/6-0/develop/sightly.html %}\nSee more detail from adobe documentation online \n{% endblockquote %}","source":"_posts/Sightly.md","raw":"title: \"Sightly\"\ndate: 2015-05-16 22:46:16\nalias: aem/index.html\ntags: 语言学习 \ncategories: 语言学习\ncomments: true\n\n---\nSince myself has been work on French AEM project for several months, I realy recogize the perfect of Sightly langue.Sightly is an HTML templating language, it’s focus on keeping your markup beautiful, and thus maintainable, once made dynamic. This article is to introduce the Sightly HTML templating system and provides a quick reference of the syntax and available block statements.\n\n## Getting Started\nEvery Sightly template is an HTML5 document or fragment, augmented with a specific syntax that adds the dynamic functionality. Here's a first example:\n```html\n<h1 data-sly-test=\"${properties.jcr:title}\">\n    ${properties.jcr:title}\n</h1>\n```\nTwo different kind of syntaxes have to be distinguished:\n{% blockquote %}\n- ** Sightly Block Statements: ** To define structural block elements within the template, Sightly employs HTML5 data attributes. This allows to attach behavior to existing HTML elements. All Sightly-specific attributes are prefixed with ` data-sly- ` .\n- ** Sightly Expression Language: ** Sightly expressions are delimited by characters ` ${ ` and ` } `. At runtime, these expressions are evauated and their value is injected into the outgoing HTML stream. They can occur within the HTML text or within HTML attribute values.\n{% endblockquote %}\n\n```html\n<p data-sly-use.logic=\"logic.js\">\n    <a href=\"${logic.link}\">\n        ${logic.text}\n    </a>\n</p>\n```\n```html\n<h1 data-sly-test=\"${currentPage.title}\">\n    <a href=\"${currentPage.path}.html\">\n        ${currentPage.title}\n    </a>\n</h1>\n```\nFor the code example above:\n\n- Line 1: The ` data-sly-test ` statement checks if the page title exists and is not empty. If so, the ` <h1> `  element and its content is displayed, otherwise it is removed altogether.\n- Line 2: This expression renders the page path into the href attribute. Since Sightly knows the HTML syntax, href and src attributes are automatically protected against cross-site scripting (XSS) injections accordingly. For instance if the variable contained a javascript: URL, it would have been removed.\n- Line 3: This expression displays the page title as text. Many special characters are escaped to make it impossible to inject cross-site scripts.\n\n## Comments\n``` javascript \n<!--/* A Sightly Comment */--> \n```\n## Expressions\nSightly expressions are used to access the data structures that provide the dynamic elements of the HTML output. A Sightly expression is delimited by ` ${ ` and ` } `. The expression syntax includes literals, variables, operators and options:\n### Literals\n\n** Boolean **\nBoolean represents a logical entity and can have two values: true, and false.\n``` javascript \n${true} ${false} \n```\n** Numbers **\nThere is only one number type: integers. Floating point numbers are not supported:\n``` javascript \n${42} //will echo 42            \n```\n\n** Strings **\nThey represent textual data, and can be single or double quoted:\n``` javascript \n${'foo'} ${\"bar\"} \n```\nSingle character escape  sequences: \\\\ \\' \\\" \\t \\n \\r \\f \\b\n```javascript \n${'it\\'s great'}\n```\nUnicode escape sequences: \\u followed by 4 hexadecimal digits:\n``` javascript \n${'it\\u0027s great'}\n```\n### Variables \nSimple member access:\n``` javascript\n${properties.text} \n```\nColons are permitted in identifiers, which is useful for accessing JCR properties:\n```javascript\n${properties.jcr:title} \n```\nAccessing members with special characters (in this case a space):\n```javascript \n${properties['my property']} \n```\nAccessing members dynamically:\n```javascript\n${properties[myVar]} \n```\n### Operators \nLogical NOT:\n``` javascript  \n${!var} //\n```\nLogical AND:\n``` javascript\n${varOne && varTwo}\n```\nLogical OR (can be used to provide string defaults):\n``` javascript \n${varOne || varTwo} \n${properties.text || properties.default}\n```\nConditional:\n``` javascript\n${varChoice ? varOne : varTwo}\n```\nComparison (only supports integers):\n```javascript\n${varOne < varTwo} \n${varOne > varTwo}  \n${varOne <= varTwo} \n${varOne >= varTwo} \n```\nEquality and inequality (only supports two variables of identical type):\n```javascript\n${varOne == varTwo}\n${varOne != varTwo} \n```\nGrouping parentheses:\n``` javascript\n${varOne && (varTwo || varThree)} \n```\n\n### Options\nExpression options can act on the expression and modify it, or serve as parameters when used in conjunction with block statements.\n\nEverything after the ` @ `  is an option:\n``` javascript \n${myVar @ optOne} \n```\nOptions can have a value, which may be a variable or a literal:\n``` javascript\n${myVar @ optOne=bar} \n${myVar @ optOne='bar'} \n```\nMultiple options are separated by commas:\n``` javascript \n${myVar @ optOne, optTwo=bar} \n```\nParametric expressions containing only options are also possible:\n``` javascript\n ${@ optOne, optTwo=bar} \n```\n### Block Statements\n\nSightly block statements are custom data attributes added directly to existing HTML. This allows easy and unobtrusive annotation of a prototype static HTML page, converting it to a functioning dynamic template without breaking the validity of the HTML code.\nuse\n` data-sly-use `: Initializes a helper object (defined in JavaScript or Java) and exposes it through a variable.\nInitialize a JavaScript object, where the source file is located in the same directory as the template. Note that the filename must be used:\n```html\n<div data-sly-use.nav=\"navigation.js\">${nav.foo}</div>\n```\nInitialize a Java class, where the source file is located in the same directory as the template. Note that the classname must be used, not the file name:\n```html\n<div data-sly-use.nav=\"Navigation\">${nav.foo}</div>\n```\nInitialize a Java class, where that class is installed as part of an OSGi bundle. Note that its fully-qualified class name must be used:\n``` html \n<div data-sly-use.nav=\"org.example.Navigation\">${nav.foo}</div> \n```\nParameters can be passed to the initialization using options. Generally this feature should only be used by Sightly code that is itself within a ` data-sly-template ` block:\n``` html\n<div data-sly-use.nav=\"${'navigation.js' @parentPage=currentPage}\">${nav.foo}</div>\n```\nInitialize another Sightly template that can then be called using ` data-sly-call `:\n``` html \n<div data-sly-use.nav=\"navTemplate.html\" data-sly-call=\"${nav.foo}\"></div>\n```\n\n{% blockquote Adobe http://docs.adobe.com/content/docs/en/aem/6-0/develop/sightly.html %}\nSee more detail from adobe documentation online \n{% endblockquote %}","slug":"Sightly","published":1,"updated":"2019-12-30T17:16:22.284Z","layout":"post","photos":[],"link":"","_id":"ck4u6dq24000tqyvyf0ptqjol","content":"<p>Since myself has been work on French AEM project for several months, I realy recogize the perfect of Sightly langue.Sightly is an HTML templating language, it’s focus on keeping your markup beautiful, and thus maintainable, once made dynamic. This article is to introduce the Sightly HTML templating system and provides a quick reference of the syntax and available block statements.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>Every Sightly template is an HTML5 document or fragment, augmented with a specific syntax that adds the dynamic functionality. Here’s a first example:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">data-sly-test</span>=<span class=\"string\">\"$&#123;properties.jcr:title&#125;\"</span>&gt;</span></span><br><span class=\"line\">    $&#123;properties.jcr:title&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Two different kind of syntaxes have to be distinguished:<br><blockquote><ul>\n<li><strong> Sightly Block Statements: </strong> To define structural block elements within the template, Sightly employs HTML5 data attributes. This allows to attach behavior to existing HTML elements. All Sightly-specific attributes are prefixed with <code>data-sly-</code> .</li>\n<li><strong> Sightly Expression Language: </strong> Sightly expressions are delimited by characters <code>${</code> and <code>}</code>. At runtime, these expressions are evauated and their value is injected into the outgoing HTML stream. They can occur within the HTML text or within HTML attribute values.</li>\n</ul>\n</blockquote></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">data-sly-use.logic</span>=<span class=\"string\">\"logic.js\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;logic.link&#125;\"</span>&gt;</span></span><br><span class=\"line\">        $&#123;logic.text&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">data-sly-test</span>=<span class=\"string\">\"$&#123;currentPage.title&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;currentPage.path&#125;.html\"</span>&gt;</span></span><br><span class=\"line\">        $&#123;currentPage.title&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>For the code example above:</p>\n<ul>\n<li>Line 1: The <code>data-sly-test</code> statement checks if the page title exists and is not empty. If so, the <code>&lt;h1&gt;</code>  element and its content is displayed, otherwise it is removed altogether.</li>\n<li>Line 2: This expression renders the page path into the href attribute. Since Sightly knows the HTML syntax, href and src attributes are automatically protected against cross-site scripting (XSS) injections accordingly. For instance if the variable contained a javascript: URL, it would have been removed.</li>\n<li>Line 3: This expression displays the page title as text. Many special characters are escaped to make it impossible to inject cross-site scripts.</li>\n</ul>\n<h2 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--<span class=\"comment\">/* A Sightly Comment */</span>--&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expressions\"><a href=\"#Expressions\" class=\"headerlink\" title=\"Expressions\"></a>Expressions</h2><p>Sightly expressions are used to access the data structures that provide the dynamic elements of the HTML output. A Sightly expression is delimited by <code>${</code> and <code>}</code>. The expression syntax includes literals, variables, operators and options:</p>\n<h3 id=\"Literals\"><a href=\"#Literals\" class=\"headerlink\" title=\"Literals\"></a>Literals</h3><p><strong> Boolean </strong><br>Boolean represents a logical entity and can have two values: true, and false.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"literal\">true</span>&#125; $&#123;<span class=\"literal\">false</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> Numbers </strong><br>There is only one number type: integers. Floating point numbers are not supported:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"number\">42</span>&#125; <span class=\"comment\">//will echo 42</span></span><br></pre></td></tr></table></figure></p>\n<p><strong> Strings </strong><br>They represent textual data, and can be single or double quoted:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"string\">'foo'</span>&#125; $&#123;<span class=\"string\">\"bar\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Single character escape  sequences: \\ \\’ \\” \\t \\n \\r \\f \\b<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"string\">'it\\'s great'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Unicode escape sequences: \\u followed by 4 hexadecimal digits:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"string\">'it\\u0027s great'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><p>Simple member access:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;properties.text&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Colons are permitted in identifiers, which is useful for accessing JCR properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;properties.jcr:title&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Accessing members with special characters (in this case a space):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;properties[<span class=\"string\">'my property'</span>]&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Accessing members dynamically:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;properties[myVar]&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h3><p>Logical NOT:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;!<span class=\"keyword\">var</span>&#125; <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure></p>\n<p>Logical AND:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varOne &amp;&amp; varTwo&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Logical OR (can be used to provide string defaults):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varOne || varTwo&#125; </span><br><span class=\"line\">$&#123;properties.text || properties.default&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Conditional:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varChoice ? varOne : varTwo&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Comparison (only supports integers):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varOne &lt; varTwo&#125; </span><br><span class=\"line\">$&#123;varOne &gt; varTwo&#125;  </span><br><span class=\"line\">$&#123;varOne &lt;= varTwo&#125; </span><br><span class=\"line\">$&#123;varOne &gt;= varTwo&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Equality and inequality (only supports two variables of identical type):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varOne == varTwo&#125;</span><br><span class=\"line\">$&#123;varOne != varTwo&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Grouping parentheses:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varOne &amp;&amp; (varTwo || varThree)&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h3><p>Expression options can act on the expression and modify it, or serve as parameters when used in conjunction with block statements.</p>\n<p>Everything after the <code>@</code>  is an option:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;myVar @ optOne&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Options can have a value, which may be a variable or a literal:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;myVar @ optOne=bar&#125; </span><br><span class=\"line\">$&#123;myVar @ optOne=<span class=\"string\">'bar'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Multiple options are separated by commas:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;myVar @ optOne, optTwo=bar&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Parametric expressions containing only options are also possible:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;@ optOne, optTwo=bar&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Block-Statements\"><a href=\"#Block-Statements\" class=\"headerlink\" title=\"Block Statements\"></a>Block Statements</h3><p>Sightly block statements are custom data attributes added directly to existing HTML. This allows easy and unobtrusive annotation of a prototype static HTML page, converting it to a functioning dynamic template without breaking the validity of the HTML code.<br>use<br><code>data-sly-use</code>: Initializes a helper object (defined in JavaScript or Java) and exposes it through a variable.<br>Initialize a JavaScript object, where the source file is located in the same directory as the template. Note that the filename must be used:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-sly-use.nav</span>=<span class=\"string\">\"navigation.js\"</span>&gt;</span>$&#123;nav.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Initialize a Java class, where the source file is located in the same directory as the template. Note that the classname must be used, not the file name:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-sly-use.nav</span>=<span class=\"string\">\"Navigation\"</span>&gt;</span>$&#123;nav.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Initialize a Java class, where that class is installed as part of an OSGi bundle. Note that its fully-qualified class name must be used:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-sly-use.nav</span>=<span class=\"string\">\"org.example.Navigation\"</span>&gt;</span>$&#123;nav.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Parameters can be passed to the initialization using options. Generally this feature should only be used by Sightly code that is itself within a <code>data-sly-template</code> block:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-sly-use.nav</span>=<span class=\"string\">\"$&#123;'navigation.js' @parentPage=currentPage&#125;\"</span>&gt;</span>$&#123;nav.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Initialize another Sightly template that can then be called using <code>data-sly-call</code>:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-sly-use.nav</span>=<span class=\"string\">\"navTemplate.html\"</span> <span class=\"attr\">data-sly-call</span>=<span class=\"string\">\"$&#123;nav.foo&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote><p>See more detail from adobe documentation online </p>\n<footer><strong>Adobe</strong><cite><a href=\"http://docs.adobe.com/content/docs/en/aem/6-0/develop/sightly.html\" target=\"_blank\" rel=\"noopener\">docs.adobe.com/content/docs/en/aem/6-0/develop/sightly.html</a></cite></footer></blockquote>","site":{"data":{}},"excerpt":"","more":"<p>Since myself has been work on French AEM project for several months, I realy recogize the perfect of Sightly langue.Sightly is an HTML templating language, it’s focus on keeping your markup beautiful, and thus maintainable, once made dynamic. This article is to introduce the Sightly HTML templating system and provides a quick reference of the syntax and available block statements.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>Every Sightly template is an HTML5 document or fragment, augmented with a specific syntax that adds the dynamic functionality. Here’s a first example:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">data-sly-test</span>=<span class=\"string\">\"$&#123;properties.jcr:title&#125;\"</span>&gt;</span></span><br><span class=\"line\">    $&#123;properties.jcr:title&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Two different kind of syntaxes have to be distinguished:<br><blockquote><ul>\n<li><strong> Sightly Block Statements: </strong> To define structural block elements within the template, Sightly employs HTML5 data attributes. This allows to attach behavior to existing HTML elements. All Sightly-specific attributes are prefixed with <code>data-sly-</code> .</li>\n<li><strong> Sightly Expression Language: </strong> Sightly expressions are delimited by characters <code>${</code> and <code>}</code>. At runtime, these expressions are evauated and their value is injected into the outgoing HTML stream. They can occur within the HTML text or within HTML attribute values.</li>\n</ul>\n</blockquote></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">data-sly-use.logic</span>=<span class=\"string\">\"logic.js\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;logic.link&#125;\"</span>&gt;</span></span><br><span class=\"line\">        $&#123;logic.text&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">data-sly-test</span>=<span class=\"string\">\"$&#123;currentPage.title&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;currentPage.path&#125;.html\"</span>&gt;</span></span><br><span class=\"line\">        $&#123;currentPage.title&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>For the code example above:</p>\n<ul>\n<li>Line 1: The <code>data-sly-test</code> statement checks if the page title exists and is not empty. If so, the <code>&lt;h1&gt;</code>  element and its content is displayed, otherwise it is removed altogether.</li>\n<li>Line 2: This expression renders the page path into the href attribute. Since Sightly knows the HTML syntax, href and src attributes are automatically protected against cross-site scripting (XSS) injections accordingly. For instance if the variable contained a javascript: URL, it would have been removed.</li>\n<li>Line 3: This expression displays the page title as text. Many special characters are escaped to make it impossible to inject cross-site scripts.</li>\n</ul>\n<h2 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--<span class=\"comment\">/* A Sightly Comment */</span>--&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expressions\"><a href=\"#Expressions\" class=\"headerlink\" title=\"Expressions\"></a>Expressions</h2><p>Sightly expressions are used to access the data structures that provide the dynamic elements of the HTML output. A Sightly expression is delimited by <code>${</code> and <code>}</code>. The expression syntax includes literals, variables, operators and options:</p>\n<h3 id=\"Literals\"><a href=\"#Literals\" class=\"headerlink\" title=\"Literals\"></a>Literals</h3><p><strong> Boolean </strong><br>Boolean represents a logical entity and can have two values: true, and false.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"literal\">true</span>&#125; $&#123;<span class=\"literal\">false</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> Numbers </strong><br>There is only one number type: integers. Floating point numbers are not supported:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"number\">42</span>&#125; <span class=\"comment\">//will echo 42</span></span><br></pre></td></tr></table></figure></p>\n<p><strong> Strings </strong><br>They represent textual data, and can be single or double quoted:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"string\">'foo'</span>&#125; $&#123;<span class=\"string\">\"bar\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Single character escape  sequences: \\ \\’ \\” \\t \\n \\r \\f \\b<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"string\">'it\\'s great'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Unicode escape sequences: \\u followed by 4 hexadecimal digits:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"string\">'it\\u0027s great'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><p>Simple member access:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;properties.text&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Colons are permitted in identifiers, which is useful for accessing JCR properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;properties.jcr:title&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Accessing members with special characters (in this case a space):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;properties[<span class=\"string\">'my property'</span>]&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Accessing members dynamically:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;properties[myVar]&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h3><p>Logical NOT:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;!<span class=\"keyword\">var</span>&#125; <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure></p>\n<p>Logical AND:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varOne &amp;&amp; varTwo&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Logical OR (can be used to provide string defaults):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varOne || varTwo&#125; </span><br><span class=\"line\">$&#123;properties.text || properties.default&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Conditional:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varChoice ? varOne : varTwo&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Comparison (only supports integers):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varOne &lt; varTwo&#125; </span><br><span class=\"line\">$&#123;varOne &gt; varTwo&#125;  </span><br><span class=\"line\">$&#123;varOne &lt;= varTwo&#125; </span><br><span class=\"line\">$&#123;varOne &gt;= varTwo&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Equality and inequality (only supports two variables of identical type):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varOne == varTwo&#125;</span><br><span class=\"line\">$&#123;varOne != varTwo&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Grouping parentheses:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;varOne &amp;&amp; (varTwo || varThree)&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h3><p>Expression options can act on the expression and modify it, or serve as parameters when used in conjunction with block statements.</p>\n<p>Everything after the <code>@</code>  is an option:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;myVar @ optOne&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Options can have a value, which may be a variable or a literal:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;myVar @ optOne=bar&#125; </span><br><span class=\"line\">$&#123;myVar @ optOne=<span class=\"string\">'bar'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Multiple options are separated by commas:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;myVar @ optOne, optTwo=bar&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Parametric expressions containing only options are also possible:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;@ optOne, optTwo=bar&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Block-Statements\"><a href=\"#Block-Statements\" class=\"headerlink\" title=\"Block Statements\"></a>Block Statements</h3><p>Sightly block statements are custom data attributes added directly to existing HTML. This allows easy and unobtrusive annotation of a prototype static HTML page, converting it to a functioning dynamic template without breaking the validity of the HTML code.<br>use<br><code>data-sly-use</code>: Initializes a helper object (defined in JavaScript or Java) and exposes it through a variable.<br>Initialize a JavaScript object, where the source file is located in the same directory as the template. Note that the filename must be used:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-sly-use.nav</span>=<span class=\"string\">\"navigation.js\"</span>&gt;</span>$&#123;nav.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Initialize a Java class, where the source file is located in the same directory as the template. Note that the classname must be used, not the file name:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-sly-use.nav</span>=<span class=\"string\">\"Navigation\"</span>&gt;</span>$&#123;nav.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Initialize a Java class, where that class is installed as part of an OSGi bundle. Note that its fully-qualified class name must be used:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-sly-use.nav</span>=<span class=\"string\">\"org.example.Navigation\"</span>&gt;</span>$&#123;nav.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Parameters can be passed to the initialization using options. Generally this feature should only be used by Sightly code that is itself within a <code>data-sly-template</code> block:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-sly-use.nav</span>=<span class=\"string\">\"$&#123;'navigation.js' @parentPage=currentPage&#125;\"</span>&gt;</span>$&#123;nav.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Initialize another Sightly template that can then be called using <code>data-sly-call</code>:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-sly-use.nav</span>=<span class=\"string\">\"navTemplate.html\"</span> <span class=\"attr\">data-sly-call</span>=<span class=\"string\">\"$&#123;nav.foo&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote><p>See more detail from adobe documentation online </p>\n<footer><strong>Adobe</strong><cite><a href=\"http://docs.adobe.com/content/docs/en/aem/6-0/develop/sightly.html\" target=\"_blank\" rel=\"noopener\">docs.adobe.com/content/docs/en/aem/6-0/develop/sightly.html</a></cite></footer></blockquote>"},{"title":"SublimeText快捷键","date":"2015-08-15T16:17:56.000Z","alias":null,"_content":"## 安装Package Control\n官网的安装方法：\n1、 Click the Preferences > Browse Packages… menu\n2、 Browse up a folder and then into the Installed Packages/ folder\n3、 Download Package Control.sublime-package and copy it into the Installed Packages/ directory\n4、 Restart Sublime Text\n如果在 Preferences -> Package Settings中见到Package Control这一项，就说明安装成功了。\n插件使用方法：Ctrl+Shift+P 调用命令面板，我们就会找到一些以“Package Control:”开头的命令，我们常用到的就是几个 Install Package (安装扩展)、List Packages (列出全部扩展)、Remove Package (移除扩展)、Upgrade Package (升级扩展)\n##安装Emmet\n强大的编辑功能，自动补全功能\n打开sublime，mac下用command + shift + p调出命令窗口，输入install,选中package control：install package，等待1-2秒，下拉选中emmet plugin回车，等待2-3秒，重启sublime。\n### 体验自动补全的便捷和好处\n输入以下简写，按tab键\n#### html:5\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n</body>\n</html>\n```\n#### html:4t\n```html\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html lang=\"en\">\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n</body>\n</html>\n```\n#### html:4s\n```html\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html lang=\"en\">\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n</body>\n</html>\n```\n#### html:xxs\n```html \n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n</body>\n</html>\n```\n#### header.top>ul#nav>li.itemS*4>a{Item $}\n```html\n<header class=\"top\">\n\t<ul id=\"nav\">\n\t\t<li class=\"itemS\"><a href=\"\">Item 1</a></li>\n\t\t<li class=\"itemS\"><a href=\"\">Item 2</a></li>\n\t\t<li class=\"itemS\"><a href=\"\">Item 3</a></li>\n\t\t<li class=\"itemS\"><a href=\"\">Item 4</a></li>\n\t</ul>\n</header>\n```\n##一般常用快捷键\n`Ctrl+D` 选词 （反复按快捷键，即可继续向下同时选中下一个相同的文本进行同时编辑）\n`Ctrl+G` 跳转到相应的行\n`Ctrl+J` 合并行（已选择需要合并的多行时）\n`Ctrl+L` 选择整行（按住-继续选择下行）\n`Ctrl+M` 光标移动至括号内开始或结束的位置\n`Ctrl+T` 词互换\n`Ctrl+U` 软撤销\n`Ctrl+P` 查找当前项目中的文件和快速搜索；输入 @ 查找文件主标题/函数；或者输入 : 跳转到文件某行；\n`Ctrl+R` 快速列出/跳转到某个函数\n`Ctrl+K` Backspace 从光标处删除至行首\n`Ctrl+K+B` 开启/关闭侧边栏\n`Ctrl+KK` 从光标处删除至行尾\n`Ctrl+K+T` 折叠属性\n`Ctrl+K+U` 改为大写\n`Ctrl+K+L` 改为小写\n`Ctrl+K+0` 展开所有\n`Ctrl+Enter` 插入行后（快速换行）\n`Ctrl+Tab` 当前窗口中的标签页切换\n\n`Ctrl+Shift+A` 选择光标位置父标签对儿\n`Ctrl+Shift+D` 复制光标所在整行，插入在该行之前\n`ctrl+shift+F` 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找\n`Ctrl+Shift+K` 删除整行\n`Ctrl+Shift+L` 鼠标选中多行（按下快捷键），即可同时编辑这些行\n`Ctrl+Shift+M` 选择括号内的内容（按住-继续选择父括号）\n`Ctrl+Shift+P` 打开命令面板\n`Ctrl+Shift+/` 注释已选择内容\n`Ctrl+Shift+↑`可以移动此行代码，与上行互换\n`Ctrl+Shift+↓`可以移动此行代码，与下行互换\n`Ctrl+Shift+[` 折叠代码\n`Ctrl+Shift+]` 展开代码\n`Ctrl+Shift+Enter` 光标前插入行\n`Ctrl+PageDown` `Ctrl+PageUp` 文件按开启的前后顺序切换\n\n`Ctrl+Z` 撤销\n`Ctrl+Y` 恢复撤销\n`Ctrl+F2` 设置书签\n`Ctrl+/` 注释整行（如已选择内容，同“Ctrl+Shift+/”效果）\n`Ctrl+鼠标左键` 可以同时选择要编辑的多处文本\n\n`Shift+鼠标右键`（或使用鼠标中键）可以用鼠标进行竖向多行选择\n`Shift+F2` 上一个书签\n`Shift+Tab` 去除缩进\n`Alt+Shift+1`（非小键盘）窗口分屏，恢复默认1屏\n`Alt+Shift+2` 左右分屏-2列\n`Alt+Shift+3` 左右分屏-3列\n`Alt+Shift+4` 左右分屏-4列\n`Alt+Shift+5` 等分4屏\n`Alt+Shift+8` 垂直分屏-2屏\n`Alt+Shift+9` 垂直分屏-3屏\n\n`Alt+.` 闭合当前标签\n`Alt+F3` 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑\n\n`Tab` 缩进 自动完成\n`F2` 下一个书签\n`F6` 检测语法错误\n`F9` 行排序(按a-z)\n`F11` 全屏模式\n## 参考文档\n\n{% blockquote Emmet http://docs.emmet.io/ Emmet 官方文档 %}\n{% endblockquote %}\n{% blockquote SublimeText http://www.sublimetext.com/docs/2 SublimeText 官方文档%}\n{% endblockquote %}\n","source":"_posts/SublimeText快捷键.md","raw":"title: \"SublimeText快捷键\"\ndate: 2015-08-16 00:17:56\nalias: \ntags: 工具\ncategories: 总结与分享\n\n---\n## 安装Package Control\n官网的安装方法：\n1、 Click the Preferences > Browse Packages… menu\n2、 Browse up a folder and then into the Installed Packages/ folder\n3、 Download Package Control.sublime-package and copy it into the Installed Packages/ directory\n4、 Restart Sublime Text\n如果在 Preferences -> Package Settings中见到Package Control这一项，就说明安装成功了。\n插件使用方法：Ctrl+Shift+P 调用命令面板，我们就会找到一些以“Package Control:”开头的命令，我们常用到的就是几个 Install Package (安装扩展)、List Packages (列出全部扩展)、Remove Package (移除扩展)、Upgrade Package (升级扩展)\n##安装Emmet\n强大的编辑功能，自动补全功能\n打开sublime，mac下用command + shift + p调出命令窗口，输入install,选中package control：install package，等待1-2秒，下拉选中emmet plugin回车，等待2-3秒，重启sublime。\n### 体验自动补全的便捷和好处\n输入以下简写，按tab键\n#### html:5\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n</body>\n</html>\n```\n#### html:4t\n```html\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html lang=\"en\">\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n</body>\n</html>\n```\n#### html:4s\n```html\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html lang=\"en\">\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n</body>\n</html>\n```\n#### html:xxs\n```html \n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n</body>\n</html>\n```\n#### header.top>ul#nav>li.itemS*4>a{Item $}\n```html\n<header class=\"top\">\n\t<ul id=\"nav\">\n\t\t<li class=\"itemS\"><a href=\"\">Item 1</a></li>\n\t\t<li class=\"itemS\"><a href=\"\">Item 2</a></li>\n\t\t<li class=\"itemS\"><a href=\"\">Item 3</a></li>\n\t\t<li class=\"itemS\"><a href=\"\">Item 4</a></li>\n\t</ul>\n</header>\n```\n##一般常用快捷键\n`Ctrl+D` 选词 （反复按快捷键，即可继续向下同时选中下一个相同的文本进行同时编辑）\n`Ctrl+G` 跳转到相应的行\n`Ctrl+J` 合并行（已选择需要合并的多行时）\n`Ctrl+L` 选择整行（按住-继续选择下行）\n`Ctrl+M` 光标移动至括号内开始或结束的位置\n`Ctrl+T` 词互换\n`Ctrl+U` 软撤销\n`Ctrl+P` 查找当前项目中的文件和快速搜索；输入 @ 查找文件主标题/函数；或者输入 : 跳转到文件某行；\n`Ctrl+R` 快速列出/跳转到某个函数\n`Ctrl+K` Backspace 从光标处删除至行首\n`Ctrl+K+B` 开启/关闭侧边栏\n`Ctrl+KK` 从光标处删除至行尾\n`Ctrl+K+T` 折叠属性\n`Ctrl+K+U` 改为大写\n`Ctrl+K+L` 改为小写\n`Ctrl+K+0` 展开所有\n`Ctrl+Enter` 插入行后（快速换行）\n`Ctrl+Tab` 当前窗口中的标签页切换\n\n`Ctrl+Shift+A` 选择光标位置父标签对儿\n`Ctrl+Shift+D` 复制光标所在整行，插入在该行之前\n`ctrl+shift+F` 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找\n`Ctrl+Shift+K` 删除整行\n`Ctrl+Shift+L` 鼠标选中多行（按下快捷键），即可同时编辑这些行\n`Ctrl+Shift+M` 选择括号内的内容（按住-继续选择父括号）\n`Ctrl+Shift+P` 打开命令面板\n`Ctrl+Shift+/` 注释已选择内容\n`Ctrl+Shift+↑`可以移动此行代码，与上行互换\n`Ctrl+Shift+↓`可以移动此行代码，与下行互换\n`Ctrl+Shift+[` 折叠代码\n`Ctrl+Shift+]` 展开代码\n`Ctrl+Shift+Enter` 光标前插入行\n`Ctrl+PageDown` `Ctrl+PageUp` 文件按开启的前后顺序切换\n\n`Ctrl+Z` 撤销\n`Ctrl+Y` 恢复撤销\n`Ctrl+F2` 设置书签\n`Ctrl+/` 注释整行（如已选择内容，同“Ctrl+Shift+/”效果）\n`Ctrl+鼠标左键` 可以同时选择要编辑的多处文本\n\n`Shift+鼠标右键`（或使用鼠标中键）可以用鼠标进行竖向多行选择\n`Shift+F2` 上一个书签\n`Shift+Tab` 去除缩进\n`Alt+Shift+1`（非小键盘）窗口分屏，恢复默认1屏\n`Alt+Shift+2` 左右分屏-2列\n`Alt+Shift+3` 左右分屏-3列\n`Alt+Shift+4` 左右分屏-4列\n`Alt+Shift+5` 等分4屏\n`Alt+Shift+8` 垂直分屏-2屏\n`Alt+Shift+9` 垂直分屏-3屏\n\n`Alt+.` 闭合当前标签\n`Alt+F3` 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑\n\n`Tab` 缩进 自动完成\n`F2` 下一个书签\n`F6` 检测语法错误\n`F9` 行排序(按a-z)\n`F11` 全屏模式\n## 参考文档\n\n{% blockquote Emmet http://docs.emmet.io/ Emmet 官方文档 %}\n{% endblockquote %}\n{% blockquote SublimeText http://www.sublimetext.com/docs/2 SublimeText 官方文档%}\n{% endblockquote %}\n","slug":"SublimeText快捷键","published":1,"updated":"2019-12-30T17:16:22.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq25000yqyvy03xjx9wc","content":"<h2 id=\"安装Package-Control\"><a href=\"#安装Package-Control\" class=\"headerlink\" title=\"安装Package Control\"></a>安装Package Control</h2><p>官网的安装方法：<br>1、 Click the Preferences &gt; Browse Packages… menu<br>2、 Browse up a folder and then into the Installed Packages/ folder<br>3、 Download Package Control.sublime-package and copy it into the Installed Packages/ directory<br>4、 Restart Sublime Text<br>如果在 Preferences -&gt; Package Settings中见到Package Control这一项，就说明安装成功了。<br>插件使用方法：Ctrl+Shift+P 调用命令面板，我们就会找到一些以“Package Control:”开头的命令，我们常用到的就是几个 Install Package (安装扩展)、List Packages (列出全部扩展)、Remove Package (移除扩展)、Upgrade Package (升级扩展)</p>\n<p>##安装Emmet<br>强大的编辑功能，自动补全功能<br>打开sublime，mac下用command + shift + p调出命令窗口，输入install,选中package control：install package，等待1-2秒，下拉选中emmet plugin回车，等待2-3秒，重启sublime。</p>\n<h3 id=\"体验自动补全的便捷和好处\"><a href=\"#体验自动补全的便捷和好处\" class=\"headerlink\" title=\"体验自动补全的便捷和好处\"></a>体验自动补全的便捷和好处</h3><p>输入以下简写，按tab键</p>\n<h4 id=\"html-5\"><a href=\"#html-5\" class=\"headerlink\" title=\"html:5\"></a>html:5</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"html-4t\"><a href=\"#html-4t\" class=\"headerlink\" title=\"html:4t\"></a>html:4t</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span> <span class=\"meta-string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"html-4s\"><a href=\"#html-4s\" class=\"headerlink\" title=\"html:4s\"></a>html:4s</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"meta-string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"html-xxs\"><a href=\"#html-xxs\" class=\"headerlink\" title=\"html:xxs\"></a>html:xxs</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//W3C//DTD XHTML 1.1//EN\"</span> <span class=\"meta-string\">\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span> <span class=\"attr\">xml:lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"header-top-gt-ul-nav-gt-li-itemS-4-gt-a-Item\"><a href=\"#header-top-gt-ul-nav-gt-li-itemS-4-gt-a-Item\" class=\"headerlink\" title=\"header.top&gt;ul#nav&gt;li.itemS*4&gt;a{Item $}\"></a>header.top&gt;ul#nav&gt;li.itemS*4&gt;a{Item $}</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itemS\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itemS\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itemS\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itemS\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>##一般常用快捷键<br><code>Ctrl+D</code> 选词 （反复按快捷键，即可继续向下同时选中下一个相同的文本进行同时编辑）<br><code>Ctrl+G</code> 跳转到相应的行<br><code>Ctrl+J</code> 合并行（已选择需要合并的多行时）<br><code>Ctrl+L</code> 选择整行（按住-继续选择下行）<br><code>Ctrl+M</code> 光标移动至括号内开始或结束的位置<br><code>Ctrl+T</code> 词互换<br><code>Ctrl+U</code> 软撤销<br><code>Ctrl+P</code> 查找当前项目中的文件和快速搜索；输入 @ 查找文件主标题/函数；或者输入 : 跳转到文件某行；<br><code>Ctrl+R</code> 快速列出/跳转到某个函数<br><code>Ctrl+K</code> Backspace 从光标处删除至行首<br><code>Ctrl+K+B</code> 开启/关闭侧边栏<br><code>Ctrl+KK</code> 从光标处删除至行尾<br><code>Ctrl+K+T</code> 折叠属性<br><code>Ctrl+K+U</code> 改为大写<br><code>Ctrl+K+L</code> 改为小写<br><code>Ctrl+K+0</code> 展开所有<br><code>Ctrl+Enter</code> 插入行后（快速换行）<br><code>Ctrl+Tab</code> 当前窗口中的标签页切换</p>\n<p><code>Ctrl+Shift+A</code> 选择光标位置父标签对儿<br><code>Ctrl+Shift+D</code> 复制光标所在整行，插入在该行之前<br><code>ctrl+shift+F</code> 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找<br><code>Ctrl+Shift+K</code> 删除整行<br><code>Ctrl+Shift+L</code> 鼠标选中多行（按下快捷键），即可同时编辑这些行<br><code>Ctrl+Shift+M</code> 选择括号内的内容（按住-继续选择父括号）<br><code>Ctrl+Shift+P</code> 打开命令面板<br><code>Ctrl+Shift+/</code> 注释已选择内容<br><code>Ctrl+Shift+↑</code>可以移动此行代码，与上行互换<br><code>Ctrl+Shift+↓</code>可以移动此行代码，与下行互换<br><code>Ctrl+Shift+[</code> 折叠代码<br><code>Ctrl+Shift+]</code> 展开代码<br><code>Ctrl+Shift+Enter</code> 光标前插入行<br><code>Ctrl+PageDown</code> <code>Ctrl+PageUp</code> 文件按开启的前后顺序切换</p>\n<p><code>Ctrl+Z</code> 撤销<br><code>Ctrl+Y</code> 恢复撤销<br><code>Ctrl+F2</code> 设置书签<br><code>Ctrl+/</code> 注释整行（如已选择内容，同“Ctrl+Shift+/”效果）<br><code>Ctrl+鼠标左键</code> 可以同时选择要编辑的多处文本</p>\n<p><code>Shift+鼠标右键</code>（或使用鼠标中键）可以用鼠标进行竖向多行选择<br><code>Shift+F2</code> 上一个书签<br><code>Shift+Tab</code> 去除缩进<br><code>Alt+Shift+1</code>（非小键盘）窗口分屏，恢复默认1屏<br><code>Alt+Shift+2</code> 左右分屏-2列<br><code>Alt+Shift+3</code> 左右分屏-3列<br><code>Alt+Shift+4</code> 左右分屏-4列<br><code>Alt+Shift+5</code> 等分4屏<br><code>Alt+Shift+8</code> 垂直分屏-2屏<br><code>Alt+Shift+9</code> 垂直分屏-3屏</p>\n<p><code>Alt+.</code> 闭合当前标签<br><code>Alt+F3</code> 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑</p>\n<p><code>Tab</code> 缩进 自动完成<br><code>F2</code> 下一个书签<br><code>F6</code> 检测语法错误<br><code>F9</code> 行排序(按a-z)<br><code>F11</code> 全屏模式</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote><footer><strong>Emmet</strong><cite><a href=\"http://docs.emmet.io/\" target=\"_blank\" rel=\"noopener\">Emmet 官方文档</a></cite></footer></blockquote>\n<blockquote><footer><strong>SublimeText</strong><cite><a href=\"http://www.sublimetext.com/docs/2\" target=\"_blank\" rel=\"noopener\">SublimeText 官方文档</a></cite></footer></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装Package-Control\"><a href=\"#安装Package-Control\" class=\"headerlink\" title=\"安装Package Control\"></a>安装Package Control</h2><p>官网的安装方法：<br>1、 Click the Preferences &gt; Browse Packages… menu<br>2、 Browse up a folder and then into the Installed Packages/ folder<br>3、 Download Package Control.sublime-package and copy it into the Installed Packages/ directory<br>4、 Restart Sublime Text<br>如果在 Preferences -&gt; Package Settings中见到Package Control这一项，就说明安装成功了。<br>插件使用方法：Ctrl+Shift+P 调用命令面板，我们就会找到一些以“Package Control:”开头的命令，我们常用到的就是几个 Install Package (安装扩展)、List Packages (列出全部扩展)、Remove Package (移除扩展)、Upgrade Package (升级扩展)</p>\n<p>##安装Emmet<br>强大的编辑功能，自动补全功能<br>打开sublime，mac下用command + shift + p调出命令窗口，输入install,选中package control：install package，等待1-2秒，下拉选中emmet plugin回车，等待2-3秒，重启sublime。</p>\n<h3 id=\"体验自动补全的便捷和好处\"><a href=\"#体验自动补全的便捷和好处\" class=\"headerlink\" title=\"体验自动补全的便捷和好处\"></a>体验自动补全的便捷和好处</h3><p>输入以下简写，按tab键</p>\n<h4 id=\"html-5\"><a href=\"#html-5\" class=\"headerlink\" title=\"html:5\"></a>html:5</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"html-4t\"><a href=\"#html-4t\" class=\"headerlink\" title=\"html:4t\"></a>html:4t</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span> <span class=\"meta-string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"html-4s\"><a href=\"#html-4s\" class=\"headerlink\" title=\"html:4s\"></a>html:4s</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"meta-string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"html-xxs\"><a href=\"#html-xxs\" class=\"headerlink\" title=\"html:xxs\"></a>html:xxs</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//W3C//DTD XHTML 1.1//EN\"</span> <span class=\"meta-string\">\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span> <span class=\"attr\">xml:lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"header-top-gt-ul-nav-gt-li-itemS-4-gt-a-Item\"><a href=\"#header-top-gt-ul-nav-gt-li-itemS-4-gt-a-Item\" class=\"headerlink\" title=\"header.top&gt;ul#nav&gt;li.itemS*4&gt;a{Item $}\"></a>header.top&gt;ul#nav&gt;li.itemS*4&gt;a{Item $}</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itemS\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itemS\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itemS\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itemS\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>##一般常用快捷键<br><code>Ctrl+D</code> 选词 （反复按快捷键，即可继续向下同时选中下一个相同的文本进行同时编辑）<br><code>Ctrl+G</code> 跳转到相应的行<br><code>Ctrl+J</code> 合并行（已选择需要合并的多行时）<br><code>Ctrl+L</code> 选择整行（按住-继续选择下行）<br><code>Ctrl+M</code> 光标移动至括号内开始或结束的位置<br><code>Ctrl+T</code> 词互换<br><code>Ctrl+U</code> 软撤销<br><code>Ctrl+P</code> 查找当前项目中的文件和快速搜索；输入 @ 查找文件主标题/函数；或者输入 : 跳转到文件某行；<br><code>Ctrl+R</code> 快速列出/跳转到某个函数<br><code>Ctrl+K</code> Backspace 从光标处删除至行首<br><code>Ctrl+K+B</code> 开启/关闭侧边栏<br><code>Ctrl+KK</code> 从光标处删除至行尾<br><code>Ctrl+K+T</code> 折叠属性<br><code>Ctrl+K+U</code> 改为大写<br><code>Ctrl+K+L</code> 改为小写<br><code>Ctrl+K+0</code> 展开所有<br><code>Ctrl+Enter</code> 插入行后（快速换行）<br><code>Ctrl+Tab</code> 当前窗口中的标签页切换</p>\n<p><code>Ctrl+Shift+A</code> 选择光标位置父标签对儿<br><code>Ctrl+Shift+D</code> 复制光标所在整行，插入在该行之前<br><code>ctrl+shift+F</code> 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找<br><code>Ctrl+Shift+K</code> 删除整行<br><code>Ctrl+Shift+L</code> 鼠标选中多行（按下快捷键），即可同时编辑这些行<br><code>Ctrl+Shift+M</code> 选择括号内的内容（按住-继续选择父括号）<br><code>Ctrl+Shift+P</code> 打开命令面板<br><code>Ctrl+Shift+/</code> 注释已选择内容<br><code>Ctrl+Shift+↑</code>可以移动此行代码，与上行互换<br><code>Ctrl+Shift+↓</code>可以移动此行代码，与下行互换<br><code>Ctrl+Shift+[</code> 折叠代码<br><code>Ctrl+Shift+]</code> 展开代码<br><code>Ctrl+Shift+Enter</code> 光标前插入行<br><code>Ctrl+PageDown</code> <code>Ctrl+PageUp</code> 文件按开启的前后顺序切换</p>\n<p><code>Ctrl+Z</code> 撤销<br><code>Ctrl+Y</code> 恢复撤销<br><code>Ctrl+F2</code> 设置书签<br><code>Ctrl+/</code> 注释整行（如已选择内容，同“Ctrl+Shift+/”效果）<br><code>Ctrl+鼠标左键</code> 可以同时选择要编辑的多处文本</p>\n<p><code>Shift+鼠标右键</code>（或使用鼠标中键）可以用鼠标进行竖向多行选择<br><code>Shift+F2</code> 上一个书签<br><code>Shift+Tab</code> 去除缩进<br><code>Alt+Shift+1</code>（非小键盘）窗口分屏，恢复默认1屏<br><code>Alt+Shift+2</code> 左右分屏-2列<br><code>Alt+Shift+3</code> 左右分屏-3列<br><code>Alt+Shift+4</code> 左右分屏-4列<br><code>Alt+Shift+5</code> 等分4屏<br><code>Alt+Shift+8</code> 垂直分屏-2屏<br><code>Alt+Shift+9</code> 垂直分屏-3屏</p>\n<p><code>Alt+.</code> 闭合当前标签<br><code>Alt+F3</code> 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑</p>\n<p><code>Tab</code> 缩进 自动完成<br><code>F2</code> 下一个书签<br><code>F6</code> 检测语法错误<br><code>F9</code> 行排序(按a-z)<br><code>F11</code> 全屏模式</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote><footer><strong>Emmet</strong><cite><a href=\"http://docs.emmet.io/\" target=\"_blank\" rel=\"noopener\">Emmet 官方文档</a></cite></footer></blockquote>\n<blockquote><footer><strong>SublimeText</strong><cite><a href=\"http://www.sublimetext.com/docs/2\" target=\"_blank\" rel=\"noopener\">SublimeText 官方文档</a></cite></footer></blockquote>\n"},{"title":"Summarize for Creating Webstore Project","date":"2015-07-06T16:06:53.000Z","alias":"java/index.html","_content":"\nwebstore是本人自己在本地建立的一个项目，主要是用来做测试，目的是用来研究SSH框架的使用，以下是一点点我做这个项目的经验，留下以备不时之需\n## Oracle\n- **Oracle新建用户、角色，授权，建表空间**\n\n\t*创建用户*\n\toracle内部有两个建好的用户：system和sys。用户可直接登录到system用户以创建其他用户，因为system具有创建别的用户的权限。 \n\t在安装oracle时，用户或系统管理员首先可以为自己建立一个用户：\n\t```sql\n\t-- for new user\n\tcreate user linbao identified by pwd;  \n\t-- for updating an exist user\n\talter user linbao identified by 123;\n\t-- when user is logged in , use this command to alert his password\n\tpassword\n\t```\n\t其他可用用户：scott/tiger\n\t*删除用户*\n\t```sql\n\tdrop user linbao\n\t-- 如果用户拥有对象，则不能直接删除，否则将返回一个错误值。\n\t--指定关键字cascade，可删除用户所有的对象，然后再删除用户。下面的例子用来删除用户与其对象：\n　　drop user linbao cascade;\n\t```\n\t*Oracle中有3种标准角色*\n\t `connect role`(连接角色)   临时用户，特别是那些不需要建表的用户\n\n\t`resource role`(资源角色)  提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)\n\t`dba role`(数据库管理员角色)  拥有所有的系统权限\n\t*grant(授权)命令*\n\t```sql\n\tgrant connect, resource to linbao;\n\t```\n\t*revoke(撤消)权限*\n\t```sql\n\trevoke connect, resource from linbao;\n\t```\n\t*删除表的tip：*\n\t```sql\n\t truncate table 表名  \n\t ```\n\t 因为用drop table，delete * from 表名时，tablespace表空间该表的占用空间并未释放，反复几次drop，delete操作后，该tablespace上百兆的空间就被耗光了。\n- **连接数据库**\n\t打开SQLPLUS，输入用户名密码 切换用户\n\t`as dba` conn /as dba;\n\t`as user` conn as username/password\n- **level** 在oracle中是关键字，不能用作表字段**\n- **在`oracle`中与`mysql`不相同的语句整合：**\n> `mysql`  show tables; `oracle` select unique tname from col; \n> `oracle` 不支持的主键生成略：generationType.IDENTITY,但generationType.SEQUENCE支持\n- **oracle中建立类似mysql的auto_increment递增字段 **\n```sql\n-- 1. 新建一张用户表\n\tcreate table tb_user (\n        id number(10,0) not null,\n        age number(10,0),\n        email varchar2(255 char),\n        isActive number(10,0),\n        name varchar2(255 char),\n        password varchar2(255 char),\n        sex number(10,0),\n        username varchar2(255 char),\n        primary key (id)\n    );\n-- 2. 新建一个sequence序列\n\tCREATE SEQUENCE test_Sequence\n \tINCREMENT BY 1   -- 每次加几个  \n    START WITH 1     -- 从1开始计数  \n    NOMAXVALUE       -- 不设置最大值  \n    NOCYCLE ;         -- 一直累加，不循环\n-- 3. 建立一个触发器\n    create or replace trigger TEST_TRIGGER\n    before insert\n    on TB_USER\n    for each row\n    begin\n    select TEST_TRIGGER.nextval into:NEW.id from dual;\n    end;\n    /\n\n```\n- **Oracle 连接url套拉字符串问题:**\n我的本地连接配置如下：\n```java\njdbc.driverClassName=oracle.jdbc.driver.OracleDriver\njdbc.url=jdbc:oracle:thin:@localhost:1521:DERRICK\njdbc.username=derrick\njdbc.password=root\n```\n\t按网上后所说的， \n1. 端口号1521后的DERRICK是数据库名称,但这样说不完全对\n2. 最后的DERRICK是 service_name，即这个service_name是在创建数据库时系统为其分配的SID名字，可能会与你设定的数据库名不同，需要自己去查看\n`Windows` : window+r -> regedit -> HKEY_LOCAL_MACHINE\\SOFTWARE\\ORACLE\\KEY_OraDb11g_home1/ORACLE_SID\n`LINUX` : env\n所以我的url为\n`jdbc:oracle:thin:@localhost:1521:DERRICK`\n- **Oracle 查看当前用户名下所有序列名**\n```sql\nselect SEQUENCE_NAME from user_sequences;\n```\n- **查看某个sequence的当前值,假设sequence名字为test_seq**\n```sql\nselect test_seq.currval from dual;\n```\n- **表管理**\n```sql\nselect table_name from user_tables; --查询当前用户名下的所有表名\nselect table_name from all_tables; --查询数据库所有表名\ndesc table_name; --查看表结构\nalter table (表名) add (列名 数据类型); --加列\nalter table (表名) modify (列名 数据类型); -- 更改列\nalter table (表名) rename column (当前列名) to (新列名); -- 更改列名\nalter table (表名) drop column (列名); --删除列\nalter table (当前表名) rename to (新表名);--更改表名\n```\n- **Oracle 清屏命令**\noracle清屏命令汇集：\n1、同时按SHIFT和DELETE键，然后点OK即可清屏 。\n2、若在window窗口下sqlplus 中清屏命令：host cls 或是clear screen 或只是4位clea scre。\n3、若在dos的窗口下进入sql/plus就要用clear SCR。\n\n\n- **Oracle的SQL集合**\n{% blockquote sutku http://blog.csdn.net/sutku/article/details/7900876  Oracle的SQL语句大全 %}\n Oracle的SQL语句大全（摘）-- 复杂.\n{% endblockquote %}\n\n## Spring 4.x\n\n### Spring声明式事务配置管理方法\n- Spring可以用xml配置能配符来匹配需要事务的业务方法，基于约束先于配置的法则，比如方法开头以add,update,delete,get云云\n- 也可以使用注解的方式为某些方法添加事务，两者选一样即可\nxml配置如下 \n![](http://7xiztk.com1.z0.glb.clouddn.com/201108281004069849.png)\n{% blockquote irelandken的专栏 http://blog.csdn.net/irelandken/article/details/7193123 Spring @Transactional声明式事务管理  %}\nSpring @Transactional声明式事务管理  getCurrentSession\n{% endblockquote %}\n## Hibernate 4.x\n{% blockquote Red Hat, Inc. https://docs.jboss.org/hibernate/orm/4.0/javadocs/deprecated-list.html Deprecated API %}\nDeprecated API List(Hibernate java doc ).\n{% endblockquote %}\n\n{% blockquote Blex http://www.360doc.com/content/11/0816/01/987036_140679068.shtml Hibernate Annotation API %}\nHibernate Annotation API\n{% endblockquote %}\n```java\n@Entity\n@Table(name=\"tb_user\")\n@SequenceGenerator(name=\"seqUser\",sequenceName=\"seq_tb_user\",allocationSize=1)\npublic class User implements Serializable{\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\t@Id\n\t@GeneratedValue(strategy=GenerationType.SEQUENCE,generator=\"seqUser\")\n\tprivate Integer id;\n\tprivate String name;\n\tprivate Integer age;\n\tprivate Integer sex;\n\tprivate String username;\n\tprivate String password;\n\tprivate String email;\n\tprivate Integer isActive;\n\t@ManyToMany\n\t@JoinTable(name=\"tb_role_user\",\n\t\tjoinColumns={@JoinColumn(name=\"user_id\",referencedColumnName=\"id\")},\n\t\tinverseJoinColumns={@JoinColumn(name=\"role_id\",referencedColumnName=\"id\")}\n\t)\n\tprivate Set<Role> roles = new HashSet<Role>(0);\n}\n\n\t//getters and setters are ignored ...\n```\n```java\n@Entity\n@Table(name=\"tb_role\")\n@SequenceGenerator(name=\"seqRole\",sequenceName=\"seq_tb_role\",allocationSize=1)\npublic class Role implements Serializable{\n\t@Id\n\t@GeneratedValue(strategy=GenerationType.SEQUENCE,generator=\"seqRole\")//seqRole要对应@SequenceGenerator中的name\n\tprivate Integer id;\n\tprivate int roleLevel;\n\tprivate String name;\n\tprivate String description;\n\t@ManyToMany\n\t@JoinTable(name=\"tb_role_resource\",\n\t\tjoinColumns={@JoinColumn(name=\"role_id\",referencedColumnName=\"id\")},\n\t\tinverseJoinColumns={@JoinColumn(name=\"res_id\",referencedColumnName=\"id\")}\n\t)\n\tprivate Set<Resources> resources = new HashSet<Resources>(0);\n\n```\n### hibernate 的id生成策略问题\n- 若业务比较繁忙的表，建议一个表创建一个序列，如上所示\n- 若查询修改不是很频繁的表可以多个表共享一个序列，配置类时不在id上加generator就可以\n- `allocationSize=1`设定主键自增1\n\n## Struts 2.x\n### ActionForward\nActionForward是 Struts的核心类之一，其基类仅有4个属性`name / path / redirect / classname`。在基于Struts的Web应用程序开发过程中，Action操作完毕后程序会通过Struts的配置文件struts- config.xml链接到指定的ActionForward，传到Struts的核心类ActionServlet，ActionServlet使用 ActionForward提供的路径，将控制传递给下一个JSP或类。ActionForward控制接下来程序的走向。ActionForward代表一个应用的URI，它包括路径和参数，例如：`path=”/login.jsp”` 或`path=“/modify.do?method=edit&id=10”` ActionForward的参数除了在struts-config.xml和页面中设置外，还可以通过在Action类中添加参数，或重新在Action中创建一个ActionForward。\nactionForward的作用：封装转发路径，通俗点说就是说完成页面的跳转和转向。那它既然是转向，到底是转发还是重定向呢？默认的情况下，actionForward采用的是转发的方式进行页面跳转的。\n顺便说一下 转发和重定向的区别。最大的区别就是转发的时候，页面的url地址不变，而重定向的时候页面的url地址会发生变化。简单说明一下原因，因为转发的时候是采用的同一个request（请求），既然页面跳转前后是同一个request，页面url当然不会变了；而重定向采用的是2个request，因为是二次转发页面跳转前后的url当然会不同了。\n既然actionForward跳转的方式默认的是转发，那如果我非要用重定向的方式，该如何设置呢？恩，这很简单，大家都在struts-config.xml做过actionForward的配置吧，比如这句     `<forward name=”login” path=”/login.jsp” redirect=”true”/> `\n## Juint Test 4.x\n### Junit Test 输出建表语句\n```java\npublic class HibernateSchemeExportTest {\n\n\tpublic static LocalSessionFactoryBean localSessionFactory = null;\n\tpublic void test() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t@BeforeClass\n\tpublic static void beforeClass(){\n\t\tApplicationContext ctx = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\tlocalSessionFactory = (LocalSessionFactoryBean) ctx.getBean(\"&sessionFactory\");\n\t}\n\t@Test\n\tpublic void testSchemaEcport(){\n\t\t\n\t\tConfiguration conf = localSessionFactory.getConfiguration();\n\t\tnew SchemaExport(conf).create(true,true);\n\t}\n\t@AfterClass\n\tpublic static void destroy(){\n\t\tlocalSessionFactory.destroy();\n\t}\n}\n```\n## 其他\n### maven中net.sf.json报错的解决方法：加编译器版本号\n```xml\n<dependency>\n    <groupId>net.sf.json-lib</groupId>\n    <artifactId>json-lib</artifactId>\n    <version>2.4</version>\n    <classifier>jdk15</classifier>\n</dependency>\n```\n### struts2 输出 JSON\n{% blockquote 杨胜寒 http://www.open-open.com/lib/view/open1325518231062.html Struts2返回JSON数据的具体应用范例  %}\n深入了解Struts2返回JSON数据的原理及具体应用范例\n{% endblockquote %}\n### JVM调优\n{% blockquote 神勇小白鼠-OSChina http://my.oschina.net/shootercn/blog/15393% JVM调优总结 %}\nJVM调优总结\n{% endblockquote %}\n{% blockquote 360doc http://www.360doc.com/content/12/0113/08/1073512_179088229.shtml JVM 调优总结 %}\nJVM 调优总结\n{% endblockquote %}\n","source":"_posts/Summarize-for-Creating-Webstore-Project.md","raw":"title: \"Summarize for Creating Webstore Project\"\ndate: 2015-07-07 00:06:53\nalias: java/index.html\ntags: 笔记\ncategories: Project\n\n---\n\nwebstore是本人自己在本地建立的一个项目，主要是用来做测试，目的是用来研究SSH框架的使用，以下是一点点我做这个项目的经验，留下以备不时之需\n## Oracle\n- **Oracle新建用户、角色，授权，建表空间**\n\n\t*创建用户*\n\toracle内部有两个建好的用户：system和sys。用户可直接登录到system用户以创建其他用户，因为system具有创建别的用户的权限。 \n\t在安装oracle时，用户或系统管理员首先可以为自己建立一个用户：\n\t```sql\n\t-- for new user\n\tcreate user linbao identified by pwd;  \n\t-- for updating an exist user\n\talter user linbao identified by 123;\n\t-- when user is logged in , use this command to alert his password\n\tpassword\n\t```\n\t其他可用用户：scott/tiger\n\t*删除用户*\n\t```sql\n\tdrop user linbao\n\t-- 如果用户拥有对象，则不能直接删除，否则将返回一个错误值。\n\t--指定关键字cascade，可删除用户所有的对象，然后再删除用户。下面的例子用来删除用户与其对象：\n　　drop user linbao cascade;\n\t```\n\t*Oracle中有3种标准角色*\n\t `connect role`(连接角色)   临时用户，特别是那些不需要建表的用户\n\n\t`resource role`(资源角色)  提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)\n\t`dba role`(数据库管理员角色)  拥有所有的系统权限\n\t*grant(授权)命令*\n\t```sql\n\tgrant connect, resource to linbao;\n\t```\n\t*revoke(撤消)权限*\n\t```sql\n\trevoke connect, resource from linbao;\n\t```\n\t*删除表的tip：*\n\t```sql\n\t truncate table 表名  \n\t ```\n\t 因为用drop table，delete * from 表名时，tablespace表空间该表的占用空间并未释放，反复几次drop，delete操作后，该tablespace上百兆的空间就被耗光了。\n- **连接数据库**\n\t打开SQLPLUS，输入用户名密码 切换用户\n\t`as dba` conn /as dba;\n\t`as user` conn as username/password\n- **level** 在oracle中是关键字，不能用作表字段**\n- **在`oracle`中与`mysql`不相同的语句整合：**\n> `mysql`  show tables; `oracle` select unique tname from col; \n> `oracle` 不支持的主键生成略：generationType.IDENTITY,但generationType.SEQUENCE支持\n- **oracle中建立类似mysql的auto_increment递增字段 **\n```sql\n-- 1. 新建一张用户表\n\tcreate table tb_user (\n        id number(10,0) not null,\n        age number(10,0),\n        email varchar2(255 char),\n        isActive number(10,0),\n        name varchar2(255 char),\n        password varchar2(255 char),\n        sex number(10,0),\n        username varchar2(255 char),\n        primary key (id)\n    );\n-- 2. 新建一个sequence序列\n\tCREATE SEQUENCE test_Sequence\n \tINCREMENT BY 1   -- 每次加几个  \n    START WITH 1     -- 从1开始计数  \n    NOMAXVALUE       -- 不设置最大值  \n    NOCYCLE ;         -- 一直累加，不循环\n-- 3. 建立一个触发器\n    create or replace trigger TEST_TRIGGER\n    before insert\n    on TB_USER\n    for each row\n    begin\n    select TEST_TRIGGER.nextval into:NEW.id from dual;\n    end;\n    /\n\n```\n- **Oracle 连接url套拉字符串问题:**\n我的本地连接配置如下：\n```java\njdbc.driverClassName=oracle.jdbc.driver.OracleDriver\njdbc.url=jdbc:oracle:thin:@localhost:1521:DERRICK\njdbc.username=derrick\njdbc.password=root\n```\n\t按网上后所说的， \n1. 端口号1521后的DERRICK是数据库名称,但这样说不完全对\n2. 最后的DERRICK是 service_name，即这个service_name是在创建数据库时系统为其分配的SID名字，可能会与你设定的数据库名不同，需要自己去查看\n`Windows` : window+r -> regedit -> HKEY_LOCAL_MACHINE\\SOFTWARE\\ORACLE\\KEY_OraDb11g_home1/ORACLE_SID\n`LINUX` : env\n所以我的url为\n`jdbc:oracle:thin:@localhost:1521:DERRICK`\n- **Oracle 查看当前用户名下所有序列名**\n```sql\nselect SEQUENCE_NAME from user_sequences;\n```\n- **查看某个sequence的当前值,假设sequence名字为test_seq**\n```sql\nselect test_seq.currval from dual;\n```\n- **表管理**\n```sql\nselect table_name from user_tables; --查询当前用户名下的所有表名\nselect table_name from all_tables; --查询数据库所有表名\ndesc table_name; --查看表结构\nalter table (表名) add (列名 数据类型); --加列\nalter table (表名) modify (列名 数据类型); -- 更改列\nalter table (表名) rename column (当前列名) to (新列名); -- 更改列名\nalter table (表名) drop column (列名); --删除列\nalter table (当前表名) rename to (新表名);--更改表名\n```\n- **Oracle 清屏命令**\noracle清屏命令汇集：\n1、同时按SHIFT和DELETE键，然后点OK即可清屏 。\n2、若在window窗口下sqlplus 中清屏命令：host cls 或是clear screen 或只是4位clea scre。\n3、若在dos的窗口下进入sql/plus就要用clear SCR。\n\n\n- **Oracle的SQL集合**\n{% blockquote sutku http://blog.csdn.net/sutku/article/details/7900876  Oracle的SQL语句大全 %}\n Oracle的SQL语句大全（摘）-- 复杂.\n{% endblockquote %}\n\n## Spring 4.x\n\n### Spring声明式事务配置管理方法\n- Spring可以用xml配置能配符来匹配需要事务的业务方法，基于约束先于配置的法则，比如方法开头以add,update,delete,get云云\n- 也可以使用注解的方式为某些方法添加事务，两者选一样即可\nxml配置如下 \n![](http://7xiztk.com1.z0.glb.clouddn.com/201108281004069849.png)\n{% blockquote irelandken的专栏 http://blog.csdn.net/irelandken/article/details/7193123 Spring @Transactional声明式事务管理  %}\nSpring @Transactional声明式事务管理  getCurrentSession\n{% endblockquote %}\n## Hibernate 4.x\n{% blockquote Red Hat, Inc. https://docs.jboss.org/hibernate/orm/4.0/javadocs/deprecated-list.html Deprecated API %}\nDeprecated API List(Hibernate java doc ).\n{% endblockquote %}\n\n{% blockquote Blex http://www.360doc.com/content/11/0816/01/987036_140679068.shtml Hibernate Annotation API %}\nHibernate Annotation API\n{% endblockquote %}\n```java\n@Entity\n@Table(name=\"tb_user\")\n@SequenceGenerator(name=\"seqUser\",sequenceName=\"seq_tb_user\",allocationSize=1)\npublic class User implements Serializable{\n\t\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\t@Id\n\t@GeneratedValue(strategy=GenerationType.SEQUENCE,generator=\"seqUser\")\n\tprivate Integer id;\n\tprivate String name;\n\tprivate Integer age;\n\tprivate Integer sex;\n\tprivate String username;\n\tprivate String password;\n\tprivate String email;\n\tprivate Integer isActive;\n\t@ManyToMany\n\t@JoinTable(name=\"tb_role_user\",\n\t\tjoinColumns={@JoinColumn(name=\"user_id\",referencedColumnName=\"id\")},\n\t\tinverseJoinColumns={@JoinColumn(name=\"role_id\",referencedColumnName=\"id\")}\n\t)\n\tprivate Set<Role> roles = new HashSet<Role>(0);\n}\n\n\t//getters and setters are ignored ...\n```\n```java\n@Entity\n@Table(name=\"tb_role\")\n@SequenceGenerator(name=\"seqRole\",sequenceName=\"seq_tb_role\",allocationSize=1)\npublic class Role implements Serializable{\n\t@Id\n\t@GeneratedValue(strategy=GenerationType.SEQUENCE,generator=\"seqRole\")//seqRole要对应@SequenceGenerator中的name\n\tprivate Integer id;\n\tprivate int roleLevel;\n\tprivate String name;\n\tprivate String description;\n\t@ManyToMany\n\t@JoinTable(name=\"tb_role_resource\",\n\t\tjoinColumns={@JoinColumn(name=\"role_id\",referencedColumnName=\"id\")},\n\t\tinverseJoinColumns={@JoinColumn(name=\"res_id\",referencedColumnName=\"id\")}\n\t)\n\tprivate Set<Resources> resources = new HashSet<Resources>(0);\n\n```\n### hibernate 的id生成策略问题\n- 若业务比较繁忙的表，建议一个表创建一个序列，如上所示\n- 若查询修改不是很频繁的表可以多个表共享一个序列，配置类时不在id上加generator就可以\n- `allocationSize=1`设定主键自增1\n\n## Struts 2.x\n### ActionForward\nActionForward是 Struts的核心类之一，其基类仅有4个属性`name / path / redirect / classname`。在基于Struts的Web应用程序开发过程中，Action操作完毕后程序会通过Struts的配置文件struts- config.xml链接到指定的ActionForward，传到Struts的核心类ActionServlet，ActionServlet使用 ActionForward提供的路径，将控制传递给下一个JSP或类。ActionForward控制接下来程序的走向。ActionForward代表一个应用的URI，它包括路径和参数，例如：`path=”/login.jsp”` 或`path=“/modify.do?method=edit&id=10”` ActionForward的参数除了在struts-config.xml和页面中设置外，还可以通过在Action类中添加参数，或重新在Action中创建一个ActionForward。\nactionForward的作用：封装转发路径，通俗点说就是说完成页面的跳转和转向。那它既然是转向，到底是转发还是重定向呢？默认的情况下，actionForward采用的是转发的方式进行页面跳转的。\n顺便说一下 转发和重定向的区别。最大的区别就是转发的时候，页面的url地址不变，而重定向的时候页面的url地址会发生变化。简单说明一下原因，因为转发的时候是采用的同一个request（请求），既然页面跳转前后是同一个request，页面url当然不会变了；而重定向采用的是2个request，因为是二次转发页面跳转前后的url当然会不同了。\n既然actionForward跳转的方式默认的是转发，那如果我非要用重定向的方式，该如何设置呢？恩，这很简单，大家都在struts-config.xml做过actionForward的配置吧，比如这句     `<forward name=”login” path=”/login.jsp” redirect=”true”/> `\n## Juint Test 4.x\n### Junit Test 输出建表语句\n```java\npublic class HibernateSchemeExportTest {\n\n\tpublic static LocalSessionFactoryBean localSessionFactory = null;\n\tpublic void test() {\n\t\tfail(\"Not yet implemented\");\n\t}\n\t@BeforeClass\n\tpublic static void beforeClass(){\n\t\tApplicationContext ctx = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\tlocalSessionFactory = (LocalSessionFactoryBean) ctx.getBean(\"&sessionFactory\");\n\t}\n\t@Test\n\tpublic void testSchemaEcport(){\n\t\t\n\t\tConfiguration conf = localSessionFactory.getConfiguration();\n\t\tnew SchemaExport(conf).create(true,true);\n\t}\n\t@AfterClass\n\tpublic static void destroy(){\n\t\tlocalSessionFactory.destroy();\n\t}\n}\n```\n## 其他\n### maven中net.sf.json报错的解决方法：加编译器版本号\n```xml\n<dependency>\n    <groupId>net.sf.json-lib</groupId>\n    <artifactId>json-lib</artifactId>\n    <version>2.4</version>\n    <classifier>jdk15</classifier>\n</dependency>\n```\n### struts2 输出 JSON\n{% blockquote 杨胜寒 http://www.open-open.com/lib/view/open1325518231062.html Struts2返回JSON数据的具体应用范例  %}\n深入了解Struts2返回JSON数据的原理及具体应用范例\n{% endblockquote %}\n### JVM调优\n{% blockquote 神勇小白鼠-OSChina http://my.oschina.net/shootercn/blog/15393% JVM调优总结 %}\nJVM调优总结\n{% endblockquote %}\n{% blockquote 360doc http://www.360doc.com/content/12/0113/08/1073512_179088229.shtml JVM 调优总结 %}\nJVM 调优总结\n{% endblockquote %}\n","slug":"Summarize-for-Creating-Webstore-Project","published":1,"updated":"2019-12-30T17:16:22.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq270011qyvya1zc7r33","content":"<p>webstore是本人自己在本地建立的一个项目，主要是用来做测试，目的是用来研究SSH框架的使用，以下是一点点我做这个项目的经验，留下以备不时之需</p>\n<h2 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h2><ul>\n<li><p><strong>Oracle新建用户、角色，授权，建表空间</strong></p>\n<p>  <em>创建用户</em><br>  oracle内部有两个建好的用户：system和sys。用户可直接登录到system用户以创建其他用户，因为system具有创建别的用户的权限。<br>  在安装oracle时，用户或系统管理员首先可以为自己建立一个用户：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- for new user</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> linbao <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> pwd;  </span><br><span class=\"line\"><span class=\"comment\">-- for updating an exist user</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> linbao <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">-- when user is logged in , use this command to alert his password</span></span><br><span class=\"line\">password</span><br></pre></td></tr></table></figure>\n<p>  其他可用用户：scott/tiger<br>  <em>删除用户</em></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> linbao</span><br><span class=\"line\"><span class=\"comment\">-- 如果用户拥有对象，则不能直接删除，否则将返回一个错误值。</span></span><br><span class=\"line\"><span class=\"comment\">--指定关键字cascade，可删除用户所有的对象，然后再删除用户。下面的例子用来删除用户与其对象：</span></span><br><span class=\"line\">　　<span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> linbao <span class=\"keyword\">cascade</span>;</span><br></pre></td></tr></table></figure>\n<p>  <em>Oracle中有3种标准角色</em><br>   <code>connect role</code>(连接角色)   临时用户，特别是那些不需要建表的用户</p>\n<p>  <code>resource role</code>(资源角色)  提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)<br>  <code>dba role</code>(数据库管理员角色)  拥有所有的系统权限<br>  <em>grant(授权)命令</em></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">connect</span>, <span class=\"keyword\">resource</span> <span class=\"keyword\">to</span> linbao;</span><br></pre></td></tr></table></figure>\n<p>  <em>revoke(撤消)权限</em></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"keyword\">connect</span>, <span class=\"keyword\">resource</span> <span class=\"keyword\">from</span> linbao;</span><br></pre></td></tr></table></figure>\n<p>  <em>删除表的tip：</em></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> 表名</span><br></pre></td></tr></table></figure>\n<p>   因为用drop table，delete * from 表名时，tablespace表空间该表的占用空间并未释放，反复几次drop，delete操作后，该tablespace上百兆的空间就被耗光了。</p>\n</li>\n<li><strong>连接数据库</strong><br>  打开SQLPLUS，输入用户名密码 切换用户<br>  <code>as dba</code> conn /as dba;<br>  <code>as user</code> conn as username/password</li>\n<li><strong>level</strong> 在oracle中是关键字，不能用作表字段**</li>\n<li><strong>在<code>oracle</code>中与<code>mysql</code>不相同的语句整合：</strong><blockquote>\n<p><code>mysql</code>  show tables; <code>oracle</code> select unique tname from col;<br><code>oracle</code> 不支持的主键生成略：generationType.IDENTITY,但generationType.SEQUENCE支持</p>\n</blockquote>\n</li>\n<li><p><strong>oracle中建立类似mysql的auto_increment递增字段 </strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. 新建一张用户表</span></span><br><span class=\"line\">\t<span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_user (</span><br><span class=\"line\">        <span class=\"keyword\">id</span> <span class=\"built_in\">number</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">        age <span class=\"built_in\">number</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>),</span><br><span class=\"line\">        email <span class=\"built_in\">varchar2</span>(<span class=\"number\">255</span> <span class=\"built_in\">char</span>),</span><br><span class=\"line\">        isActive <span class=\"built_in\">number</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>),</span><br><span class=\"line\">        <span class=\"keyword\">name</span> <span class=\"built_in\">varchar2</span>(<span class=\"number\">255</span> <span class=\"built_in\">char</span>),</span><br><span class=\"line\">        <span class=\"keyword\">password</span> <span class=\"built_in\">varchar2</span>(<span class=\"number\">255</span> <span class=\"built_in\">char</span>),</span><br><span class=\"line\">        sex <span class=\"built_in\">number</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>),</span><br><span class=\"line\">        username <span class=\"built_in\">varchar2</span>(<span class=\"number\">255</span> <span class=\"built_in\">char</span>),</span><br><span class=\"line\">        primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\"><span class=\"comment\">-- 2. 新建一个sequence序列</span></span><br><span class=\"line\">\t<span class=\"keyword\">CREATE</span> <span class=\"keyword\">SEQUENCE</span> test_Sequence</span><br><span class=\"line\"> \t<span class=\"keyword\">INCREMENT</span> <span class=\"keyword\">BY</span> <span class=\"number\">1</span>   <span class=\"comment\">-- 每次加几个  </span></span><br><span class=\"line\">    <span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span> <span class=\"number\">1</span>     <span class=\"comment\">-- 从1开始计数  </span></span><br><span class=\"line\">    <span class=\"keyword\">NOMAXVALUE</span>       <span class=\"comment\">-- 不设置最大值  </span></span><br><span class=\"line\">    <span class=\"keyword\">NOCYCLE</span> ;         <span class=\"comment\">-- 一直累加，不循环</span></span><br><span class=\"line\"><span class=\"comment\">-- 3. 建立一个触发器</span></span><br><span class=\"line\">    <span class=\"keyword\">create</span> <span class=\"keyword\">or</span> <span class=\"keyword\">replace</span> <span class=\"keyword\">trigger</span> TEST_TRIGGER</span><br><span class=\"line\">    <span class=\"keyword\">before</span> <span class=\"keyword\">insert</span></span><br><span class=\"line\">    <span class=\"keyword\">on</span> TB_USER</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"keyword\">row</span></span><br><span class=\"line\">    <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> TEST_TRIGGER.nextval <span class=\"keyword\">into</span>:NEW.id <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\">    <span class=\"keyword\">end</span>;</span><br><span class=\"line\">    /</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Oracle 连接url套拉字符串问题:</strong><br>我的本地连接配置如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClassName=oracle.jdbc.driver.OracleDriver</span><br><span class=\"line\">jdbc.url=jdbc:oracle:thin:<span class=\"meta\">@localhost</span>:<span class=\"number\">1521</span>:DERRICK</span><br><span class=\"line\">jdbc.username=derrick</span><br><span class=\"line\">jdbc.password=root</span><br></pre></td></tr></table></figure>\n<p>  按网上后所说的， </p>\n</li>\n</ul>\n<ol>\n<li>端口号1521后的DERRICK是数据库名称,但这样说不完全对</li>\n<li>最后的DERRICK是 service_name，即这个service_name是在创建数据库时系统为其分配的SID名字，可能会与你设定的数据库名不同，需要自己去查看<br><code>Windows</code> : window+r -&gt; regedit -&gt; HKEY_LOCAL_MACHINE\\SOFTWARE\\ORACLE\\KEY_OraDb11g_home1/ORACLE_SID<br><code>LINUX</code> : env<br>所以我的url为<br><code>jdbc:oracle:thin:@localhost:1521:DERRICK</code></li>\n</ol>\n<ul>\n<li><p><strong>Oracle 查看当前用户名下所有序列名</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> SEQUENCE_NAME <span class=\"keyword\">from</span> user_sequences;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看某个sequence的当前值,假设sequence名字为test_seq</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> test_seq.currval <span class=\"keyword\">from</span> dual;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>表管理</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> user_tables; <span class=\"comment\">--查询当前用户名下的所有表名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> all_tables; <span class=\"comment\">--查询数据库所有表名</span></span><br><span class=\"line\">desc table_name; <span class=\"comment\">--查看表结构</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> (表名) <span class=\"keyword\">add</span> (列名 数据类型); <span class=\"comment\">--加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> (表名) <span class=\"keyword\">modify</span> (列名 数据类型); <span class=\"comment\">-- 更改列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> (表名) <span class=\"keyword\">rename</span> <span class=\"keyword\">column</span> (当前列名) <span class=\"keyword\">to</span> (新列名); <span class=\"comment\">-- 更改列名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> (表名) <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> (列名); <span class=\"comment\">--删除列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> (当前表名) <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> (新表名);<span class=\"comment\">--更改表名</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Oracle 清屏命令</strong><br>oracle清屏命令汇集：<br>1、同时按SHIFT和DELETE键，然后点OK即可清屏 。<br>2、若在window窗口下sqlplus 中清屏命令：host cls 或是clear screen 或只是4位clea scre。<br>3、若在dos的窗口下进入sql/plus就要用clear SCR。</p>\n</li>\n</ul>\n<ul>\n<li><strong>Oracle的SQL集合</strong><blockquote><p>Oracle的SQL语句大全（摘）– 复杂.</p>\n<footer><strong>sutku</strong><cite><a href=\"http://blog.csdn.net/sutku/article/details/7900876\" target=\"_blank\" rel=\"noopener\">Oracle的SQL语句大全</a></cite></footer></blockquote>\n</li>\n</ul>\n<h2 id=\"Spring-4-x\"><a href=\"#Spring-4-x\" class=\"headerlink\" title=\"Spring 4.x\"></a>Spring 4.x</h2><h3 id=\"Spring声明式事务配置管理方法\"><a href=\"#Spring声明式事务配置管理方法\" class=\"headerlink\" title=\"Spring声明式事务配置管理方法\"></a>Spring声明式事务配置管理方法</h3><ul>\n<li>Spring可以用xml配置能配符来匹配需要事务的业务方法，基于约束先于配置的法则，比如方法开头以add,update,delete,get云云</li>\n<li>也可以使用注解的方式为某些方法添加事务，两者选一样即可<br>xml配置如下<br><img src=\"http://7xiztk.com1.z0.glb.clouddn.com/201108281004069849.png\" alt><blockquote><p>Spring @Transactional声明式事务管理  getCurrentSession</p>\n<footer><strong>irelandken的专栏</strong><cite><a href=\"http://blog.csdn.net/irelandken/article/details/7193123\" target=\"_blank\" rel=\"noopener\">Spring @Transactional声明式事务管理</a></cite></footer></blockquote>\n<h2 id=\"Hibernate-4-x\"><a href=\"#Hibernate-4-x\" class=\"headerlink\" title=\"Hibernate 4.x\"></a>Hibernate 4.x</h2><blockquote><p>Deprecated API List(Hibernate java doc ).</p>\n<footer><strong>Red Hat, Inc.</strong><cite><a href=\"https://docs.jboss.org/hibernate/orm/4.0/javadocs/deprecated-list.html\" target=\"_blank\" rel=\"noopener\">Deprecated API</a></cite></footer></blockquote>\n</li>\n</ul>\n<blockquote><p>Hibernate Annotation API</p>\n<footer><strong>Blex</strong><cite><a href=\"http://www.360doc.com/content/11/0816/01/987036_140679068.shtml\" target=\"_blank\" rel=\"noopener\">Hibernate Annotation API</a></cite></footer></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name=<span class=\"string\">\"tb_user\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@SequenceGenerator</span>(name=<span class=\"string\">\"seqUser\"</span>,sequenceName=<span class=\"string\">\"seq_tb_user\"</span>,allocationSize=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"meta\">@Id</span></span><br><span class=\"line\">\t<span class=\"meta\">@GeneratedValue</span>(strategy=GenerationType.SEQUENCE,generator=<span class=\"string\">\"seqUser\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer sex;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer isActive;</span><br><span class=\"line\">\t<span class=\"meta\">@ManyToMany</span></span><br><span class=\"line\">\t<span class=\"meta\">@JoinTable</span>(name=<span class=\"string\">\"tb_role_user\"</span>,</span><br><span class=\"line\">\t\tjoinColumns=&#123;<span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"user_id\"</span>,referencedColumnName=<span class=\"string\">\"id\"</span>)&#125;,</span><br><span class=\"line\">\t\tinverseJoinColumns=&#123;<span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"role_id\"</span>,referencedColumnName=<span class=\"string\">\"id\"</span>)&#125;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Set&lt;Role&gt; roles = <span class=\"keyword\">new</span> HashSet&lt;Role&gt;(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//getters and setters are ignored ...</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name=<span class=\"string\">\"tb_role\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@SequenceGenerator</span>(name=<span class=\"string\">\"seqRole\"</span>,sequenceName=<span class=\"string\">\"seq_tb_role\"</span>,allocationSize=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Id</span></span><br><span class=\"line\">\t<span class=\"meta\">@GeneratedValue</span>(strategy=GenerationType.SEQUENCE,generator=<span class=\"string\">\"seqRole\"</span>)<span class=\"comment\">//seqRole要对应@SequenceGenerator中的name</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> roleLevel;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">\t<span class=\"meta\">@ManyToMany</span></span><br><span class=\"line\">\t<span class=\"meta\">@JoinTable</span>(name=<span class=\"string\">\"tb_role_resource\"</span>,</span><br><span class=\"line\">\t\tjoinColumns=&#123;<span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"role_id\"</span>,referencedColumnName=<span class=\"string\">\"id\"</span>)&#125;,</span><br><span class=\"line\">\t\tinverseJoinColumns=&#123;<span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"res_id\"</span>,referencedColumnName=<span class=\"string\">\"id\"</span>)&#125;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Set&lt;Resources&gt; resources = <span class=\"keyword\">new</span> HashSet&lt;Resources&gt;(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"hibernate-的id生成策略问题\"><a href=\"#hibernate-的id生成策略问题\" class=\"headerlink\" title=\"hibernate 的id生成策略问题\"></a>hibernate 的id生成策略问题</h3><ul>\n<li>若业务比较繁忙的表，建议一个表创建一个序列，如上所示</li>\n<li>若查询修改不是很频繁的表可以多个表共享一个序列，配置类时不在id上加generator就可以</li>\n<li><code>allocationSize=1</code>设定主键自增1</li>\n</ul>\n<h2 id=\"Struts-2-x\"><a href=\"#Struts-2-x\" class=\"headerlink\" title=\"Struts 2.x\"></a>Struts 2.x</h2><h3 id=\"ActionForward\"><a href=\"#ActionForward\" class=\"headerlink\" title=\"ActionForward\"></a>ActionForward</h3><p>ActionForward是 Struts的核心类之一，其基类仅有4个属性<code>name / path / redirect / classname</code>。在基于Struts的Web应用程序开发过程中，Action操作完毕后程序会通过Struts的配置文件struts- config.xml链接到指定的ActionForward，传到Struts的核心类ActionServlet，ActionServlet使用 ActionForward提供的路径，将控制传递给下一个JSP或类。ActionForward控制接下来程序的走向。ActionForward代表一个应用的URI，它包括路径和参数，例如：<code>path=”/login.jsp”</code> 或<code>path=“/modify.do?method=edit&amp;id=10”</code> ActionForward的参数除了在struts-config.xml和页面中设置外，还可以通过在Action类中添加参数，或重新在Action中创建一个ActionForward。<br>actionForward的作用：封装转发路径，通俗点说就是说完成页面的跳转和转向。那它既然是转向，到底是转发还是重定向呢？默认的情况下，actionForward采用的是转发的方式进行页面跳转的。<br>顺便说一下 转发和重定向的区别。最大的区别就是转发的时候，页面的url地址不变，而重定向的时候页面的url地址会发生变化。简单说明一下原因，因为转发的时候是采用的同一个request（请求），既然页面跳转前后是同一个request，页面url当然不会变了；而重定向采用的是2个request，因为是二次转发页面跳转前后的url当然会不同了。<br>既然actionForward跳转的方式默认的是转发，那如果我非要用重定向的方式，该如何设置呢？恩，这很简单，大家都在struts-config.xml做过actionForward的配置吧，比如这句     <code>&lt;forward name=”login” path=”/login.jsp” redirect=”true”/&gt;</code></p>\n<h2 id=\"Juint-Test-4-x\"><a href=\"#Juint-Test-4-x\" class=\"headerlink\" title=\"Juint Test 4.x\"></a>Juint Test 4.x</h2><h3 id=\"Junit-Test-输出建表语句\"><a href=\"#Junit-Test-输出建表语句\" class=\"headerlink\" title=\"Junit Test 输出建表语句\"></a>Junit Test 输出建表语句</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HibernateSchemeExportTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LocalSessionFactoryBean localSessionFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tfail(<span class=\"string\">\"Not yet implemented\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@BeforeClass</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeClass</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tApplicationContext ctx = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">\t\tlocalSessionFactory = (LocalSessionFactoryBean) ctx.getBean(<span class=\"string\">\"&amp;sessionFactory\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSchemaEcport</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tConfiguration conf = localSessionFactory.getConfiguration();</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> SchemaExport(conf).create(<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@AfterClass</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tlocalSessionFactory.destroy();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"maven中net-sf-json报错的解决方法：加编译器版本号\"><a href=\"#maven中net-sf-json报错的解决方法：加编译器版本号\" class=\"headerlink\" title=\"maven中net.sf.json报错的解决方法：加编译器版本号\"></a>maven中net.sf.json报错的解决方法：加编译器版本号</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sf.json-lib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>json-lib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classifier</span>&gt;</span>jdk15<span class=\"tag\">&lt;/<span class=\"name\">classifier</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"struts2-输出-JSON\"><a href=\"#struts2-输出-JSON\" class=\"headerlink\" title=\"struts2 输出 JSON\"></a>struts2 输出 JSON</h3><blockquote><p>深入了解Struts2返回JSON数据的原理及具体应用范例</p>\n<footer><strong>杨胜寒</strong><cite><a href=\"http://www.open-open.com/lib/view/open1325518231062.html\" target=\"_blank\" rel=\"noopener\">Struts2返回JSON数据的具体应用范例</a></cite></footer></blockquote>\n<h3 id=\"JVM调优\"><a href=\"#JVM调优\" class=\"headerlink\" title=\"JVM调优\"></a>JVM调优</h3><blockquote><p>JVM调优总结</p>\n<footer><strong>神勇小白鼠-OSChina</strong><cite><a href=\"http://my.oschina.net/shootercn/blog/15393%\" target=\"_blank\" rel=\"noopener\">JVM调优总结</a></cite></footer></blockquote>\n<blockquote><p>JVM 调优总结</p>\n<footer><strong>360doc</strong><cite><a href=\"http://www.360doc.com/content/12/0113/08/1073512_179088229.shtml\" target=\"_blank\" rel=\"noopener\">JVM 调优总结</a></cite></footer></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>webstore是本人自己在本地建立的一个项目，主要是用来做测试，目的是用来研究SSH框架的使用，以下是一点点我做这个项目的经验，留下以备不时之需</p>\n<h2 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h2><ul>\n<li><p><strong>Oracle新建用户、角色，授权，建表空间</strong></p>\n<p>  <em>创建用户</em><br>  oracle内部有两个建好的用户：system和sys。用户可直接登录到system用户以创建其他用户，因为system具有创建别的用户的权限。<br>  在安装oracle时，用户或系统管理员首先可以为自己建立一个用户：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- for new user</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> linbao <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> pwd;  </span><br><span class=\"line\"><span class=\"comment\">-- for updating an exist user</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> linbao <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">-- when user is logged in , use this command to alert his password</span></span><br><span class=\"line\">password</span><br></pre></td></tr></table></figure>\n<p>  其他可用用户：scott/tiger<br>  <em>删除用户</em></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> linbao</span><br><span class=\"line\"><span class=\"comment\">-- 如果用户拥有对象，则不能直接删除，否则将返回一个错误值。</span></span><br><span class=\"line\"><span class=\"comment\">--指定关键字cascade，可删除用户所有的对象，然后再删除用户。下面的例子用来删除用户与其对象：</span></span><br><span class=\"line\">　　<span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> linbao <span class=\"keyword\">cascade</span>;</span><br></pre></td></tr></table></figure>\n<p>  <em>Oracle中有3种标准角色</em><br>   <code>connect role</code>(连接角色)   临时用户，特别是那些不需要建表的用户</p>\n<p>  <code>resource role</code>(资源角色)  提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)<br>  <code>dba role</code>(数据库管理员角色)  拥有所有的系统权限<br>  <em>grant(授权)命令</em></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">connect</span>, <span class=\"keyword\">resource</span> <span class=\"keyword\">to</span> linbao;</span><br></pre></td></tr></table></figure>\n<p>  <em>revoke(撤消)权限</em></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"keyword\">connect</span>, <span class=\"keyword\">resource</span> <span class=\"keyword\">from</span> linbao;</span><br></pre></td></tr></table></figure>\n<p>  <em>删除表的tip：</em></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> 表名</span><br></pre></td></tr></table></figure>\n<p>   因为用drop table，delete * from 表名时，tablespace表空间该表的占用空间并未释放，反复几次drop，delete操作后，该tablespace上百兆的空间就被耗光了。</p>\n</li>\n<li><strong>连接数据库</strong><br>  打开SQLPLUS，输入用户名密码 切换用户<br>  <code>as dba</code> conn /as dba;<br>  <code>as user</code> conn as username/password</li>\n<li><strong>level</strong> 在oracle中是关键字，不能用作表字段**</li>\n<li><strong>在<code>oracle</code>中与<code>mysql</code>不相同的语句整合：</strong><blockquote>\n<p><code>mysql</code>  show tables; <code>oracle</code> select unique tname from col;<br><code>oracle</code> 不支持的主键生成略：generationType.IDENTITY,但generationType.SEQUENCE支持</p>\n</blockquote>\n</li>\n<li><p><strong>oracle中建立类似mysql的auto_increment递增字段 </strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. 新建一张用户表</span></span><br><span class=\"line\">\t<span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_user (</span><br><span class=\"line\">        <span class=\"keyword\">id</span> <span class=\"built_in\">number</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">        age <span class=\"built_in\">number</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>),</span><br><span class=\"line\">        email <span class=\"built_in\">varchar2</span>(<span class=\"number\">255</span> <span class=\"built_in\">char</span>),</span><br><span class=\"line\">        isActive <span class=\"built_in\">number</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>),</span><br><span class=\"line\">        <span class=\"keyword\">name</span> <span class=\"built_in\">varchar2</span>(<span class=\"number\">255</span> <span class=\"built_in\">char</span>),</span><br><span class=\"line\">        <span class=\"keyword\">password</span> <span class=\"built_in\">varchar2</span>(<span class=\"number\">255</span> <span class=\"built_in\">char</span>),</span><br><span class=\"line\">        sex <span class=\"built_in\">number</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>),</span><br><span class=\"line\">        username <span class=\"built_in\">varchar2</span>(<span class=\"number\">255</span> <span class=\"built_in\">char</span>),</span><br><span class=\"line\">        primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\"><span class=\"comment\">-- 2. 新建一个sequence序列</span></span><br><span class=\"line\">\t<span class=\"keyword\">CREATE</span> <span class=\"keyword\">SEQUENCE</span> test_Sequence</span><br><span class=\"line\"> \t<span class=\"keyword\">INCREMENT</span> <span class=\"keyword\">BY</span> <span class=\"number\">1</span>   <span class=\"comment\">-- 每次加几个  </span></span><br><span class=\"line\">    <span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span> <span class=\"number\">1</span>     <span class=\"comment\">-- 从1开始计数  </span></span><br><span class=\"line\">    <span class=\"keyword\">NOMAXVALUE</span>       <span class=\"comment\">-- 不设置最大值  </span></span><br><span class=\"line\">    <span class=\"keyword\">NOCYCLE</span> ;         <span class=\"comment\">-- 一直累加，不循环</span></span><br><span class=\"line\"><span class=\"comment\">-- 3. 建立一个触发器</span></span><br><span class=\"line\">    <span class=\"keyword\">create</span> <span class=\"keyword\">or</span> <span class=\"keyword\">replace</span> <span class=\"keyword\">trigger</span> TEST_TRIGGER</span><br><span class=\"line\">    <span class=\"keyword\">before</span> <span class=\"keyword\">insert</span></span><br><span class=\"line\">    <span class=\"keyword\">on</span> TB_USER</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"keyword\">row</span></span><br><span class=\"line\">    <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> TEST_TRIGGER.nextval <span class=\"keyword\">into</span>:NEW.id <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\">    <span class=\"keyword\">end</span>;</span><br><span class=\"line\">    /</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Oracle 连接url套拉字符串问题:</strong><br>我的本地连接配置如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClassName=oracle.jdbc.driver.OracleDriver</span><br><span class=\"line\">jdbc.url=jdbc:oracle:thin:<span class=\"meta\">@localhost</span>:<span class=\"number\">1521</span>:DERRICK</span><br><span class=\"line\">jdbc.username=derrick</span><br><span class=\"line\">jdbc.password=root</span><br></pre></td></tr></table></figure>\n<p>  按网上后所说的， </p>\n</li>\n</ul>\n<ol>\n<li>端口号1521后的DERRICK是数据库名称,但这样说不完全对</li>\n<li>最后的DERRICK是 service_name，即这个service_name是在创建数据库时系统为其分配的SID名字，可能会与你设定的数据库名不同，需要自己去查看<br><code>Windows</code> : window+r -&gt; regedit -&gt; HKEY_LOCAL_MACHINE\\SOFTWARE\\ORACLE\\KEY_OraDb11g_home1/ORACLE_SID<br><code>LINUX</code> : env<br>所以我的url为<br><code>jdbc:oracle:thin:@localhost:1521:DERRICK</code></li>\n</ol>\n<ul>\n<li><p><strong>Oracle 查看当前用户名下所有序列名</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> SEQUENCE_NAME <span class=\"keyword\">from</span> user_sequences;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看某个sequence的当前值,假设sequence名字为test_seq</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> test_seq.currval <span class=\"keyword\">from</span> dual;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>表管理</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> user_tables; <span class=\"comment\">--查询当前用户名下的所有表名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> all_tables; <span class=\"comment\">--查询数据库所有表名</span></span><br><span class=\"line\">desc table_name; <span class=\"comment\">--查看表结构</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> (表名) <span class=\"keyword\">add</span> (列名 数据类型); <span class=\"comment\">--加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> (表名) <span class=\"keyword\">modify</span> (列名 数据类型); <span class=\"comment\">-- 更改列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> (表名) <span class=\"keyword\">rename</span> <span class=\"keyword\">column</span> (当前列名) <span class=\"keyword\">to</span> (新列名); <span class=\"comment\">-- 更改列名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> (表名) <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> (列名); <span class=\"comment\">--删除列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> (当前表名) <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> (新表名);<span class=\"comment\">--更改表名</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Oracle 清屏命令</strong><br>oracle清屏命令汇集：<br>1、同时按SHIFT和DELETE键，然后点OK即可清屏 。<br>2、若在window窗口下sqlplus 中清屏命令：host cls 或是clear screen 或只是4位clea scre。<br>3、若在dos的窗口下进入sql/plus就要用clear SCR。</p>\n</li>\n</ul>\n<ul>\n<li><strong>Oracle的SQL集合</strong><blockquote><p>Oracle的SQL语句大全（摘）– 复杂.</p>\n<footer><strong>sutku</strong><cite><a href=\"http://blog.csdn.net/sutku/article/details/7900876\" target=\"_blank\" rel=\"noopener\">Oracle的SQL语句大全</a></cite></footer></blockquote>\n</li>\n</ul>\n<h2 id=\"Spring-4-x\"><a href=\"#Spring-4-x\" class=\"headerlink\" title=\"Spring 4.x\"></a>Spring 4.x</h2><h3 id=\"Spring声明式事务配置管理方法\"><a href=\"#Spring声明式事务配置管理方法\" class=\"headerlink\" title=\"Spring声明式事务配置管理方法\"></a>Spring声明式事务配置管理方法</h3><ul>\n<li>Spring可以用xml配置能配符来匹配需要事务的业务方法，基于约束先于配置的法则，比如方法开头以add,update,delete,get云云</li>\n<li>也可以使用注解的方式为某些方法添加事务，两者选一样即可<br>xml配置如下<br><img src=\"http://7xiztk.com1.z0.glb.clouddn.com/201108281004069849.png\" alt><blockquote><p>Spring @Transactional声明式事务管理  getCurrentSession</p>\n<footer><strong>irelandken的专栏</strong><cite><a href=\"http://blog.csdn.net/irelandken/article/details/7193123\" target=\"_blank\" rel=\"noopener\">Spring @Transactional声明式事务管理</a></cite></footer></blockquote>\n<h2 id=\"Hibernate-4-x\"><a href=\"#Hibernate-4-x\" class=\"headerlink\" title=\"Hibernate 4.x\"></a>Hibernate 4.x</h2><blockquote><p>Deprecated API List(Hibernate java doc ).</p>\n<footer><strong>Red Hat, Inc.</strong><cite><a href=\"https://docs.jboss.org/hibernate/orm/4.0/javadocs/deprecated-list.html\" target=\"_blank\" rel=\"noopener\">Deprecated API</a></cite></footer></blockquote>\n</li>\n</ul>\n<blockquote><p>Hibernate Annotation API</p>\n<footer><strong>Blex</strong><cite><a href=\"http://www.360doc.com/content/11/0816/01/987036_140679068.shtml\" target=\"_blank\" rel=\"noopener\">Hibernate Annotation API</a></cite></footer></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name=<span class=\"string\">\"tb_user\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@SequenceGenerator</span>(name=<span class=\"string\">\"seqUser\"</span>,sequenceName=<span class=\"string\">\"seq_tb_user\"</span>,allocationSize=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"meta\">@Id</span></span><br><span class=\"line\">\t<span class=\"meta\">@GeneratedValue</span>(strategy=GenerationType.SEQUENCE,generator=<span class=\"string\">\"seqUser\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer sex;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer isActive;</span><br><span class=\"line\">\t<span class=\"meta\">@ManyToMany</span></span><br><span class=\"line\">\t<span class=\"meta\">@JoinTable</span>(name=<span class=\"string\">\"tb_role_user\"</span>,</span><br><span class=\"line\">\t\tjoinColumns=&#123;<span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"user_id\"</span>,referencedColumnName=<span class=\"string\">\"id\"</span>)&#125;,</span><br><span class=\"line\">\t\tinverseJoinColumns=&#123;<span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"role_id\"</span>,referencedColumnName=<span class=\"string\">\"id\"</span>)&#125;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Set&lt;Role&gt; roles = <span class=\"keyword\">new</span> HashSet&lt;Role&gt;(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//getters and setters are ignored ...</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name=<span class=\"string\">\"tb_role\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@SequenceGenerator</span>(name=<span class=\"string\">\"seqRole\"</span>,sequenceName=<span class=\"string\">\"seq_tb_role\"</span>,allocationSize=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Id</span></span><br><span class=\"line\">\t<span class=\"meta\">@GeneratedValue</span>(strategy=GenerationType.SEQUENCE,generator=<span class=\"string\">\"seqRole\"</span>)<span class=\"comment\">//seqRole要对应@SequenceGenerator中的name</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> roleLevel;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">\t<span class=\"meta\">@ManyToMany</span></span><br><span class=\"line\">\t<span class=\"meta\">@JoinTable</span>(name=<span class=\"string\">\"tb_role_resource\"</span>,</span><br><span class=\"line\">\t\tjoinColumns=&#123;<span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"role_id\"</span>,referencedColumnName=<span class=\"string\">\"id\"</span>)&#125;,</span><br><span class=\"line\">\t\tinverseJoinColumns=&#123;<span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"res_id\"</span>,referencedColumnName=<span class=\"string\">\"id\"</span>)&#125;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Set&lt;Resources&gt; resources = <span class=\"keyword\">new</span> HashSet&lt;Resources&gt;(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"hibernate-的id生成策略问题\"><a href=\"#hibernate-的id生成策略问题\" class=\"headerlink\" title=\"hibernate 的id生成策略问题\"></a>hibernate 的id生成策略问题</h3><ul>\n<li>若业务比较繁忙的表，建议一个表创建一个序列，如上所示</li>\n<li>若查询修改不是很频繁的表可以多个表共享一个序列，配置类时不在id上加generator就可以</li>\n<li><code>allocationSize=1</code>设定主键自增1</li>\n</ul>\n<h2 id=\"Struts-2-x\"><a href=\"#Struts-2-x\" class=\"headerlink\" title=\"Struts 2.x\"></a>Struts 2.x</h2><h3 id=\"ActionForward\"><a href=\"#ActionForward\" class=\"headerlink\" title=\"ActionForward\"></a>ActionForward</h3><p>ActionForward是 Struts的核心类之一，其基类仅有4个属性<code>name / path / redirect / classname</code>。在基于Struts的Web应用程序开发过程中，Action操作完毕后程序会通过Struts的配置文件struts- config.xml链接到指定的ActionForward，传到Struts的核心类ActionServlet，ActionServlet使用 ActionForward提供的路径，将控制传递给下一个JSP或类。ActionForward控制接下来程序的走向。ActionForward代表一个应用的URI，它包括路径和参数，例如：<code>path=”/login.jsp”</code> 或<code>path=“/modify.do?method=edit&amp;id=10”</code> ActionForward的参数除了在struts-config.xml和页面中设置外，还可以通过在Action类中添加参数，或重新在Action中创建一个ActionForward。<br>actionForward的作用：封装转发路径，通俗点说就是说完成页面的跳转和转向。那它既然是转向，到底是转发还是重定向呢？默认的情况下，actionForward采用的是转发的方式进行页面跳转的。<br>顺便说一下 转发和重定向的区别。最大的区别就是转发的时候，页面的url地址不变，而重定向的时候页面的url地址会发生变化。简单说明一下原因，因为转发的时候是采用的同一个request（请求），既然页面跳转前后是同一个request，页面url当然不会变了；而重定向采用的是2个request，因为是二次转发页面跳转前后的url当然会不同了。<br>既然actionForward跳转的方式默认的是转发，那如果我非要用重定向的方式，该如何设置呢？恩，这很简单，大家都在struts-config.xml做过actionForward的配置吧，比如这句     <code>&lt;forward name=”login” path=”/login.jsp” redirect=”true”/&gt;</code></p>\n<h2 id=\"Juint-Test-4-x\"><a href=\"#Juint-Test-4-x\" class=\"headerlink\" title=\"Juint Test 4.x\"></a>Juint Test 4.x</h2><h3 id=\"Junit-Test-输出建表语句\"><a href=\"#Junit-Test-输出建表语句\" class=\"headerlink\" title=\"Junit Test 输出建表语句\"></a>Junit Test 输出建表语句</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HibernateSchemeExportTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LocalSessionFactoryBean localSessionFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tfail(<span class=\"string\">\"Not yet implemented\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@BeforeClass</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeClass</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tApplicationContext ctx = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">\t\tlocalSessionFactory = (LocalSessionFactoryBean) ctx.getBean(<span class=\"string\">\"&amp;sessionFactory\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSchemaEcport</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tConfiguration conf = localSessionFactory.getConfiguration();</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> SchemaExport(conf).create(<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@AfterClass</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tlocalSessionFactory.destroy();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"maven中net-sf-json报错的解决方法：加编译器版本号\"><a href=\"#maven中net-sf-json报错的解决方法：加编译器版本号\" class=\"headerlink\" title=\"maven中net.sf.json报错的解决方法：加编译器版本号\"></a>maven中net.sf.json报错的解决方法：加编译器版本号</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sf.json-lib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>json-lib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classifier</span>&gt;</span>jdk15<span class=\"tag\">&lt;/<span class=\"name\">classifier</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"struts2-输出-JSON\"><a href=\"#struts2-输出-JSON\" class=\"headerlink\" title=\"struts2 输出 JSON\"></a>struts2 输出 JSON</h3><blockquote><p>深入了解Struts2返回JSON数据的原理及具体应用范例</p>\n<footer><strong>杨胜寒</strong><cite><a href=\"http://www.open-open.com/lib/view/open1325518231062.html\" target=\"_blank\" rel=\"noopener\">Struts2返回JSON数据的具体应用范例</a></cite></footer></blockquote>\n<h3 id=\"JVM调优\"><a href=\"#JVM调优\" class=\"headerlink\" title=\"JVM调优\"></a>JVM调优</h3><blockquote><p>JVM调优总结</p>\n<footer><strong>神勇小白鼠-OSChina</strong><cite><a href=\"http://my.oschina.net/shootercn/blog/15393%\" target=\"_blank\" rel=\"noopener\">JVM调优总结</a></cite></footer></blockquote>\n<blockquote><p>JVM 调优总结</p>\n<footer><strong>360doc</strong><cite><a href=\"http://www.360doc.com/content/12/0113/08/1073512_179088229.shtml\" target=\"_blank\" rel=\"noopener\">JVM 调优总结</a></cite></footer></blockquote>\n"},{"title":"alias test","date":"2015-05-09T09:23:28.000Z","alias":"java/index.html","_content":"\nThis is the alias test and in this article we try to insert some javascript code;\n\n\n{% codeblock %}\npublic class Test{\n\t\n\tpublic statis void main(String[] args){\n\n\t\tsystem.out.println(\"Hello World\");\n\t}\n}\n{% endcodeblock %}\n\n```javascript\nalert(\"javascript alert\")\n```","source":"_posts/alias-test.md","raw":"title: \"alias test\"\ndate: 2015-05-09 17:23:28\ntags: personal\ncategories: 总结与分享\nalias: java/index.html\n---\n\nThis is the alias test and in this article we try to insert some javascript code;\n\n\n{% codeblock %}\npublic class Test{\n\t\n\tpublic statis void main(String[] args){\n\n\t\tsystem.out.println(\"Hello World\");\n\t}\n}\n{% endcodeblock %}\n\n```javascript\nalert(\"javascript alert\")\n```","slug":"alias-test","published":1,"updated":"2019-12-30T17:16:22.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq280016qyvy63pi00rp","content":"<p>This is the alias test and in this article we try to insert some javascript code;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic statis void main(String[] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsystem.out.println(&quot;Hello World&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"string\">\"javascript alert\"</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>This is the alias test and in this article we try to insert some javascript code;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic statis void main(String[] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsystem.out.println(&quot;Hello World&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"string\">\"javascript alert\"</span>)</span><br></pre></td></tr></table></figure>"},{"title":"written at the begining","date":"2015-05-07T13:55:54.000Z","_content":"大约三四年前，我就问自己，自己有什么技能？这种技能能不能持久地使用？这个技能能不能将我带到更好的地方？说得高端一点就是没有核心竞争力。\n刚开始工作的时候感觉自己到处是短板，老板布置好各种任务，虽然万分的不喜欢，发现问题又觉得是自己的问题，但是逼着自己去做，做得不好被骂又归因到自己身上，总结是自己的短板太多，与其跟老板说自己不合适，还不如回去总结经验埋头学习，下次做得更好。然而，下次的结果更差。\n\n现在看来，是当初的自己高估了自己修短板的能力。\n\n事实就是这样，我不擅长说客套话，我也不喜欢跟人讨价还价，我跟不喜欢事前拍胸口事后找原因。我知道自己是怎样的人，有些事情我做不出来就做不出来，就算做出来也做不好。\n\n人应该早一点知道自己属于那一类人的，我现在知道了我是一个颇内向的人，我一个人做事也不觉得无聊，我可以静下心来看书，我可以跟自己对话来改变自己，我可以从自己的内心获得力量。\n\n人生很短，试错可以有，但是要珍惜每个去尝试的机会，如果可以一击即中，那就不要浪费力气，专心地去做自己喜欢的事情，那就是给自己人生最好的礼物，这就是自己的核心竞争力.\n第一篇博客写写自己此刻所想，挺好！","source":"_posts/written-at-the-begining.md","raw":"title: \"written at the begining\"\ndate: 2015-05-07 21:55:54\ncategories: 总结与分享\ntags: personal\n---\n大约三四年前，我就问自己，自己有什么技能？这种技能能不能持久地使用？这个技能能不能将我带到更好的地方？说得高端一点就是没有核心竞争力。\n刚开始工作的时候感觉自己到处是短板，老板布置好各种任务，虽然万分的不喜欢，发现问题又觉得是自己的问题，但是逼着自己去做，做得不好被骂又归因到自己身上，总结是自己的短板太多，与其跟老板说自己不合适，还不如回去总结经验埋头学习，下次做得更好。然而，下次的结果更差。\n\n现在看来，是当初的自己高估了自己修短板的能力。\n\n事实就是这样，我不擅长说客套话，我也不喜欢跟人讨价还价，我跟不喜欢事前拍胸口事后找原因。我知道自己是怎样的人，有些事情我做不出来就做不出来，就算做出来也做不好。\n\n人应该早一点知道自己属于那一类人的，我现在知道了我是一个颇内向的人，我一个人做事也不觉得无聊，我可以静下心来看书，我可以跟自己对话来改变自己，我可以从自己的内心获得力量。\n\n人生很短，试错可以有，但是要珍惜每个去尝试的机会，如果可以一击即中，那就不要浪费力气，专心地去做自己喜欢的事情，那就是给自己人生最好的礼物，这就是自己的核心竞争力.\n第一篇博客写写自己此刻所想，挺好！","slug":"written-at-the-begining","published":1,"updated":"2019-12-30T17:16:22.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq290019qyvyr3i9amb8","content":"<p>大约三四年前，我就问自己，自己有什么技能？这种技能能不能持久地使用？这个技能能不能将我带到更好的地方？说得高端一点就是没有核心竞争力。<br>刚开始工作的时候感觉自己到处是短板，老板布置好各种任务，虽然万分的不喜欢，发现问题又觉得是自己的问题，但是逼着自己去做，做得不好被骂又归因到自己身上，总结是自己的短板太多，与其跟老板说自己不合适，还不如回去总结经验埋头学习，下次做得更好。然而，下次的结果更差。</p>\n<p>现在看来，是当初的自己高估了自己修短板的能力。</p>\n<p>事实就是这样，我不擅长说客套话，我也不喜欢跟人讨价还价，我跟不喜欢事前拍胸口事后找原因。我知道自己是怎样的人，有些事情我做不出来就做不出来，就算做出来也做不好。</p>\n<p>人应该早一点知道自己属于那一类人的，我现在知道了我是一个颇内向的人，我一个人做事也不觉得无聊，我可以静下心来看书，我可以跟自己对话来改变自己，我可以从自己的内心获得力量。</p>\n<p>人生很短，试错可以有，但是要珍惜每个去尝试的机会，如果可以一击即中，那就不要浪费力气，专心地去做自己喜欢的事情，那就是给自己人生最好的礼物，这就是自己的核心竞争力.<br>第一篇博客写写自己此刻所想，挺好！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大约三四年前，我就问自己，自己有什么技能？这种技能能不能持久地使用？这个技能能不能将我带到更好的地方？说得高端一点就是没有核心竞争力。<br>刚开始工作的时候感觉自己到处是短板，老板布置好各种任务，虽然万分的不喜欢，发现问题又觉得是自己的问题，但是逼着自己去做，做得不好被骂又归因到自己身上，总结是自己的短板太多，与其跟老板说自己不合适，还不如回去总结经验埋头学习，下次做得更好。然而，下次的结果更差。</p>\n<p>现在看来，是当初的自己高估了自己修短板的能力。</p>\n<p>事实就是这样，我不擅长说客套话，我也不喜欢跟人讨价还价，我跟不喜欢事前拍胸口事后找原因。我知道自己是怎样的人，有些事情我做不出来就做不出来，就算做出来也做不好。</p>\n<p>人应该早一点知道自己属于那一类人的，我现在知道了我是一个颇内向的人，我一个人做事也不觉得无聊，我可以静下心来看书，我可以跟自己对话来改变自己，我可以从自己的内心获得力量。</p>\n<p>人生很短，试错可以有，但是要珍惜每个去尝试的机会，如果可以一击即中，那就不要浪费力气，专心地去做自己喜欢的事情，那就是给自己人生最好的礼物，这就是自己的核心竞争力.<br>第一篇博客写写自己此刻所想，挺好！</p>\n"},{"title":"使用Module Design Pattern编写的一个购物车模块","date":"2015-10-31T06:35:05.000Z","alias":null,"_content":"\n## 前言\n\n看了javascript design pattern，忍不住动手自己写了个购物车的模块，权当是加深印象吧，正好周末有的是时间。\nThe Module Pattern，网上资料少之又少，看看还是不怎么理解，不过再回来翻看，似乎挺有趣的。模块模式，也译为模组模式，是一种通用的对代码进行模块化组织与定义的方式。这里所说的模块（Modules），是指实现某特定功能的一组方法和代码。\n模块模式使用了以下几种概念： \n### 闭包和立即执行的匿名函数\n模块模式使用了 JavaScript 的一个特性，即闭包（Closures）。\n``` javascript \n;(function(){\n\t//...dosomething here...\n\t// return something...\n})()\n\n```\n在闭包中，可以定义私有变量和函数，外部无法访问它们，从而做到了私有成员的隐藏和隔离。而通过返回对象或函数，或是将某对象作为参数传入，在函数体内对该对象进行操作，就可以公开我们所希望对外暴露的公开的方法与数据。\n而在上面的代码中，我们定义了一个匿名的函数，并用括号包括起来，这个括号是函数的入口，我是这样理解的，如果函数名后面加上圆括号就表示立即调用（执行）这个函数里面的代码（花括号部分的代码），也叫Immediately-Invoked Function Expression（IIFE）\n这是模块模式的基本形式\n\n### 输入参数\n\nJavascript没有块作用域，只有函数作用域，也就是说在一个函数内一个表达式要使用一个变量，那它首先是在离它最近的块中找，找不到则往外一层找，若还是找不到则看看全局作用域下有没有定义，若没有则报typeReferenceErr.另外，Javascript也非常有意思，比如变量的定义一般都是“被提前”到函数的开始第一句，但还是在原地初始化（若有）。\n看看下面的代码：\n``` javascript\n\n\"use strict\"\nvar name = \"linbao\";\nvar people = {\n\tname : \"linbaolee\",\n\tproxy : {\n\t\tname : \"boyce\",\n\t\tgetName : function(){ return this.name;}\n\t}\n}\nconsole.log(\"people.name = \" + people.name);//\nconsole.log(\"people.proxy.name() = \" + people.proxy.getName());\nvar test = people.proxy.getName;\nconsole.log(test.call(people));\nconsole.log(test());\n\t\t\n```\nJavaScript 有一个特性叫做隐式全局变量（implied globals），当使用一个变量名时，JavaScript 解释器将反向遍历作用域链来查找变量的声明，如果没有找到，就假定该变量是全局变量。这种特性使得我们可以在闭包里随处引用全局变量，比如 jQuery 或 window。然而，这是一种不好的方式。\n\n考虑模块的独立性和封装，对其它对象的引用应该通过参数来引入。如果模块内需要使用其它全局对象，应该将这些对象作为参数来显式引用它们，而非在模块内直接引用这些对象的名字。以 jQuery 为例，若在参数中没有输入 jQuery 对象就在模块内直接引用 $ 这个对象，是有出错的可能的。正确的方式大致应该是这样的：\n``` javascript\n;(function (q, w) {\n  // q is jQuery\n  // w is window\n  // 局部变量及代码\n  // 返回\n})(jQuery, window);\n```\n\n相比隐式全局变量，将引用的对象作为参数，使它们得以和函数内的其它局部变量区分开来。这样做还有个好处，我们可以给那些全局对象起一个别名，比如上例中的 \"q\"。现在看看你的代码，是否没有经过对 jQuery 的引用就到处都是\"$\"？\n\n### 模块输出\n有时我们不只是要使用全局变量，我们也要声明和输出模块中的对象，这可以通过匿名函数的 return 语句来达成，而这也构成了一个完整的模块模式\n``` javascript \nvar MODULE = (function () {\n    var my = {},\n        privateVariable = 1;\n \n    function privateMethod() {\n        // ...\n    }\n \n    my.moduleProperty = 1;\n    my.moduleMethod = function () {\n        // ...\n    };\n \n    return my;\n}());\n\n```\n这段代码声明了一个变量 MODULE，它带有两个可访问的属性：moduleProperty 和 moduleMethod，其它的代码都封装在闭包中保持着私有状态。参考上文提过的参数输入，我们还可以通过参数引用其它全局变量。\n\n#### 输出简单对象\n很多时候我们 return 一个对象作为模块的输出，比如上例就是。\n另外，使用对象直接量（Object Literal Notation）来表达 JavaScript 对象是很常见的。比如：var x = { p1: 1, p2: \"2\", f: function(){ /*... */ } }\n很多时候我们都能见到这样的模块化代码：\n``` javsscript\n  var private_variable = 1;\n  function private_method() { /*...*/ }\n \n  var my = {\n    property1: 1,\n    property2: private_variable,\n    method1: private_method,\n    method2: function () {\n        // ...\n    }\n  };\n  return my;\n}());\n```\n\n另外，对于简单的模块化代码，若不涉及私有成员等，其实也可以直接使用对象直接量来表达一个模块：\n```javscript\nvar Widget1 = {\n  name: \"who am i?\",\n  settings: {\n    x: 0,\n    y: 0\n  },\n  call_me: function () {\n    // ...\n  }\n};\n```\n\n#### 输出函数\n有时候我们希望返回的并不是一个对象，而是一个函数。有两种需求要求我们返回一个函数，一种情况是我们需要它是一个函数，比如 jQuery，它是一个函数而不是一个简单对象；另一种情况是我们需要的是一个“类”而不是一个直接量，之后我们可以用 \"new\" 来实例它。目前版本的 JavaScript 并没有专门的“类”定义，但它却可以通过 function 来表达。\n``` javascript\nvar Cat = (function () {\n  // 私有成员及代码 ...\n \n  return function(name) {\n    this.name = name;\n    this.bark = function() { /*...*/ }\n  };\n}());\n \nvar tomcat = new Cat(\"Tom\");\ntomcat.bark();\n```\n为什么不直接定义一个 function 而要把它放在闭包里呢？简单点的情况，确实不需要使用 IIFE 这种形式，但复杂点的情况，在构造我们所需要的函数或是“类”时，若需要定义一些私有的函数，就有必要使用 IIFE 这种形式了。\n另外，在 ECMAScript5中，提出了 Object.create() 方法。这时可以将一个对象视作“类”，并使用 Object.create() 进行实例化，不需使用 \"new\"。\n### Revealing Module Pattern输出对象直接量\n前面已经提到一种形式是输出对象直接量（Object Literal Notation），而 Revealing Module Pattern 其实就是这种形式，只是做了一些限定。这种模式要求在私有范围内中定义变量和函数，然后返回一个匿名对象，在该对象中指定要公开的成员。参见下面的代码：\n``` javascript\nvar MODULE = (function () {\n  // 私有变量及函数\n  var x = 1;\n  function f1() {}\n  function f2() {}\n \n  return {\n    public_method1: f1,\n    public_method2: f2\n  };\n}());\n```\n\n## 模块模式的变化\n\n### 扩展\n上面的举例都是在一个地方定义模块，如果我们需要在数个文件中分别编写一个模块的不同部分该怎么办呢？或者说，如果我们需要对已有的模块作出扩展该怎么办呢？其实也很简单，将模块对象作为参数输入，扩展后再返回自己就可以了。比如：\n```javascript \nvar MODULE = (function (my) {\n  my.anotherMethod = function () {\n    // added method...\n  };\n \n  return my;\n}(MODULE));\n```\n上面的代码为对象 MODULE 增加了一个 \"anotherMethod\" 方法。\n\n### 松耦合扩展（Loose Augmentation）\n上面的代码要求 MODULE 对象是已经定义过的。如果这个模块的各个组成部分并没有加载顺序要求的话，其实可以允许输入的参数为空对象，那么我们将上例中的参数由 MODULE 改为 MODULE || {} 就可以了：\n``` javascript\nvar MODULE = (function (my) {\n  // add capabilities...\n  return my;\n}(MODULE || {}));\n```\n\n### 紧耦合扩展（Tight Augmentation）\n与上例不同，有时我们要求在扩展时调用以前已被定义的方法，这也有可能被用于覆盖已有的方法。这时，对模块的定义顺序是有要求的。\n```javascript\nvar MODULE = (function (my) {\n  var old_moduleMethod = my.moduleMethod;\n \n  my.moduleMethod = function () {\n    // 方法重载\n    // 可通过 old_moduleMethod 调用以前的方法...\n  };\n \n  return my;\n}(MODULE));\n```\n\n### 克隆与继承（Cloning and Inheritance）\n```javascript\nvar MODULE_TWO = (function (old) {\n    var my = {},\n        key;\n \n    for (key in old) {\n        if (old.hasOwnProperty(key)) {\n            my[key] = old[key];\n        }\n    }\n \n    var super_moduleMethod = old.moduleMethod;\n    my.moduleMethod = function () {\n        // override method on the clone, access to super through super_moduleMethod\n    };\n \n    return my;\n}(MODULE));\n```\n有时我们需要复制和继承原对象，上面的代码演示了这种操作，但未必完美。如果你可以使用 Object.create() 的话，请使用 Object.create() 来改写上面的代码：\n``` javascript\nvar MODULE_TWO = (function (old) {\n  var my = Object.create(old);\n \n  var super_moduleMethod = old.moduleMethod;\n  my.moduleMethod = function () {\n    // override method ...\n  };\n \n  return my;\n}(MODULE));\n```\n### 各种形式的混合\n以上介绍了常见的几种模块化形式，实际应用中有可能是这些形式的混合体。比如：\n```javascript\nvar UTIL = (function (parent, $) {\n    var my = parent.ajax = parent.ajax || {};\n \n    my.get = function (url, params, callback) {\n        // ok, so I'm cheating a bit :)\n        return $.getJSON(url, params, callback);\n    };\n \n    // etc...\n \n    return parent;\n}(UTIL || {}, jQuery));\n```\n\n## 实践大于一切\n好了，讲了这么多，动手实践一下。下面就来开发一个购物车模块。这个模块会保留自己一部分私有的成员变量与方法，保证数据的安全，同时也给外界提供一套可用的API，包括添加购物车，更新，删除购物车等功能：\n```javascript\n/*\n* cartModule.js \n* date : 2015-10-20 22:40\n* author : Linbao\n* required : jQuery.js\n* useage - HTML markup at least required an container and its class name is content\n* Module API : \n* - addToCart() // add an item to cart\n* - deleteById(id) // delete an item from cart, id must be spcefic\n* - itemCount() // return total number of item in the cart\n* - total() // caculate total amount in the cart\n* - populateCart() // populate all item infomation to html with formatted template\n*/\n+\n\n\"use strict\"\nvar cartModule = (function(){\n\n\tvar cart = [];\n\tfunction addItemToCart(product){\n\t\tconsole.log(product)\n\t\tcart.push(product);\n\t\tif(cart.length > 1){\n\t\t\tfor(var i = 0; i < cart.length; i++){\n\t\t\t\tfor(var j = i+1; j < cart.length; j++){\n\t\t\t\t\tif(cart[i].id === cart[j].id && cart[i].colorCode === cart[j].colorCode && cart[i].sizeCode === cart[j].colorCode){\n\t\t\t\t\t\tcart[i].num += cart[j].num;\n\t\t\t\t\t\tcart.splice(j,1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction deleteItemById(id,num){\n\t\t//console.log('process to delete ...')\n\t\tif(!num) {//delete whole item\n\t\t\tfor(var i = 0; i < cart.length; i++ ){\n\t\t\t\tif(cart[i].id == id){\n\t\t\t\t\tcart.splice(i,1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(id && typeof id !== 'Number') {parseInt(id);}\n\t\tfor(var i = 0; i < cart.length; i++){\n\t\t\tif(cart[i].id == id){\n\t\t\t\tif(cart[i].num >= 2){\n\t\t\t\t\tcart[i].num --;\n\t\t\t\t\t//console.log('num --')\n\t\t\t\t}else{\n\t\t\t\t\tcart.splice(i,1);\n\t\t\t\t\t//console.log('item has been totally remove from your cart');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log('end delete item from cart ')\n\t}\n\tfunction printOutCartConsole(){\n\t\tconsole.log(\"The total item in your cart is \"+ cart.length);\n\t\tfor(var i in cart){\n\t\t\tconsole.log('product ' + cart[i].id \n\t\t\t\t+ ', it\\'s color is ' + cart[i].color + ', size is ' + cart[i].size \n\t\t\t\t+ ' price is ' + cart[i].price +' num is ' + cart[i].num \n\t\t\t\t+ \"\\n\");\n\t\t}\n\t\toutPut2Html(cart);\n\t}\n\tfunction getTotalCartAmount(){\n\t\tvar totalAmount = 0.00;\n\t\tfor(var i = 0; i < cart.length; i++){\n\t\t\ttotalAmount += cart[i].price * cart[i].num;\n\t\t}\n\t\treturn totalAmount;\n\t}\n\tfunction count(){\n\t\tvar itemNum = 0;\n\t\tfor(var i in cart){\n\t\t\titemNum += cart[i].num;\n\t\t}\n\t\treturn itemNum;\n\t}\n\tfunction output2Html(obj){\n\t\tif(!obj) obj = cart;\n\t\tvar template = \"<span class='id'>$id$</span>\"+\n\t\t\t\t\t   \"<span class='color'>$color$</span>\"+\n\t\t\t\t\t   \"<span class='num'>$num$</span>\"+\n\t\t\t\t\t   \"<span class='price'>$price$</span>\";\n\t\tvar wrap = \"<div class='cart' id='cart' ></div>\";\n\t\t$('.content').html(wrap);\n\t\tfor(var i = 0; i < obj.length; i++){\n\t\t\tvar c = \"<div class='item' id='\"+obj[i]['id']+\"'>\";\n\t\t\tc += strReplace(template,obj[i]);\n\t\t\tc += '</div>';\n\t\t\t$('.cart').append(c);\n\t\t\tvar btnDel = $(\"<button class='delItem' id='delItem'>delete</button>\");\n\t\t\tbtnDel.bind('click',function(){\n\t\t\t\tvar self = $(this);\n\t\t\t\tvar id = self.parent().attr('id');\n\t\t\t\tcartModule.deleteById(id);\n\t\t\t});\n\t\t\t$('.item').append(btnDel);\n\t\t}\n\t}\n\tfunction strReplace(str,item){\n\t\treturn str.replace(/\\$\\w+\\$/gi, function(matches){\t\t\n\t\t\tvar value = item[matches.replace(/\\$/g,'')];\n\t\t\treturn !typeof(value) ? '': value;\n\t\t});\n\t}\n\treturn {\n\t\taddToCart : function(){\n\t\t\tvar test = Math.random() * 100000;\n\t\t\tvar productId = 1//(parseInt(test)) % 100;\n\t\t\tvar colorCode = 'AXD';\n\t\t\tvar sizeCode = 'L';\n\t\t\tvar price = Math.floor(((test % 7) * 100)) / 100;\n\t\t\tvar num = 1;\n\t\t\t\n\t\t\taddItemToCart({\n\t\t\t\t'id' : productId,\n\t\t\t\t'color' : colorCode,\n\t\t\t\t'size' : sizeCode,\n\t\t\t\t'price' : price,\n\t\t\t\t'num' : num\n\t\t\t});\n\t\t\tthis.populateCart();\n\t\t},\n\t\tdeleteById : function(id){\n\t\t\tdeleteItemById(id,1);\n\t\t\tthis.populateCart();\n\t\t},\n\t\titemCount : function(){\n\t\t\t//console.log(count());\n\t\t\treturn count();\n\t\t},\n\t\ttotal : function(){\n\t\t\tvar total = this.getTotalCartAmount();\n\t\t\tvar sum = this.count();\n\t\t\tconsole.log('There are '+ sum + ' item(s) in your cart, total amount is ' + total);\n\t\t\treturn total;\n\t\t},\n\t\tpopulateCart : function(){\n\t\t\toutput2Html();\n\t\t}\n\t}\n})()\n```\n\n{%blockquote Chen-Zhiqiang http://my.oschina.net/chenzhiqiang/blog/129783 JavaScript 模块化编程 - Module Pattern%}\n参考文献1\n{%endblockquote%}\n\n{%blockquote David Flanagan http://baike.baidu.com/link?url=z8w5MQ7w5UUBKNowDYiXV4S6KGW0sJBZCzFqxIKHCOoh9mon7hnFzOOekV4m7Dx0LczXed8vZnsv56FO3XXYZ_ Javascript权威指南 %}\n参考文献2\n{%endblockquote%}","source":"_posts/使用Module-Design-Pattern编写的一个购物车模块.md","raw":"title: \"使用Module Design Pattern编写的一个购物车模块\"\ndate: 2015-10-31 14:35:05\nalias: \ntags: \n - Javascript\n - 语言学习\n - jQuery\ncategories: \n - Lab\n\n---\n\n## 前言\n\n看了javascript design pattern，忍不住动手自己写了个购物车的模块，权当是加深印象吧，正好周末有的是时间。\nThe Module Pattern，网上资料少之又少，看看还是不怎么理解，不过再回来翻看，似乎挺有趣的。模块模式，也译为模组模式，是一种通用的对代码进行模块化组织与定义的方式。这里所说的模块（Modules），是指实现某特定功能的一组方法和代码。\n模块模式使用了以下几种概念： \n### 闭包和立即执行的匿名函数\n模块模式使用了 JavaScript 的一个特性，即闭包（Closures）。\n``` javascript \n;(function(){\n\t//...dosomething here...\n\t// return something...\n})()\n\n```\n在闭包中，可以定义私有变量和函数，外部无法访问它们，从而做到了私有成员的隐藏和隔离。而通过返回对象或函数，或是将某对象作为参数传入，在函数体内对该对象进行操作，就可以公开我们所希望对外暴露的公开的方法与数据。\n而在上面的代码中，我们定义了一个匿名的函数，并用括号包括起来，这个括号是函数的入口，我是这样理解的，如果函数名后面加上圆括号就表示立即调用（执行）这个函数里面的代码（花括号部分的代码），也叫Immediately-Invoked Function Expression（IIFE）\n这是模块模式的基本形式\n\n### 输入参数\n\nJavascript没有块作用域，只有函数作用域，也就是说在一个函数内一个表达式要使用一个变量，那它首先是在离它最近的块中找，找不到则往外一层找，若还是找不到则看看全局作用域下有没有定义，若没有则报typeReferenceErr.另外，Javascript也非常有意思，比如变量的定义一般都是“被提前”到函数的开始第一句，但还是在原地初始化（若有）。\n看看下面的代码：\n``` javascript\n\n\"use strict\"\nvar name = \"linbao\";\nvar people = {\n\tname : \"linbaolee\",\n\tproxy : {\n\t\tname : \"boyce\",\n\t\tgetName : function(){ return this.name;}\n\t}\n}\nconsole.log(\"people.name = \" + people.name);//\nconsole.log(\"people.proxy.name() = \" + people.proxy.getName());\nvar test = people.proxy.getName;\nconsole.log(test.call(people));\nconsole.log(test());\n\t\t\n```\nJavaScript 有一个特性叫做隐式全局变量（implied globals），当使用一个变量名时，JavaScript 解释器将反向遍历作用域链来查找变量的声明，如果没有找到，就假定该变量是全局变量。这种特性使得我们可以在闭包里随处引用全局变量，比如 jQuery 或 window。然而，这是一种不好的方式。\n\n考虑模块的独立性和封装，对其它对象的引用应该通过参数来引入。如果模块内需要使用其它全局对象，应该将这些对象作为参数来显式引用它们，而非在模块内直接引用这些对象的名字。以 jQuery 为例，若在参数中没有输入 jQuery 对象就在模块内直接引用 $ 这个对象，是有出错的可能的。正确的方式大致应该是这样的：\n``` javascript\n;(function (q, w) {\n  // q is jQuery\n  // w is window\n  // 局部变量及代码\n  // 返回\n})(jQuery, window);\n```\n\n相比隐式全局变量，将引用的对象作为参数，使它们得以和函数内的其它局部变量区分开来。这样做还有个好处，我们可以给那些全局对象起一个别名，比如上例中的 \"q\"。现在看看你的代码，是否没有经过对 jQuery 的引用就到处都是\"$\"？\n\n### 模块输出\n有时我们不只是要使用全局变量，我们也要声明和输出模块中的对象，这可以通过匿名函数的 return 语句来达成，而这也构成了一个完整的模块模式\n``` javascript \nvar MODULE = (function () {\n    var my = {},\n        privateVariable = 1;\n \n    function privateMethod() {\n        // ...\n    }\n \n    my.moduleProperty = 1;\n    my.moduleMethod = function () {\n        // ...\n    };\n \n    return my;\n}());\n\n```\n这段代码声明了一个变量 MODULE，它带有两个可访问的属性：moduleProperty 和 moduleMethod，其它的代码都封装在闭包中保持着私有状态。参考上文提过的参数输入，我们还可以通过参数引用其它全局变量。\n\n#### 输出简单对象\n很多时候我们 return 一个对象作为模块的输出，比如上例就是。\n另外，使用对象直接量（Object Literal Notation）来表达 JavaScript 对象是很常见的。比如：var x = { p1: 1, p2: \"2\", f: function(){ /*... */ } }\n很多时候我们都能见到这样的模块化代码：\n``` javsscript\n  var private_variable = 1;\n  function private_method() { /*...*/ }\n \n  var my = {\n    property1: 1,\n    property2: private_variable,\n    method1: private_method,\n    method2: function () {\n        // ...\n    }\n  };\n  return my;\n}());\n```\n\n另外，对于简单的模块化代码，若不涉及私有成员等，其实也可以直接使用对象直接量来表达一个模块：\n```javscript\nvar Widget1 = {\n  name: \"who am i?\",\n  settings: {\n    x: 0,\n    y: 0\n  },\n  call_me: function () {\n    // ...\n  }\n};\n```\n\n#### 输出函数\n有时候我们希望返回的并不是一个对象，而是一个函数。有两种需求要求我们返回一个函数，一种情况是我们需要它是一个函数，比如 jQuery，它是一个函数而不是一个简单对象；另一种情况是我们需要的是一个“类”而不是一个直接量，之后我们可以用 \"new\" 来实例它。目前版本的 JavaScript 并没有专门的“类”定义，但它却可以通过 function 来表达。\n``` javascript\nvar Cat = (function () {\n  // 私有成员及代码 ...\n \n  return function(name) {\n    this.name = name;\n    this.bark = function() { /*...*/ }\n  };\n}());\n \nvar tomcat = new Cat(\"Tom\");\ntomcat.bark();\n```\n为什么不直接定义一个 function 而要把它放在闭包里呢？简单点的情况，确实不需要使用 IIFE 这种形式，但复杂点的情况，在构造我们所需要的函数或是“类”时，若需要定义一些私有的函数，就有必要使用 IIFE 这种形式了。\n另外，在 ECMAScript5中，提出了 Object.create() 方法。这时可以将一个对象视作“类”，并使用 Object.create() 进行实例化，不需使用 \"new\"。\n### Revealing Module Pattern输出对象直接量\n前面已经提到一种形式是输出对象直接量（Object Literal Notation），而 Revealing Module Pattern 其实就是这种形式，只是做了一些限定。这种模式要求在私有范围内中定义变量和函数，然后返回一个匿名对象，在该对象中指定要公开的成员。参见下面的代码：\n``` javascript\nvar MODULE = (function () {\n  // 私有变量及函数\n  var x = 1;\n  function f1() {}\n  function f2() {}\n \n  return {\n    public_method1: f1,\n    public_method2: f2\n  };\n}());\n```\n\n## 模块模式的变化\n\n### 扩展\n上面的举例都是在一个地方定义模块，如果我们需要在数个文件中分别编写一个模块的不同部分该怎么办呢？或者说，如果我们需要对已有的模块作出扩展该怎么办呢？其实也很简单，将模块对象作为参数输入，扩展后再返回自己就可以了。比如：\n```javascript \nvar MODULE = (function (my) {\n  my.anotherMethod = function () {\n    // added method...\n  };\n \n  return my;\n}(MODULE));\n```\n上面的代码为对象 MODULE 增加了一个 \"anotherMethod\" 方法。\n\n### 松耦合扩展（Loose Augmentation）\n上面的代码要求 MODULE 对象是已经定义过的。如果这个模块的各个组成部分并没有加载顺序要求的话，其实可以允许输入的参数为空对象，那么我们将上例中的参数由 MODULE 改为 MODULE || {} 就可以了：\n``` javascript\nvar MODULE = (function (my) {\n  // add capabilities...\n  return my;\n}(MODULE || {}));\n```\n\n### 紧耦合扩展（Tight Augmentation）\n与上例不同，有时我们要求在扩展时调用以前已被定义的方法，这也有可能被用于覆盖已有的方法。这时，对模块的定义顺序是有要求的。\n```javascript\nvar MODULE = (function (my) {\n  var old_moduleMethod = my.moduleMethod;\n \n  my.moduleMethod = function () {\n    // 方法重载\n    // 可通过 old_moduleMethod 调用以前的方法...\n  };\n \n  return my;\n}(MODULE));\n```\n\n### 克隆与继承（Cloning and Inheritance）\n```javascript\nvar MODULE_TWO = (function (old) {\n    var my = {},\n        key;\n \n    for (key in old) {\n        if (old.hasOwnProperty(key)) {\n            my[key] = old[key];\n        }\n    }\n \n    var super_moduleMethod = old.moduleMethod;\n    my.moduleMethod = function () {\n        // override method on the clone, access to super through super_moduleMethod\n    };\n \n    return my;\n}(MODULE));\n```\n有时我们需要复制和继承原对象，上面的代码演示了这种操作，但未必完美。如果你可以使用 Object.create() 的话，请使用 Object.create() 来改写上面的代码：\n``` javascript\nvar MODULE_TWO = (function (old) {\n  var my = Object.create(old);\n \n  var super_moduleMethod = old.moduleMethod;\n  my.moduleMethod = function () {\n    // override method ...\n  };\n \n  return my;\n}(MODULE));\n```\n### 各种形式的混合\n以上介绍了常见的几种模块化形式，实际应用中有可能是这些形式的混合体。比如：\n```javascript\nvar UTIL = (function (parent, $) {\n    var my = parent.ajax = parent.ajax || {};\n \n    my.get = function (url, params, callback) {\n        // ok, so I'm cheating a bit :)\n        return $.getJSON(url, params, callback);\n    };\n \n    // etc...\n \n    return parent;\n}(UTIL || {}, jQuery));\n```\n\n## 实践大于一切\n好了，讲了这么多，动手实践一下。下面就来开发一个购物车模块。这个模块会保留自己一部分私有的成员变量与方法，保证数据的安全，同时也给外界提供一套可用的API，包括添加购物车，更新，删除购物车等功能：\n```javascript\n/*\n* cartModule.js \n* date : 2015-10-20 22:40\n* author : Linbao\n* required : jQuery.js\n* useage - HTML markup at least required an container and its class name is content\n* Module API : \n* - addToCart() // add an item to cart\n* - deleteById(id) // delete an item from cart, id must be spcefic\n* - itemCount() // return total number of item in the cart\n* - total() // caculate total amount in the cart\n* - populateCart() // populate all item infomation to html with formatted template\n*/\n+\n\n\"use strict\"\nvar cartModule = (function(){\n\n\tvar cart = [];\n\tfunction addItemToCart(product){\n\t\tconsole.log(product)\n\t\tcart.push(product);\n\t\tif(cart.length > 1){\n\t\t\tfor(var i = 0; i < cart.length; i++){\n\t\t\t\tfor(var j = i+1; j < cart.length; j++){\n\t\t\t\t\tif(cart[i].id === cart[j].id && cart[i].colorCode === cart[j].colorCode && cart[i].sizeCode === cart[j].colorCode){\n\t\t\t\t\t\tcart[i].num += cart[j].num;\n\t\t\t\t\t\tcart.splice(j,1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction deleteItemById(id,num){\n\t\t//console.log('process to delete ...')\n\t\tif(!num) {//delete whole item\n\t\t\tfor(var i = 0; i < cart.length; i++ ){\n\t\t\t\tif(cart[i].id == id){\n\t\t\t\t\tcart.splice(i,1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(id && typeof id !== 'Number') {parseInt(id);}\n\t\tfor(var i = 0; i < cart.length; i++){\n\t\t\tif(cart[i].id == id){\n\t\t\t\tif(cart[i].num >= 2){\n\t\t\t\t\tcart[i].num --;\n\t\t\t\t\t//console.log('num --')\n\t\t\t\t}else{\n\t\t\t\t\tcart.splice(i,1);\n\t\t\t\t\t//console.log('item has been totally remove from your cart');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log('end delete item from cart ')\n\t}\n\tfunction printOutCartConsole(){\n\t\tconsole.log(\"The total item in your cart is \"+ cart.length);\n\t\tfor(var i in cart){\n\t\t\tconsole.log('product ' + cart[i].id \n\t\t\t\t+ ', it\\'s color is ' + cart[i].color + ', size is ' + cart[i].size \n\t\t\t\t+ ' price is ' + cart[i].price +' num is ' + cart[i].num \n\t\t\t\t+ \"\\n\");\n\t\t}\n\t\toutPut2Html(cart);\n\t}\n\tfunction getTotalCartAmount(){\n\t\tvar totalAmount = 0.00;\n\t\tfor(var i = 0; i < cart.length; i++){\n\t\t\ttotalAmount += cart[i].price * cart[i].num;\n\t\t}\n\t\treturn totalAmount;\n\t}\n\tfunction count(){\n\t\tvar itemNum = 0;\n\t\tfor(var i in cart){\n\t\t\titemNum += cart[i].num;\n\t\t}\n\t\treturn itemNum;\n\t}\n\tfunction output2Html(obj){\n\t\tif(!obj) obj = cart;\n\t\tvar template = \"<span class='id'>$id$</span>\"+\n\t\t\t\t\t   \"<span class='color'>$color$</span>\"+\n\t\t\t\t\t   \"<span class='num'>$num$</span>\"+\n\t\t\t\t\t   \"<span class='price'>$price$</span>\";\n\t\tvar wrap = \"<div class='cart' id='cart' ></div>\";\n\t\t$('.content').html(wrap);\n\t\tfor(var i = 0; i < obj.length; i++){\n\t\t\tvar c = \"<div class='item' id='\"+obj[i]['id']+\"'>\";\n\t\t\tc += strReplace(template,obj[i]);\n\t\t\tc += '</div>';\n\t\t\t$('.cart').append(c);\n\t\t\tvar btnDel = $(\"<button class='delItem' id='delItem'>delete</button>\");\n\t\t\tbtnDel.bind('click',function(){\n\t\t\t\tvar self = $(this);\n\t\t\t\tvar id = self.parent().attr('id');\n\t\t\t\tcartModule.deleteById(id);\n\t\t\t});\n\t\t\t$('.item').append(btnDel);\n\t\t}\n\t}\n\tfunction strReplace(str,item){\n\t\treturn str.replace(/\\$\\w+\\$/gi, function(matches){\t\t\n\t\t\tvar value = item[matches.replace(/\\$/g,'')];\n\t\t\treturn !typeof(value) ? '': value;\n\t\t});\n\t}\n\treturn {\n\t\taddToCart : function(){\n\t\t\tvar test = Math.random() * 100000;\n\t\t\tvar productId = 1//(parseInt(test)) % 100;\n\t\t\tvar colorCode = 'AXD';\n\t\t\tvar sizeCode = 'L';\n\t\t\tvar price = Math.floor(((test % 7) * 100)) / 100;\n\t\t\tvar num = 1;\n\t\t\t\n\t\t\taddItemToCart({\n\t\t\t\t'id' : productId,\n\t\t\t\t'color' : colorCode,\n\t\t\t\t'size' : sizeCode,\n\t\t\t\t'price' : price,\n\t\t\t\t'num' : num\n\t\t\t});\n\t\t\tthis.populateCart();\n\t\t},\n\t\tdeleteById : function(id){\n\t\t\tdeleteItemById(id,1);\n\t\t\tthis.populateCart();\n\t\t},\n\t\titemCount : function(){\n\t\t\t//console.log(count());\n\t\t\treturn count();\n\t\t},\n\t\ttotal : function(){\n\t\t\tvar total = this.getTotalCartAmount();\n\t\t\tvar sum = this.count();\n\t\t\tconsole.log('There are '+ sum + ' item(s) in your cart, total amount is ' + total);\n\t\t\treturn total;\n\t\t},\n\t\tpopulateCart : function(){\n\t\t\toutput2Html();\n\t\t}\n\t}\n})()\n```\n\n{%blockquote Chen-Zhiqiang http://my.oschina.net/chenzhiqiang/blog/129783 JavaScript 模块化编程 - Module Pattern%}\n参考文献1\n{%endblockquote%}\n\n{%blockquote David Flanagan http://baike.baidu.com/link?url=z8w5MQ7w5UUBKNowDYiXV4S6KGW0sJBZCzFqxIKHCOoh9mon7hnFzOOekV4m7Dx0LczXed8vZnsv56FO3XXYZ_ Javascript权威指南 %}\n参考文献2\n{%endblockquote%}","slug":"使用Module-Design-Pattern编写的一个购物车模块","published":1,"updated":"2019-12-30T17:16:22.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq2b001eqyvyi2zdzto9","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>看了javascript design pattern，忍不住动手自己写了个购物车的模块，权当是加深印象吧，正好周末有的是时间。<br>The Module Pattern，网上资料少之又少，看看还是不怎么理解，不过再回来翻看，似乎挺有趣的。模块模式，也译为模组模式，是一种通用的对代码进行模块化组织与定义的方式。这里所说的模块（Modules），是指实现某特定功能的一组方法和代码。<br>模块模式使用了以下几种概念： </p>\n<h3 id=\"闭包和立即执行的匿名函数\"><a href=\"#闭包和立即执行的匿名函数\" class=\"headerlink\" title=\"闭包和立即执行的匿名函数\"></a>闭包和立即执行的匿名函数</h3><p>模块模式使用了 JavaScript 的一个特性，即闭包（Closures）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...dosomething here...</span></span><br><span class=\"line\">\t<span class=\"comment\">// return something...</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<p>在闭包中，可以定义私有变量和函数，外部无法访问它们，从而做到了私有成员的隐藏和隔离。而通过返回对象或函数，或是将某对象作为参数传入，在函数体内对该对象进行操作，就可以公开我们所希望对外暴露的公开的方法与数据。<br>而在上面的代码中，我们定义了一个匿名的函数，并用括号包括起来，这个括号是函数的入口，我是这样理解的，如果函数名后面加上圆括号就表示立即调用（执行）这个函数里面的代码（花括号部分的代码），也叫Immediately-Invoked Function Expression（IIFE）<br>这是模块模式的基本形式</p>\n<h3 id=\"输入参数\"><a href=\"#输入参数\" class=\"headerlink\" title=\"输入参数\"></a>输入参数</h3><p>Javascript没有块作用域，只有函数作用域，也就是说在一个函数内一个表达式要使用一个变量，那它首先是在离它最近的块中找，找不到则往外一层找，若还是找不到则看看全局作用域下有没有定义，若没有则报typeReferenceErr.另外，Javascript也非常有意思，比如变量的定义一般都是“被提前”到函数的开始第一句，但还是在原地初始化（若有）。<br>看看下面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"linbao\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">\tname : <span class=\"string\">\"linbaolee\"</span>,</span><br><span class=\"line\">\tproxy : &#123;</span><br><span class=\"line\">\t\tname : <span class=\"string\">\"boyce\"</span>,</span><br><span class=\"line\">\t\tgetName : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"people.name = \"</span> + people.name);<span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"people.proxy.name() = \"</span> + people.proxy.getName());</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = people.proxy.getName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test.call(people));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test());</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript 有一个特性叫做隐式全局变量（implied globals），当使用一个变量名时，JavaScript 解释器将反向遍历作用域链来查找变量的声明，如果没有找到，就假定该变量是全局变量。这种特性使得我们可以在闭包里随处引用全局变量，比如 jQuery 或 window。然而，这是一种不好的方式。</p>\n<p>考虑模块的独立性和封装，对其它对象的引用应该通过参数来引入。如果模块内需要使用其它全局对象，应该将这些对象作为参数来显式引用它们，而非在模块内直接引用这些对象的名字。以 jQuery 为例，若在参数中没有输入 jQuery 对象就在模块内直接引用 $ 这个对象，是有出错的可能的。正确的方式大致应该是这样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">q, w</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// q is jQuery</span></span><br><span class=\"line\">  <span class=\"comment\">// w is window</span></span><br><span class=\"line\">  <span class=\"comment\">// 局部变量及代码</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回</span></span><br><span class=\"line\">&#125;)(jQuery, <span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure></p>\n<p>相比隐式全局变量，将引用的对象作为参数，使它们得以和函数内的其它局部变量区分开来。这样做还有个好处，我们可以给那些全局对象起一个别名，比如上例中的 “q”。现在看看你的代码，是否没有经过对 jQuery 的引用就到处都是”$”？</p>\n<h3 id=\"模块输出\"><a href=\"#模块输出\" class=\"headerlink\" title=\"模块输出\"></a>模块输出</h3><p>有时我们不只是要使用全局变量，我们也要声明和输出模块中的对象，这可以通过匿名函数的 return 语句来达成，而这也构成了一个完整的模块模式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> my = &#123;&#125;,</span><br><span class=\"line\">        privateVariable = <span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateMethod</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    my.moduleProperty = <span class=\"number\">1</span>;</span><br><span class=\"line\">    my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<p>这段代码声明了一个变量 MODULE，它带有两个可访问的属性：moduleProperty 和 moduleMethod，其它的代码都封装在闭包中保持着私有状态。参考上文提过的参数输入，我们还可以通过参数引用其它全局变量。</p>\n<h4 id=\"输出简单对象\"><a href=\"#输出简单对象\" class=\"headerlink\" title=\"输出简单对象\"></a>输出简单对象</h4><p>很多时候我们 return 一个对象作为模块的输出，比如上例就是。<br>另外，使用对象直接量（Object Literal Notation）来表达 JavaScript 对象是很常见的。比如：var x = { p1: 1, p2: “2”, f: function(){ /<em>… </em>/ } }<br>很多时候我们都能见到这样的模块化代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  var private_variable = 1;</span><br><span class=\"line\">  function private_method() &#123; /*...*/ &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  var my = &#123;</span><br><span class=\"line\">    property1: 1,</span><br><span class=\"line\">    property2: private_variable,</span><br><span class=\"line\">    method1: private_method,</span><br><span class=\"line\">    method2: function () &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return my;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<p>另外，对于简单的模块化代码，若不涉及私有成员等，其实也可以直接使用对象直接量来表达一个模块：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Widget1 = &#123;</span><br><span class=\"line\">  name: &quot;who am i?&quot;,</span><br><span class=\"line\">  settings: &#123;</span><br><span class=\"line\">    x: 0,</span><br><span class=\"line\">    y: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  call_me: function () &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"输出函数\"><a href=\"#输出函数\" class=\"headerlink\" title=\"输出函数\"></a>输出函数</h4><p>有时候我们希望返回的并不是一个对象，而是一个函数。有两种需求要求我们返回一个函数，一种情况是我们需要它是一个函数，比如 jQuery，它是一个函数而不是一个简单对象；另一种情况是我们需要的是一个“类”而不是一个直接量，之后我们可以用 “new” 来实例它。目前版本的 JavaScript 并没有专门的“类”定义，但它却可以通过 function 来表达。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Cat = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 私有成员及代码 ...</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bark = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/*...*/</span> &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> tomcat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">\"Tom\"</span>);</span><br><span class=\"line\">tomcat.bark();</span><br></pre></td></tr></table></figure></p>\n<p>为什么不直接定义一个 function 而要把它放在闭包里呢？简单点的情况，确实不需要使用 IIFE 这种形式，但复杂点的情况，在构造我们所需要的函数或是“类”时，若需要定义一些私有的函数，就有必要使用 IIFE 这种形式了。<br>另外，在 ECMAScript5中，提出了 Object.create() 方法。这时可以将一个对象视作“类”，并使用 Object.create() 进行实例化，不需使用 “new”。</p>\n<h3 id=\"Revealing-Module-Pattern输出对象直接量\"><a href=\"#Revealing-Module-Pattern输出对象直接量\" class=\"headerlink\" title=\"Revealing Module Pattern输出对象直接量\"></a>Revealing Module Pattern输出对象直接量</h3><p>前面已经提到一种形式是输出对象直接量（Object Literal Notation），而 Revealing Module Pattern 其实就是这种形式，只是做了一些限定。这种模式要求在私有范围内中定义变量和函数，然后返回一个匿名对象，在该对象中指定要公开的成员。参见下面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 私有变量及函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    public_method1: f1,</span><br><span class=\"line\">    public_method2: f2</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模块模式的变化\"><a href=\"#模块模式的变化\" class=\"headerlink\" title=\"模块模式的变化\"></a>模块模式的变化</h2><h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>上面的举例都是在一个地方定义模块，如果我们需要在数个文件中分别编写一个模块的不同部分该怎么办呢？或者说，如果我们需要对已有的模块作出扩展该怎么办呢？其实也很简单，将模块对象作为参数输入，扩展后再返回自己就可以了。比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">my</span>) </span>&#123;</span><br><span class=\"line\">  my.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// added method...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;(MODULE));</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码为对象 MODULE 增加了一个 “anotherMethod” 方法。</p>\n<h3 id=\"松耦合扩展（Loose-Augmentation）\"><a href=\"#松耦合扩展（Loose-Augmentation）\" class=\"headerlink\" title=\"松耦合扩展（Loose Augmentation）\"></a>松耦合扩展（Loose Augmentation）</h3><p>上面的代码要求 MODULE 对象是已经定义过的。如果这个模块的各个组成部分并没有加载顺序要求的话，其实可以允许输入的参数为空对象，那么我们将上例中的参数由 MODULE 改为 MODULE || {} 就可以了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">my</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// add capabilities...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;(MODULE || &#123;&#125;));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"紧耦合扩展（Tight-Augmentation）\"><a href=\"#紧耦合扩展（Tight-Augmentation）\" class=\"headerlink\" title=\"紧耦合扩展（Tight Augmentation）\"></a>紧耦合扩展（Tight Augmentation）</h3><p>与上例不同，有时我们要求在扩展时调用以前已被定义的方法，这也有可能被用于覆盖已有的方法。这时，对模块的定义顺序是有要求的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">my</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> old_moduleMethod = my.moduleMethod;</span><br><span class=\"line\"> </span><br><span class=\"line\">  my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方法重载</span></span><br><span class=\"line\">    <span class=\"comment\">// 可通过 old_moduleMethod 调用以前的方法...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;(MODULE));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"克隆与继承（Cloning-and-Inheritance）\"><a href=\"#克隆与继承（Cloning-and-Inheritance）\" class=\"headerlink\" title=\"克隆与继承（Cloning and Inheritance）\"></a>克隆与继承（Cloning and Inheritance）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE_TWO = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">old</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> my = &#123;&#125;,</span><br><span class=\"line\">        key;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> old) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (old.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">            my[key] = old[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">var</span> super_moduleMethod = old.moduleMethod;</span><br><span class=\"line\">    my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// override method on the clone, access to super through super_moduleMethod</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;(MODULE));</span><br></pre></td></tr></table></figure>\n<p>有时我们需要复制和继承原对象，上面的代码演示了这种操作，但未必完美。如果你可以使用 Object.create() 的话，请使用 Object.create() 来改写上面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE_TWO = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">old</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> my = <span class=\"built_in\">Object</span>.create(old);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">var</span> super_moduleMethod = old.moduleMethod;</span><br><span class=\"line\">  my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// override method ...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;(MODULE));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"各种形式的混合\"><a href=\"#各种形式的混合\" class=\"headerlink\" title=\"各种形式的混合\"></a>各种形式的混合</h3><p>以上介绍了常见的几种模块化形式，实际应用中有可能是这些形式的混合体。比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> UTIL = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, $</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> my = parent.ajax = parent.ajax || &#123;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    my.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, params, callback</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ok, so I'm cheating a bit :)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $.getJSON(url, params, callback);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// etc...</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">&#125;(UTIL || &#123;&#125;, jQuery));</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"实践大于一切\"><a href=\"#实践大于一切\" class=\"headerlink\" title=\"实践大于一切\"></a>实践大于一切</h2><p>好了，讲了这么多，动手实践一下。下面就来开发一个购物车模块。这个模块会保留自己一部分私有的成员变量与方法，保证数据的安全，同时也给外界提供一套可用的API，包括添加购物车，更新，删除购物车等功能：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* cartModule.js </span></span><br><span class=\"line\"><span class=\"comment\">* date : 2015-10-20 22:40</span></span><br><span class=\"line\"><span class=\"comment\">* author : Linbao</span></span><br><span class=\"line\"><span class=\"comment\">* required : jQuery.js</span></span><br><span class=\"line\"><span class=\"comment\">* useage - HTML markup at least required an container and its class name is content</span></span><br><span class=\"line\"><span class=\"comment\">* Module API : </span></span><br><span class=\"line\"><span class=\"comment\">* - addToCart() // add an item to cart</span></span><br><span class=\"line\"><span class=\"comment\">* - deleteById(id) // delete an item from cart, id must be spcefic</span></span><br><span class=\"line\"><span class=\"comment\">* - itemCount() // return total number of item in the cart</span></span><br><span class=\"line\"><span class=\"comment\">* - total() // caculate total amount in the cart</span></span><br><span class=\"line\"><span class=\"comment\">* - populateCart() // populate all item infomation to html with formatted template</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">+</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cartModule = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cart = [];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addItemToCart</span>(<span class=\"params\">product</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(product)</span><br><span class=\"line\">\t\tcart.push(product);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cart.length &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cart.length; i++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = i+<span class=\"number\">1</span>; j &lt; cart.length; j++)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(cart[i].id === cart[j].id &amp;&amp; cart[i].colorCode === cart[j].colorCode &amp;&amp; cart[i].sizeCode === cart[j].colorCode)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tcart[i].num += cart[j].num;</span><br><span class=\"line\">\t\t\t\t\t\tcart.splice(j,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteItemById</span>(<span class=\"params\">id,num</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//console.log('process to delete ...')</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!num) &#123;<span class=\"comment\">//delete whole item</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cart.length; i++ )&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(cart[i].id == id)&#123;</span><br><span class=\"line\">\t\t\t\t\tcart.splice(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(id &amp;&amp; <span class=\"keyword\">typeof</span> id !== <span class=\"string\">'Number'</span>) &#123;<span class=\"built_in\">parseInt</span>(id);&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cart.length; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(cart[i].id == id)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(cart[i].num &gt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tcart[i].num --;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//console.log('num --')</span></span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tcart.splice(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//console.log('item has been totally remove from your cart');</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'end delete item from cart '</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printOutCartConsole</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"The total item in your cart is \"</span>+ cart.length);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> cart)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'product '</span> + cart[i].id </span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">', it\\'s color is '</span> + cart[i].color + <span class=\"string\">', size is '</span> + cart[i].size </span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">' price is '</span> + cart[i].price +<span class=\"string\">' num is '</span> + cart[i].num </span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\toutPut2Html(cart);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTotalCartAmount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> totalAmount = <span class=\"number\">0.00</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cart.length; i++)&#123;</span><br><span class=\"line\">\t\t\ttotalAmount += cart[i].price * cart[i].num;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> totalAmount;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> itemNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> cart)&#123;</span><br><span class=\"line\">\t\t\titemNum += cart[i].num;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> itemNum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">output2Html</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!obj) obj = cart;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> template = <span class=\"string\">\"&lt;span class='id'&gt;$id$&lt;/span&gt;\"</span>+</span><br><span class=\"line\">\t\t\t\t\t   <span class=\"string\">\"&lt;span class='color'&gt;$color$&lt;/span&gt;\"</span>+</span><br><span class=\"line\">\t\t\t\t\t   <span class=\"string\">\"&lt;span class='num'&gt;$num$&lt;/span&gt;\"</span>+</span><br><span class=\"line\">\t\t\t\t\t   <span class=\"string\">\"&lt;span class='price'&gt;$price$&lt;/span&gt;\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> wrap = <span class=\"string\">\"&lt;div class='cart' id='cart' &gt;&lt;/div&gt;\"</span>;</span><br><span class=\"line\">\t\t$(<span class=\"string\">'.content'</span>).html(wrap);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; obj.length; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> c = <span class=\"string\">\"&lt;div class='item' id='\"</span>+obj[i][<span class=\"string\">'id'</span>]+<span class=\"string\">\"'&gt;\"</span>;</span><br><span class=\"line\">\t\t\tc += strReplace(template,obj[i]);</span><br><span class=\"line\">\t\t\tc += <span class=\"string\">'&lt;/div&gt;'</span>;</span><br><span class=\"line\">\t\t\t$(<span class=\"string\">'.cart'</span>).append(c);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> btnDel = $(<span class=\"string\">\"&lt;button class='delItem' id='delItem'&gt;delete&lt;/button&gt;\"</span>);</span><br><span class=\"line\">\t\t\tbtnDel.bind(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> self = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> id = self.parent().attr(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">\t\t\t\tcartModule.deleteById(id);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t$(<span class=\"string\">'.item'</span>).append(btnDel);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strReplace</span>(<span class=\"params\">str,item</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/\\$\\w+\\$/gi</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matches</span>)</span>&#123;\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> value = item[matches.replace(<span class=\"regexp\">/\\$/g</span>,<span class=\"string\">''</span>)];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> !<span class=\"keyword\">typeof</span>(value) ? <span class=\"string\">''</span>: value;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\taddToCart : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> test = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">100000</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> productId = <span class=\"number\">1</span><span class=\"comment\">//(parseInt(test)) % 100;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> colorCode = <span class=\"string\">'AXD'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> sizeCode = <span class=\"string\">'L'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> price = <span class=\"built_in\">Math</span>.floor(((test % <span class=\"number\">7</span>) * <span class=\"number\">100</span>)) / <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\taddItemToCart(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'id'</span> : productId,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'color'</span> : colorCode,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'size'</span> : sizeCode,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'price'</span> : price,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'num'</span> : num</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.populateCart();</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tdeleteById : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tdeleteItemById(id,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.populateCart();</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\titemCount : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//console.log(count());</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> count();</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\ttotal : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> total = <span class=\"keyword\">this</span>.getTotalCartAmount();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> sum = <span class=\"keyword\">this</span>.count();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'There are '</span>+ sum + <span class=\"string\">' item(s) in your cart, total amount is '</span> + total);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> total;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tpopulateCart : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\toutput2Html();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<blockquote><p>参考文献1</p>\n<footer><strong>Chen-Zhiqiang</strong><cite><a href=\"http://my.oschina.net/chenzhiqiang/blog/129783\" target=\"_blank\" rel=\"noopener\">JavaScript 模块化编程 - Module Pattern</a></cite></footer></blockquote>\n<blockquote><p>参考文献2</p>\n<footer><strong>David Flanagan</strong><cite><a href=\"http://baike.baidu.com/link?url=z8w5MQ7w5UUBKNowDYiXV4S6KGW0sJBZCzFqxIKHCOoh9mon7hnFzOOekV4m7Dx0LczXed8vZnsv56FO3XXYZ_\" target=\"_blank\" rel=\"noopener\">Javascript权威指南</a></cite></footer></blockquote>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>看了javascript design pattern，忍不住动手自己写了个购物车的模块，权当是加深印象吧，正好周末有的是时间。<br>The Module Pattern，网上资料少之又少，看看还是不怎么理解，不过再回来翻看，似乎挺有趣的。模块模式，也译为模组模式，是一种通用的对代码进行模块化组织与定义的方式。这里所说的模块（Modules），是指实现某特定功能的一组方法和代码。<br>模块模式使用了以下几种概念： </p>\n<h3 id=\"闭包和立即执行的匿名函数\"><a href=\"#闭包和立即执行的匿名函数\" class=\"headerlink\" title=\"闭包和立即执行的匿名函数\"></a>闭包和立即执行的匿名函数</h3><p>模块模式使用了 JavaScript 的一个特性，即闭包（Closures）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...dosomething here...</span></span><br><span class=\"line\">\t<span class=\"comment\">// return something...</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<p>在闭包中，可以定义私有变量和函数，外部无法访问它们，从而做到了私有成员的隐藏和隔离。而通过返回对象或函数，或是将某对象作为参数传入，在函数体内对该对象进行操作，就可以公开我们所希望对外暴露的公开的方法与数据。<br>而在上面的代码中，我们定义了一个匿名的函数，并用括号包括起来，这个括号是函数的入口，我是这样理解的，如果函数名后面加上圆括号就表示立即调用（执行）这个函数里面的代码（花括号部分的代码），也叫Immediately-Invoked Function Expression（IIFE）<br>这是模块模式的基本形式</p>\n<h3 id=\"输入参数\"><a href=\"#输入参数\" class=\"headerlink\" title=\"输入参数\"></a>输入参数</h3><p>Javascript没有块作用域，只有函数作用域，也就是说在一个函数内一个表达式要使用一个变量，那它首先是在离它最近的块中找，找不到则往外一层找，若还是找不到则看看全局作用域下有没有定义，若没有则报typeReferenceErr.另外，Javascript也非常有意思，比如变量的定义一般都是“被提前”到函数的开始第一句，但还是在原地初始化（若有）。<br>看看下面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"linbao\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">\tname : <span class=\"string\">\"linbaolee\"</span>,</span><br><span class=\"line\">\tproxy : &#123;</span><br><span class=\"line\">\t\tname : <span class=\"string\">\"boyce\"</span>,</span><br><span class=\"line\">\t\tgetName : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"people.name = \"</span> + people.name);<span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"people.proxy.name() = \"</span> + people.proxy.getName());</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = people.proxy.getName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test.call(people));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test());</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript 有一个特性叫做隐式全局变量（implied globals），当使用一个变量名时，JavaScript 解释器将反向遍历作用域链来查找变量的声明，如果没有找到，就假定该变量是全局变量。这种特性使得我们可以在闭包里随处引用全局变量，比如 jQuery 或 window。然而，这是一种不好的方式。</p>\n<p>考虑模块的独立性和封装，对其它对象的引用应该通过参数来引入。如果模块内需要使用其它全局对象，应该将这些对象作为参数来显式引用它们，而非在模块内直接引用这些对象的名字。以 jQuery 为例，若在参数中没有输入 jQuery 对象就在模块内直接引用 $ 这个对象，是有出错的可能的。正确的方式大致应该是这样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">q, w</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// q is jQuery</span></span><br><span class=\"line\">  <span class=\"comment\">// w is window</span></span><br><span class=\"line\">  <span class=\"comment\">// 局部变量及代码</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回</span></span><br><span class=\"line\">&#125;)(jQuery, <span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure></p>\n<p>相比隐式全局变量，将引用的对象作为参数，使它们得以和函数内的其它局部变量区分开来。这样做还有个好处，我们可以给那些全局对象起一个别名，比如上例中的 “q”。现在看看你的代码，是否没有经过对 jQuery 的引用就到处都是”$”？</p>\n<h3 id=\"模块输出\"><a href=\"#模块输出\" class=\"headerlink\" title=\"模块输出\"></a>模块输出</h3><p>有时我们不只是要使用全局变量，我们也要声明和输出模块中的对象，这可以通过匿名函数的 return 语句来达成，而这也构成了一个完整的模块模式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> my = &#123;&#125;,</span><br><span class=\"line\">        privateVariable = <span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateMethod</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    my.moduleProperty = <span class=\"number\">1</span>;</span><br><span class=\"line\">    my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<p>这段代码声明了一个变量 MODULE，它带有两个可访问的属性：moduleProperty 和 moduleMethod，其它的代码都封装在闭包中保持着私有状态。参考上文提过的参数输入，我们还可以通过参数引用其它全局变量。</p>\n<h4 id=\"输出简单对象\"><a href=\"#输出简单对象\" class=\"headerlink\" title=\"输出简单对象\"></a>输出简单对象</h4><p>很多时候我们 return 一个对象作为模块的输出，比如上例就是。<br>另外，使用对象直接量（Object Literal Notation）来表达 JavaScript 对象是很常见的。比如：var x = { p1: 1, p2: “2”, f: function(){ /<em>… </em>/ } }<br>很多时候我们都能见到这样的模块化代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  var private_variable = 1;</span><br><span class=\"line\">  function private_method() &#123; /*...*/ &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  var my = &#123;</span><br><span class=\"line\">    property1: 1,</span><br><span class=\"line\">    property2: private_variable,</span><br><span class=\"line\">    method1: private_method,</span><br><span class=\"line\">    method2: function () &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return my;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<p>另外，对于简单的模块化代码，若不涉及私有成员等，其实也可以直接使用对象直接量来表达一个模块：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Widget1 = &#123;</span><br><span class=\"line\">  name: &quot;who am i?&quot;,</span><br><span class=\"line\">  settings: &#123;</span><br><span class=\"line\">    x: 0,</span><br><span class=\"line\">    y: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  call_me: function () &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"输出函数\"><a href=\"#输出函数\" class=\"headerlink\" title=\"输出函数\"></a>输出函数</h4><p>有时候我们希望返回的并不是一个对象，而是一个函数。有两种需求要求我们返回一个函数，一种情况是我们需要它是一个函数，比如 jQuery，它是一个函数而不是一个简单对象；另一种情况是我们需要的是一个“类”而不是一个直接量，之后我们可以用 “new” 来实例它。目前版本的 JavaScript 并没有专门的“类”定义，但它却可以通过 function 来表达。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Cat = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 私有成员及代码 ...</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bark = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/*...*/</span> &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> tomcat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">\"Tom\"</span>);</span><br><span class=\"line\">tomcat.bark();</span><br></pre></td></tr></table></figure></p>\n<p>为什么不直接定义一个 function 而要把它放在闭包里呢？简单点的情况，确实不需要使用 IIFE 这种形式，但复杂点的情况，在构造我们所需要的函数或是“类”时，若需要定义一些私有的函数，就有必要使用 IIFE 这种形式了。<br>另外，在 ECMAScript5中，提出了 Object.create() 方法。这时可以将一个对象视作“类”，并使用 Object.create() 进行实例化，不需使用 “new”。</p>\n<h3 id=\"Revealing-Module-Pattern输出对象直接量\"><a href=\"#Revealing-Module-Pattern输出对象直接量\" class=\"headerlink\" title=\"Revealing Module Pattern输出对象直接量\"></a>Revealing Module Pattern输出对象直接量</h3><p>前面已经提到一种形式是输出对象直接量（Object Literal Notation），而 Revealing Module Pattern 其实就是这种形式，只是做了一些限定。这种模式要求在私有范围内中定义变量和函数，然后返回一个匿名对象，在该对象中指定要公开的成员。参见下面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 私有变量及函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    public_method1: f1,</span><br><span class=\"line\">    public_method2: f2</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模块模式的变化\"><a href=\"#模块模式的变化\" class=\"headerlink\" title=\"模块模式的变化\"></a>模块模式的变化</h2><h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>上面的举例都是在一个地方定义模块，如果我们需要在数个文件中分别编写一个模块的不同部分该怎么办呢？或者说，如果我们需要对已有的模块作出扩展该怎么办呢？其实也很简单，将模块对象作为参数输入，扩展后再返回自己就可以了。比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">my</span>) </span>&#123;</span><br><span class=\"line\">  my.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// added method...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;(MODULE));</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码为对象 MODULE 增加了一个 “anotherMethod” 方法。</p>\n<h3 id=\"松耦合扩展（Loose-Augmentation）\"><a href=\"#松耦合扩展（Loose-Augmentation）\" class=\"headerlink\" title=\"松耦合扩展（Loose Augmentation）\"></a>松耦合扩展（Loose Augmentation）</h3><p>上面的代码要求 MODULE 对象是已经定义过的。如果这个模块的各个组成部分并没有加载顺序要求的话，其实可以允许输入的参数为空对象，那么我们将上例中的参数由 MODULE 改为 MODULE || {} 就可以了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">my</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// add capabilities...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;(MODULE || &#123;&#125;));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"紧耦合扩展（Tight-Augmentation）\"><a href=\"#紧耦合扩展（Tight-Augmentation）\" class=\"headerlink\" title=\"紧耦合扩展（Tight Augmentation）\"></a>紧耦合扩展（Tight Augmentation）</h3><p>与上例不同，有时我们要求在扩展时调用以前已被定义的方法，这也有可能被用于覆盖已有的方法。这时，对模块的定义顺序是有要求的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">my</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> old_moduleMethod = my.moduleMethod;</span><br><span class=\"line\"> </span><br><span class=\"line\">  my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方法重载</span></span><br><span class=\"line\">    <span class=\"comment\">// 可通过 old_moduleMethod 调用以前的方法...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;(MODULE));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"克隆与继承（Cloning-and-Inheritance）\"><a href=\"#克隆与继承（Cloning-and-Inheritance）\" class=\"headerlink\" title=\"克隆与继承（Cloning and Inheritance）\"></a>克隆与继承（Cloning and Inheritance）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE_TWO = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">old</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> my = &#123;&#125;,</span><br><span class=\"line\">        key;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> old) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (old.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">            my[key] = old[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">var</span> super_moduleMethod = old.moduleMethod;</span><br><span class=\"line\">    my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// override method on the clone, access to super through super_moduleMethod</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;(MODULE));</span><br></pre></td></tr></table></figure>\n<p>有时我们需要复制和继承原对象，上面的代码演示了这种操作，但未必完美。如果你可以使用 Object.create() 的话，请使用 Object.create() 来改写上面的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MODULE_TWO = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">old</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> my = <span class=\"built_in\">Object</span>.create(old);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">var</span> super_moduleMethod = old.moduleMethod;</span><br><span class=\"line\">  my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// override method ...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> my;</span><br><span class=\"line\">&#125;(MODULE));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"各种形式的混合\"><a href=\"#各种形式的混合\" class=\"headerlink\" title=\"各种形式的混合\"></a>各种形式的混合</h3><p>以上介绍了常见的几种模块化形式，实际应用中有可能是这些形式的混合体。比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> UTIL = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, $</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> my = parent.ajax = parent.ajax || &#123;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    my.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, params, callback</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ok, so I'm cheating a bit :)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $.getJSON(url, params, callback);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// etc...</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">&#125;(UTIL || &#123;&#125;, jQuery));</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"实践大于一切\"><a href=\"#实践大于一切\" class=\"headerlink\" title=\"实践大于一切\"></a>实践大于一切</h2><p>好了，讲了这么多，动手实践一下。下面就来开发一个购物车模块。这个模块会保留自己一部分私有的成员变量与方法，保证数据的安全，同时也给外界提供一套可用的API，包括添加购物车，更新，删除购物车等功能：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* cartModule.js </span></span><br><span class=\"line\"><span class=\"comment\">* date : 2015-10-20 22:40</span></span><br><span class=\"line\"><span class=\"comment\">* author : Linbao</span></span><br><span class=\"line\"><span class=\"comment\">* required : jQuery.js</span></span><br><span class=\"line\"><span class=\"comment\">* useage - HTML markup at least required an container and its class name is content</span></span><br><span class=\"line\"><span class=\"comment\">* Module API : </span></span><br><span class=\"line\"><span class=\"comment\">* - addToCart() // add an item to cart</span></span><br><span class=\"line\"><span class=\"comment\">* - deleteById(id) // delete an item from cart, id must be spcefic</span></span><br><span class=\"line\"><span class=\"comment\">* - itemCount() // return total number of item in the cart</span></span><br><span class=\"line\"><span class=\"comment\">* - total() // caculate total amount in the cart</span></span><br><span class=\"line\"><span class=\"comment\">* - populateCart() // populate all item infomation to html with formatted template</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">+</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cartModule = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cart = [];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addItemToCart</span>(<span class=\"params\">product</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(product)</span><br><span class=\"line\">\t\tcart.push(product);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cart.length &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cart.length; i++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = i+<span class=\"number\">1</span>; j &lt; cart.length; j++)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(cart[i].id === cart[j].id &amp;&amp; cart[i].colorCode === cart[j].colorCode &amp;&amp; cart[i].sizeCode === cart[j].colorCode)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tcart[i].num += cart[j].num;</span><br><span class=\"line\">\t\t\t\t\t\tcart.splice(j,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteItemById</span>(<span class=\"params\">id,num</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//console.log('process to delete ...')</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!num) &#123;<span class=\"comment\">//delete whole item</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cart.length; i++ )&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(cart[i].id == id)&#123;</span><br><span class=\"line\">\t\t\t\t\tcart.splice(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(id &amp;&amp; <span class=\"keyword\">typeof</span> id !== <span class=\"string\">'Number'</span>) &#123;<span class=\"built_in\">parseInt</span>(id);&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cart.length; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(cart[i].id == id)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(cart[i].num &gt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tcart[i].num --;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//console.log('num --')</span></span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tcart.splice(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//console.log('item has been totally remove from your cart');</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'end delete item from cart '</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printOutCartConsole</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"The total item in your cart is \"</span>+ cart.length);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> cart)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'product '</span> + cart[i].id </span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">', it\\'s color is '</span> + cart[i].color + <span class=\"string\">', size is '</span> + cart[i].size </span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">' price is '</span> + cart[i].price +<span class=\"string\">' num is '</span> + cart[i].num </span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\toutPut2Html(cart);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTotalCartAmount</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> totalAmount = <span class=\"number\">0.00</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cart.length; i++)&#123;</span><br><span class=\"line\">\t\t\ttotalAmount += cart[i].price * cart[i].num;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> totalAmount;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> itemNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> cart)&#123;</span><br><span class=\"line\">\t\t\titemNum += cart[i].num;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> itemNum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">output2Html</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!obj) obj = cart;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> template = <span class=\"string\">\"&lt;span class='id'&gt;$id$&lt;/span&gt;\"</span>+</span><br><span class=\"line\">\t\t\t\t\t   <span class=\"string\">\"&lt;span class='color'&gt;$color$&lt;/span&gt;\"</span>+</span><br><span class=\"line\">\t\t\t\t\t   <span class=\"string\">\"&lt;span class='num'&gt;$num$&lt;/span&gt;\"</span>+</span><br><span class=\"line\">\t\t\t\t\t   <span class=\"string\">\"&lt;span class='price'&gt;$price$&lt;/span&gt;\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> wrap = <span class=\"string\">\"&lt;div class='cart' id='cart' &gt;&lt;/div&gt;\"</span>;</span><br><span class=\"line\">\t\t$(<span class=\"string\">'.content'</span>).html(wrap);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; obj.length; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> c = <span class=\"string\">\"&lt;div class='item' id='\"</span>+obj[i][<span class=\"string\">'id'</span>]+<span class=\"string\">\"'&gt;\"</span>;</span><br><span class=\"line\">\t\t\tc += strReplace(template,obj[i]);</span><br><span class=\"line\">\t\t\tc += <span class=\"string\">'&lt;/div&gt;'</span>;</span><br><span class=\"line\">\t\t\t$(<span class=\"string\">'.cart'</span>).append(c);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> btnDel = $(<span class=\"string\">\"&lt;button class='delItem' id='delItem'&gt;delete&lt;/button&gt;\"</span>);</span><br><span class=\"line\">\t\t\tbtnDel.bind(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> self = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> id = self.parent().attr(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">\t\t\t\tcartModule.deleteById(id);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t$(<span class=\"string\">'.item'</span>).append(btnDel);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strReplace</span>(<span class=\"params\">str,item</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/\\$\\w+\\$/gi</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matches</span>)</span>&#123;\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> value = item[matches.replace(<span class=\"regexp\">/\\$/g</span>,<span class=\"string\">''</span>)];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> !<span class=\"keyword\">typeof</span>(value) ? <span class=\"string\">''</span>: value;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\taddToCart : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> test = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">100000</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> productId = <span class=\"number\">1</span><span class=\"comment\">//(parseInt(test)) % 100;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> colorCode = <span class=\"string\">'AXD'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> sizeCode = <span class=\"string\">'L'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> price = <span class=\"built_in\">Math</span>.floor(((test % <span class=\"number\">7</span>) * <span class=\"number\">100</span>)) / <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\taddItemToCart(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'id'</span> : productId,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'color'</span> : colorCode,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'size'</span> : sizeCode,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'price'</span> : price,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'num'</span> : num</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.populateCart();</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tdeleteById : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tdeleteItemById(id,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.populateCart();</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\titemCount : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//console.log(count());</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> count();</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\ttotal : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> total = <span class=\"keyword\">this</span>.getTotalCartAmount();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> sum = <span class=\"keyword\">this</span>.count();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'There are '</span>+ sum + <span class=\"string\">' item(s) in your cart, total amount is '</span> + total);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> total;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tpopulateCart : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\toutput2Html();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<blockquote><p>参考文献1</p>\n<footer><strong>Chen-Zhiqiang</strong><cite><a href=\"http://my.oschina.net/chenzhiqiang/blog/129783\" target=\"_blank\" rel=\"noopener\">JavaScript 模块化编程 - Module Pattern</a></cite></footer></blockquote>\n<blockquote><p>参考文献2</p>\n<footer><strong>David Flanagan</strong><cite><a href=\"http://baike.baidu.com/link?url=z8w5MQ7w5UUBKNowDYiXV4S6KGW0sJBZCzFqxIKHCOoh9mon7hnFzOOekV4m7Dx0LczXed8vZnsv56FO3XXYZ_\" target=\"_blank\" rel=\"noopener\">Javascript权威指南</a></cite></footer></blockquote>"},{"title":"使用Tomcat Maven插件持续快捷部署Web项目","date":"2015-07-12T06:21:46.000Z","alias":null,"_content":"支持中文标题。。。这货\n\n到目前为止用maven还是蛮爽的，今天一直在测试项目，不断改不断发布不断重启也是醉了。。。所以上网找了一此资料，别说这个自动发布插件还不错，基本能满足需求，先记下来\n## 准备工作\n1. 下载并安装tomcat,这里我选的是tomcat 7.0.62;\n2. 安装好的maven,并配置好能用\n3. 准备一个Maven Web项目\n\n网上关于怎么配置怎么建立maven web项目的资料很多，可以参考，建议多看几篇\n## Maven部署Web项目到Tomcat的配置\n分别对tomat的tomcat-uses.xml和maven项目的pom.xml进行修改\n### 配置Tomcat角色，用户\n```xml\n<!-- tomcat-users.xml -->\n<tomcat-users>\n    <role rolename=\"admin-gui\"/>\n    <role rolename=\"admin-script\"/>\n    <role rolename=\"manager-gui\"/>\n    <role rolename=\"manager-script\"/>\n    <role rolename=\"manager-jmx\"/>\n    <role rolename=\"manager-status\"/>\n    <user username=\"admin\" password=\"admin\" roles=\"manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui\"/>\n    <user username=\"maven\" password=\"root\" roles=\"manager-script\"/>\n</tomcat-users>\n```\n看到user这个标签，分配给maven的只要manager-script就行\n### Maven配置\n1. 打包插件配置\n```xml\n<build>\n\t<plugins>\n\t\t<!-- compiler插件, 设定JDK版本 -->\n\t\t<plugin>\n\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t<version>3.1</version>\n\t\t\t<configuration>\n\t\t\t\t<source>${java.version}</source>\n\t\t\t\t<target>${java.version}</target>\n\t\t\t\t<showWarnings>true</showWarnings>\n\t\t\t</configuration>\n\t\t</plugin>\n\t\t<!-- war打包插件, 设定war包名称带版本号 -->\n\t\t<plugin>\n\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t<artifactId>maven-war-plugin</artifactId>\n\t\t\t<version>2.4</version>\n\t\t\t<configuration>\n\t\t\t\t<warName>${project.artifactId}-${project.version}</warName>\n\t\t\t</configuration>\n\t\t</plugin>\n\t</plugins>\n</build> \n```\n2. 添加maven-tomcat插件依赖\n```xml\n<!-- tomcat 7 -->\n<dependency>\n\t<groupId>org.apache.tomcat.maven</groupId>\n\t<artifactId>tomcat7-maven-plugin</artifactId>\n\t<version>2.2</version>\n</dependency>\n```\n{% blockquote Apache http://mvnrepository.com/artifact/org.apache.tomcat.maven/tomcat7-maven-plugin  Apache Tomcat Maven Plugin :: Tomcat 7.x %}\n Apache Tomcat Maven Plugin :: Tomcat 7.x.\n{% endblockquote %}\n3. 配置maven与tomcat连通\n3.1修改maven~/.m2目录下settings.xml(如没有则新建)\n在<settings>节点下新增<servers>\n```xml\n<settings>\n\t<servers>\n\t\t<server>\n\t\t\t<id>tomcat7</id>\n\t\t\t<username>maven</username>\n\t\t\t<password>root</password>\n\t\t</server>\n\t</servers>\n</settings>\n```\n在<build> <plugins>节点下新增plugin\n```xml\n<plugin>\n\t<groupId>org.apache.tomcat.maven</groupId>\n\t<artifactId>tomcat7-maven-plugin</artifactId>\n\t<version>2.2</version>\n\t<configuration>\n\t\t<url>http://localhost:8080/manager/text</url>\n\t\t<!-- server, username, password对应tomcat的tomcat-users.xml或maven中settings.xml下的配置 -->\n\t\t<server>tomcat7</server>\n\t\t<username>maven</username>\n\t\t<password>root</password>\n\t\t<!-- war文件路缺省情况下指向target -->\n\t\t<!--<warFile>${basedir}/target/${project.build.finalName}.war</warFile>-->\n\t</configuration>\n</plugin>\n```\n### 布署项目到tomcat\n先确保Tomcat服务器已经启动，然后cd到项目根目录，运行下面的命令：\n```maven\nmvn clean install tomcat7:deploy\n```\n如果项目已经成功布署过，则运行下面这条命令\n```maven\nmvn clean install tomcat7:redeploy\n```\n然后就可以看到maven一点一点帮你做这些事情了，第一次发布会久一点\n{% blockquote %}\n[INFO]\n[INFO] <<< tomcat7-maven-plugin:2.2:redeploy (default-cli) < package @ webstore <<<\n[INFO]\n[INFO] --- tomcat7-maven-plugin:2.2:redeploy (default-cli) @ webstore ---\n[INFO] Deploying war to http://localhost:8080/webstore\nUploading: http://localhost:8080/manager/text/deploy?path=%2Fwebstore&update=true\nUploaded: http://localhost:8080/manager/text/deploy?path=%2Fwebstore&update=true (40122 KB at 17241.5 KB/sec)\n\n[INFO] tomcatManager status code:200, ReasonPhrase:OK\n[INFO] OK - Deployed application at context path /webstore\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 16.893 s\n[INFO] Finished at: 2015-07-12T14:52:52+08:00\n[INFO] Final Memory: 32M/355M\n[INFO] ------------------------------------------------------------------------\n{% endblockquote %}\n然后我们就能在Tomcat安装目录的webapps目录下找到新部署的WAR包\n`注意:`初次部署用的是tomcat7:deploy命令，重新部署可以用tomcat7:redeploy命令（推荐统一用这个），Tomcat Maven插件支持的命令包括：run、shutdown、run-war-only、exec-war、standalone-war-only、deploy、standalone-war、undeploy、run-war、redeploy等。\n## 遇到过的问题\n第一次用到不是很顺利，遇到很多问题，好在有万能的google和度娘帮解决：\n1. 包的路径问题\nwar打包插件, 有些时候可能会设定war包名称带版本号，有些时候不会，注意，当你不带版本号的时候tomcat-maven-plugin可能会报包找不到的情况\n\n```log\n[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project webstore:\n```\n这时就需要在tomcat7-maven-plugin中指定这个包的生成路径\n```xml\n<warFile>${basedir}/target/${project.build.finalName}.war</warFile>\n```\n2. Connection refused\n一步步分析：\n首先，有没有启动tomcat服务\n其次，使用的命令对不对deploy和redeploy的区别\n帐号与密码，权限检查一遍\n3. socket write error\n\n```log\n[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Software caused connection abort: socket write error -> [Help 1]\n```\n每次上传到一半总是自动停止。。。原因就是因为项目已经发布过但还是用deploy，应该用redeploy\n4. 401错误\n\n```log\n[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin: 2.0-SNAPSHOT:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Server returned HTTP response code: 401 for URL: http://localhost:8080/manager/text/deploy?path=%2Fwebstore -> [Help 1]\n```\n原因是权限问题，检查一下tomcat的tomcat-users.xml有没有给maven用户分配manager-script权限\n5. 403错误\n\n```log\n[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin: 2.0-SNAPSHOT:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Server returned HTTP response code: 403 for URL: http://localhost:8080/manager/html/deploy?path=%2Fwebstore -> [Help 1]\n```\n原因是tomcat不同版本所使用的上传路径不同，tomcat7以前用\n```url\n<url>http://localhost:8080/manager/html</url>\n```\ntomcat7以上用\n```url\n<url>http://localhost:8080/manager/text</url>\n```\n如还是不行，给maven用户增加manager-gui角色\n6. Windows系统下，redeploy过程无法删除旧项目的目录\n报错现象是，所有的配置都正确，已经到了上传那一步，但上传到2054K的时候就断开，打开maven的DEBUG（mvn tomcat7:redeploy -X）信息说是\n\n```log \nCannot invoke Tomcat manager : Software caused connection abort: socket write error\n```\n解决办法是修改tomcat的TOMCAT_HOME/conf/context.xml, 在<Context>节点下加上\n```xml\n<Context antiJARLocking=\"true\" antiResourceLocking=\"true\">\n```\n## 写在最后\n\n{% blockquote 摘自:优雅先生 http://my.oschina.net/feichexia/blog/326893 开发过程使用Tomcat Maven插件持续快捷部署Web项目%}\n使用这种方式布署的局限性\n{%endblockquote%}\n\n 这种方案能够实现持续快捷部署。但它有一些局限性：\n - 要求从本地开发环境能直接访问Tomcat服务器所在网段\n - 不能保留历史部署包\n - 因此初步建议只在开发环境使用这种部署方式，并且结合SVN、Git等版本控制软件做两个内部约定：\n   所有可部署版本代码都必须先签入一个名为deploy-xx的分支，xx表示当前可部署版本，deploy分支代码必须保证是可以部署的代码，然后切到deploy-xx分支再部署项目，以后增加了新功能，则需新建另一个deploy分支，并增大版本号。这样可以利用版本控制软件帮我们保留各个历史可部署代码（解决了上面提到的第二个局限性）。尤其是多个项目集成时，最好保证每一次集成时各个项目的deploy分支带的版本后缀相同。这样可以方便各个项目代码集体回滚 \n","source":"_posts/使用Tomcat-Maven插件持续快捷部署Web项目.md","raw":"title: \"使用Tomcat Maven插件持续快捷部署Web项目\"\ndate: 2015-07-12 14:21:46\nalias: \ntags: 笔记\ncategories: Maven\n\n---\n支持中文标题。。。这货\n\n到目前为止用maven还是蛮爽的，今天一直在测试项目，不断改不断发布不断重启也是醉了。。。所以上网找了一此资料，别说这个自动发布插件还不错，基本能满足需求，先记下来\n## 准备工作\n1. 下载并安装tomcat,这里我选的是tomcat 7.0.62;\n2. 安装好的maven,并配置好能用\n3. 准备一个Maven Web项目\n\n网上关于怎么配置怎么建立maven web项目的资料很多，可以参考，建议多看几篇\n## Maven部署Web项目到Tomcat的配置\n分别对tomat的tomcat-uses.xml和maven项目的pom.xml进行修改\n### 配置Tomcat角色，用户\n```xml\n<!-- tomcat-users.xml -->\n<tomcat-users>\n    <role rolename=\"admin-gui\"/>\n    <role rolename=\"admin-script\"/>\n    <role rolename=\"manager-gui\"/>\n    <role rolename=\"manager-script\"/>\n    <role rolename=\"manager-jmx\"/>\n    <role rolename=\"manager-status\"/>\n    <user username=\"admin\" password=\"admin\" roles=\"manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui\"/>\n    <user username=\"maven\" password=\"root\" roles=\"manager-script\"/>\n</tomcat-users>\n```\n看到user这个标签，分配给maven的只要manager-script就行\n### Maven配置\n1. 打包插件配置\n```xml\n<build>\n\t<plugins>\n\t\t<!-- compiler插件, 设定JDK版本 -->\n\t\t<plugin>\n\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t<version>3.1</version>\n\t\t\t<configuration>\n\t\t\t\t<source>${java.version}</source>\n\t\t\t\t<target>${java.version}</target>\n\t\t\t\t<showWarnings>true</showWarnings>\n\t\t\t</configuration>\n\t\t</plugin>\n\t\t<!-- war打包插件, 设定war包名称带版本号 -->\n\t\t<plugin>\n\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t<artifactId>maven-war-plugin</artifactId>\n\t\t\t<version>2.4</version>\n\t\t\t<configuration>\n\t\t\t\t<warName>${project.artifactId}-${project.version}</warName>\n\t\t\t</configuration>\n\t\t</plugin>\n\t</plugins>\n</build> \n```\n2. 添加maven-tomcat插件依赖\n```xml\n<!-- tomcat 7 -->\n<dependency>\n\t<groupId>org.apache.tomcat.maven</groupId>\n\t<artifactId>tomcat7-maven-plugin</artifactId>\n\t<version>2.2</version>\n</dependency>\n```\n{% blockquote Apache http://mvnrepository.com/artifact/org.apache.tomcat.maven/tomcat7-maven-plugin  Apache Tomcat Maven Plugin :: Tomcat 7.x %}\n Apache Tomcat Maven Plugin :: Tomcat 7.x.\n{% endblockquote %}\n3. 配置maven与tomcat连通\n3.1修改maven~/.m2目录下settings.xml(如没有则新建)\n在<settings>节点下新增<servers>\n```xml\n<settings>\n\t<servers>\n\t\t<server>\n\t\t\t<id>tomcat7</id>\n\t\t\t<username>maven</username>\n\t\t\t<password>root</password>\n\t\t</server>\n\t</servers>\n</settings>\n```\n在<build> <plugins>节点下新增plugin\n```xml\n<plugin>\n\t<groupId>org.apache.tomcat.maven</groupId>\n\t<artifactId>tomcat7-maven-plugin</artifactId>\n\t<version>2.2</version>\n\t<configuration>\n\t\t<url>http://localhost:8080/manager/text</url>\n\t\t<!-- server, username, password对应tomcat的tomcat-users.xml或maven中settings.xml下的配置 -->\n\t\t<server>tomcat7</server>\n\t\t<username>maven</username>\n\t\t<password>root</password>\n\t\t<!-- war文件路缺省情况下指向target -->\n\t\t<!--<warFile>${basedir}/target/${project.build.finalName}.war</warFile>-->\n\t</configuration>\n</plugin>\n```\n### 布署项目到tomcat\n先确保Tomcat服务器已经启动，然后cd到项目根目录，运行下面的命令：\n```maven\nmvn clean install tomcat7:deploy\n```\n如果项目已经成功布署过，则运行下面这条命令\n```maven\nmvn clean install tomcat7:redeploy\n```\n然后就可以看到maven一点一点帮你做这些事情了，第一次发布会久一点\n{% blockquote %}\n[INFO]\n[INFO] <<< tomcat7-maven-plugin:2.2:redeploy (default-cli) < package @ webstore <<<\n[INFO]\n[INFO] --- tomcat7-maven-plugin:2.2:redeploy (default-cli) @ webstore ---\n[INFO] Deploying war to http://localhost:8080/webstore\nUploading: http://localhost:8080/manager/text/deploy?path=%2Fwebstore&update=true\nUploaded: http://localhost:8080/manager/text/deploy?path=%2Fwebstore&update=true (40122 KB at 17241.5 KB/sec)\n\n[INFO] tomcatManager status code:200, ReasonPhrase:OK\n[INFO] OK - Deployed application at context path /webstore\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 16.893 s\n[INFO] Finished at: 2015-07-12T14:52:52+08:00\n[INFO] Final Memory: 32M/355M\n[INFO] ------------------------------------------------------------------------\n{% endblockquote %}\n然后我们就能在Tomcat安装目录的webapps目录下找到新部署的WAR包\n`注意:`初次部署用的是tomcat7:deploy命令，重新部署可以用tomcat7:redeploy命令（推荐统一用这个），Tomcat Maven插件支持的命令包括：run、shutdown、run-war-only、exec-war、standalone-war-only、deploy、standalone-war、undeploy、run-war、redeploy等。\n## 遇到过的问题\n第一次用到不是很顺利，遇到很多问题，好在有万能的google和度娘帮解决：\n1. 包的路径问题\nwar打包插件, 有些时候可能会设定war包名称带版本号，有些时候不会，注意，当你不带版本号的时候tomcat-maven-plugin可能会报包找不到的情况\n\n```log\n[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project webstore:\n```\n这时就需要在tomcat7-maven-plugin中指定这个包的生成路径\n```xml\n<warFile>${basedir}/target/${project.build.finalName}.war</warFile>\n```\n2. Connection refused\n一步步分析：\n首先，有没有启动tomcat服务\n其次，使用的命令对不对deploy和redeploy的区别\n帐号与密码，权限检查一遍\n3. socket write error\n\n```log\n[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Software caused connection abort: socket write error -> [Help 1]\n```\n每次上传到一半总是自动停止。。。原因就是因为项目已经发布过但还是用deploy，应该用redeploy\n4. 401错误\n\n```log\n[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin: 2.0-SNAPSHOT:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Server returned HTTP response code: 401 for URL: http://localhost:8080/manager/text/deploy?path=%2Fwebstore -> [Help 1]\n```\n原因是权限问题，检查一下tomcat的tomcat-users.xml有没有给maven用户分配manager-script权限\n5. 403错误\n\n```log\n[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin: 2.0-SNAPSHOT:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Server returned HTTP response code: 403 for URL: http://localhost:8080/manager/html/deploy?path=%2Fwebstore -> [Help 1]\n```\n原因是tomcat不同版本所使用的上传路径不同，tomcat7以前用\n```url\n<url>http://localhost:8080/manager/html</url>\n```\ntomcat7以上用\n```url\n<url>http://localhost:8080/manager/text</url>\n```\n如还是不行，给maven用户增加manager-gui角色\n6. Windows系统下，redeploy过程无法删除旧项目的目录\n报错现象是，所有的配置都正确，已经到了上传那一步，但上传到2054K的时候就断开，打开maven的DEBUG（mvn tomcat7:redeploy -X）信息说是\n\n```log \nCannot invoke Tomcat manager : Software caused connection abort: socket write error\n```\n解决办法是修改tomcat的TOMCAT_HOME/conf/context.xml, 在<Context>节点下加上\n```xml\n<Context antiJARLocking=\"true\" antiResourceLocking=\"true\">\n```\n## 写在最后\n\n{% blockquote 摘自:优雅先生 http://my.oschina.net/feichexia/blog/326893 开发过程使用Tomcat Maven插件持续快捷部署Web项目%}\n使用这种方式布署的局限性\n{%endblockquote%}\n\n 这种方案能够实现持续快捷部署。但它有一些局限性：\n - 要求从本地开发环境能直接访问Tomcat服务器所在网段\n - 不能保留历史部署包\n - 因此初步建议只在开发环境使用这种部署方式，并且结合SVN、Git等版本控制软件做两个内部约定：\n   所有可部署版本代码都必须先签入一个名为deploy-xx的分支，xx表示当前可部署版本，deploy分支代码必须保证是可以部署的代码，然后切到deploy-xx分支再部署项目，以后增加了新功能，则需新建另一个deploy分支，并增大版本号。这样可以利用版本控制软件帮我们保留各个历史可部署代码（解决了上面提到的第二个局限性）。尤其是多个项目集成时，最好保证每一次集成时各个项目的deploy分支带的版本后缀相同。这样可以方便各个项目代码集体回滚 \n","slug":"使用Tomcat-Maven插件持续快捷部署Web项目","published":1,"updated":"2019-12-30T17:16:22.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq2c001hqyvyieftk5wc","content":"<p>支持中文标题。。。这货</p>\n<p>到目前为止用maven还是蛮爽的，今天一直在测试项目，不断改不断发布不断重启也是醉了。。。所以上网找了一此资料，别说这个自动发布插件还不错，基本能满足需求，先记下来</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>下载并安装tomcat,这里我选的是tomcat 7.0.62;</li>\n<li>安装好的maven,并配置好能用</li>\n<li>准备一个Maven Web项目</li>\n</ol>\n<p>网上关于怎么配置怎么建立maven web项目的资料很多，可以参考，建议多看几篇</p>\n<h2 id=\"Maven部署Web项目到Tomcat的配置\"><a href=\"#Maven部署Web项目到Tomcat的配置\" class=\"headerlink\" title=\"Maven部署Web项目到Tomcat的配置\"></a>Maven部署Web项目到Tomcat的配置</h2><p>分别对tomat的tomcat-uses.xml和maven项目的pom.xml进行修改</p>\n<h3 id=\"配置Tomcat角色，用户\"><a href=\"#配置Tomcat角色，用户\" class=\"headerlink\" title=\"配置Tomcat角色，用户\"></a>配置Tomcat角色，用户</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- tomcat-users.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tomcat-users</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"admin-gui\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"admin-script\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"manager-gui\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"manager-script\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"manager-jmx\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"manager-status\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">username</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">roles</span>=<span class=\"string\">\"manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">username</span>=<span class=\"string\">\"maven\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"root\"</span> <span class=\"attr\">roles</span>=<span class=\"string\">\"manager-script\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看到user这个标签，分配给maven的只要manager-script就行</p>\n<h3 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h3><ol>\n<li><p>打包插件配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- compiler插件, 设定JDK版本 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">showWarnings</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">showWarnings</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- war打包插件, 设定war包名称带版本号 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">warName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">warName</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加maven-tomcat插件依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- tomcat 7 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote><p>Apache Tomcat Maven Plugin :: Tomcat 7.x.</p>\n<footer><strong>Apache</strong><cite><a href=\"http://mvnrepository.com/artifact/org.apache.tomcat.maven/tomcat7-maven-plugin\" target=\"_blank\" rel=\"noopener\">Apache Tomcat Maven Plugin :: Tomcat 7.x</a></cite></footer></blockquote>\n<ol start=\"3\">\n<li>配置maven与tomcat连通<br>3.1修改maven~/.m2目录下settings.xml(如没有则新建)<br>在<settings>节点下新增<servers><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>tomcat7<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</servers></settings></li>\n</ol>\n<p>在<build> <plugins>节点下新增plugin<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://localhost:8080/manager/text<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- server, username, password对应tomcat的tomcat-users.xml或maven中settings.xml下的配置 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span>tomcat7<span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- war文件路缺省情况下指向target --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--&lt;warFile&gt;$&#123;basedir&#125;/target/$&#123;project.build.finalName&#125;.war&lt;/warFile&gt;--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></plugins></build></p>\n<h3 id=\"布署项目到tomcat\"><a href=\"#布署项目到tomcat\" class=\"headerlink\" title=\"布署项目到tomcat\"></a>布署项目到tomcat</h3><p>先确保Tomcat服务器已经启动，然后cd到项目根目录，运行下面的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install tomcat7:deploy</span><br></pre></td></tr></table></figure></p>\n<p>如果项目已经成功布署过，则运行下面这条命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install tomcat7:redeploy</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以看到maven一点一点帮你做这些事情了，第一次发布会久一点<br><blockquote><p>[INFO]<br>[INFO] &lt;&lt;&lt; tomcat7-maven-plugin:2.2:redeploy (default-cli) &lt; package @ webstore &lt;&lt;&lt;<br>[INFO]<br>[INFO] — tomcat7-maven-plugin:2.2:redeploy (default-cli) @ webstore —<br>[INFO] Deploying war to <a href=\"http://localhost:8080/webstore\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/webstore</a><br>Uploading: <a href=\"http://localhost:8080/manager/text/deploy?path=%2Fwebstore&amp;update=true\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/manager/text/deploy?path=%2Fwebstore&amp;update=true</a><br>Uploaded: <a href=\"http://localhost:8080/manager/text/deploy?path=%2Fwebstore&amp;update=true\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/manager/text/deploy?path=%2Fwebstore&amp;update=true</a> (40122 KB at 17241.5 KB/sec)</p>\n<p>[INFO] tomcatManager status code:200, ReasonPhrase:OK<br>[INFO] OK - Deployed application at context path /webstore<br>[INFO] ————————————————————————<br>[INFO] BUILD SUCCESS<br>[INFO] ————————————————————————<br>[INFO] Total time: 16.893 s<br>[INFO] Finished at: 2015-07-12T14:52:52+08:00<br>[INFO] Final Memory: 32M/355M<br>[INFO] ————————————————————————</p>\n</blockquote><br>然后我们就能在Tomcat安装目录的webapps目录下找到新部署的WAR包<br><code>注意:</code>初次部署用的是tomcat7:deploy命令，重新部署可以用tomcat7:redeploy命令（推荐统一用这个），Tomcat Maven插件支持的命令包括：run、shutdown、run-war-only、exec-war、standalone-war-only、deploy、standalone-war、undeploy、run-war、redeploy等。</p>\n<h2 id=\"遇到过的问题\"><a href=\"#遇到过的问题\" class=\"headerlink\" title=\"遇到过的问题\"></a>遇到过的问题</h2><p>第一次用到不是很顺利，遇到很多问题，好在有万能的google和度娘帮解决：</p>\n<ol>\n<li>包的路径问题<br>war打包插件, 有些时候可能会设定war包名称带版本号，有些时候不会，注意，当你不带版本号的时候tomcat-maven-plugin可能会报包找不到的情况</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project webstore:</span><br></pre></td></tr></table></figure>\n<p>这时就需要在tomcat7-maven-plugin中指定这个包的生成路径<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">warFile</span>&gt;</span>$&#123;basedir&#125;/target/$&#123;project.build.finalName&#125;.war<span class=\"tag\">&lt;/<span class=\"name\">warFile</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>Connection refused<br>一步步分析：<br>首先，有没有启动tomcat服务<br>其次，使用的命令对不对deploy和redeploy的区别<br>帐号与密码，权限检查一遍</li>\n<li>socket write error</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Software caused connection abort: socket write error -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n<p>每次上传到一半总是自动停止。。。原因就是因为项目已经发布过但还是用deploy，应该用redeploy</p>\n<ol start=\"4\">\n<li>401错误</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin: 2.0-SNAPSHOT:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Server returned HTTP response code: 401 for URL: http://localhost:8080/manager/text/deploy?path=%2Fwebstore -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n<p>原因是权限问题，检查一下tomcat的tomcat-users.xml有没有给maven用户分配manager-script权限</p>\n<ol start=\"5\">\n<li>403错误</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin: 2.0-SNAPSHOT:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Server returned HTTP response code: 403 for URL: http://localhost:8080/manager/html/deploy?path=%2Fwebstore -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n<p>原因是tomcat不同版本所使用的上传路径不同，tomcat7以前用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;url&gt;http://localhost:8080/manager/html&lt;/url&gt;</span><br></pre></td></tr></table></figure></p>\n<p>tomcat7以上用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如还是不行，给maven用户增加manager-gui角色</p>\n<ol start=\"6\">\n<li>Windows系统下，redeploy过程无法删除旧项目的目录<br>报错现象是，所有的配置都正确，已经到了上传那一步，但上传到2054K的时候就断开，打开maven的DEBUG（mvn tomcat7:redeploy -X）信息说是</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot invoke Tomcat manager : Software caused connection abort: socket write error</span><br></pre></td></tr></table></figure>\n<p>解决办法是修改tomcat的TOMCAT_HOME/conf/context.xml, 在<context>节点下加上<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">antiJARLocking</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">antiResourceLocking</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br></pre></td></tr></table></figure></context></p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><blockquote><p>使用这种方式布署的局限性</p>\n<footer><strong>摘自:优雅先生</strong><cite><a href=\"http://my.oschina.net/feichexia/blog/326893\" target=\"_blank\" rel=\"noopener\">开发过程使用Tomcat Maven插件持续快捷部署Web项目</a></cite></footer></blockquote>\n<p> 这种方案能够实现持续快捷部署。但它有一些局限性：</p>\n<ul>\n<li>要求从本地开发环境能直接访问Tomcat服务器所在网段</li>\n<li>不能保留历史部署包</li>\n<li>因此初步建议只在开发环境使用这种部署方式，并且结合SVN、Git等版本控制软件做两个内部约定：<br>所有可部署版本代码都必须先签入一个名为deploy-xx的分支，xx表示当前可部署版本，deploy分支代码必须保证是可以部署的代码，然后切到deploy-xx分支再部署项目，以后增加了新功能，则需新建另一个deploy分支，并增大版本号。这样可以利用版本控制软件帮我们保留各个历史可部署代码（解决了上面提到的第二个局限性）。尤其是多个项目集成时，最好保证每一次集成时各个项目的deploy分支带的版本后缀相同。这样可以方便各个项目代码集体回滚 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>支持中文标题。。。这货</p>\n<p>到目前为止用maven还是蛮爽的，今天一直在测试项目，不断改不断发布不断重启也是醉了。。。所以上网找了一此资料，别说这个自动发布插件还不错，基本能满足需求，先记下来</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>下载并安装tomcat,这里我选的是tomcat 7.0.62;</li>\n<li>安装好的maven,并配置好能用</li>\n<li>准备一个Maven Web项目</li>\n</ol>\n<p>网上关于怎么配置怎么建立maven web项目的资料很多，可以参考，建议多看几篇</p>\n<h2 id=\"Maven部署Web项目到Tomcat的配置\"><a href=\"#Maven部署Web项目到Tomcat的配置\" class=\"headerlink\" title=\"Maven部署Web项目到Tomcat的配置\"></a>Maven部署Web项目到Tomcat的配置</h2><p>分别对tomat的tomcat-uses.xml和maven项目的pom.xml进行修改</p>\n<h3 id=\"配置Tomcat角色，用户\"><a href=\"#配置Tomcat角色，用户\" class=\"headerlink\" title=\"配置Tomcat角色，用户\"></a>配置Tomcat角色，用户</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- tomcat-users.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tomcat-users</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"admin-gui\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"admin-script\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"manager-gui\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"manager-script\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"manager-jmx\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">role</span> <span class=\"attr\">rolename</span>=<span class=\"string\">\"manager-status\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">username</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">roles</span>=<span class=\"string\">\"manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">username</span>=<span class=\"string\">\"maven\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"root\"</span> <span class=\"attr\">roles</span>=<span class=\"string\">\"manager-script\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看到user这个标签，分配给maven的只要manager-script就行</p>\n<h3 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h3><ol>\n<li><p>打包插件配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- compiler插件, 设定JDK版本 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">showWarnings</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">showWarnings</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- war打包插件, 设定war包名称带版本号 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">warName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">warName</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加maven-tomcat插件依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- tomcat 7 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote><p>Apache Tomcat Maven Plugin :: Tomcat 7.x.</p>\n<footer><strong>Apache</strong><cite><a href=\"http://mvnrepository.com/artifact/org.apache.tomcat.maven/tomcat7-maven-plugin\" target=\"_blank\" rel=\"noopener\">Apache Tomcat Maven Plugin :: Tomcat 7.x</a></cite></footer></blockquote>\n<ol start=\"3\">\n<li>配置maven与tomcat连通<br>3.1修改maven~/.m2目录下settings.xml(如没有则新建)<br>在<settings>节点下新增<servers><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>tomcat7<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</servers></settings></li>\n</ol>\n<p>在<build> <plugins>节点下新增plugin<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://localhost:8080/manager/text<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- server, username, password对应tomcat的tomcat-users.xml或maven中settings.xml下的配置 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span>tomcat7<span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- war文件路缺省情况下指向target --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--&lt;warFile&gt;$&#123;basedir&#125;/target/$&#123;project.build.finalName&#125;.war&lt;/warFile&gt;--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></plugins></build></p>\n<h3 id=\"布署项目到tomcat\"><a href=\"#布署项目到tomcat\" class=\"headerlink\" title=\"布署项目到tomcat\"></a>布署项目到tomcat</h3><p>先确保Tomcat服务器已经启动，然后cd到项目根目录，运行下面的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install tomcat7:deploy</span><br></pre></td></tr></table></figure></p>\n<p>如果项目已经成功布署过，则运行下面这条命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install tomcat7:redeploy</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以看到maven一点一点帮你做这些事情了，第一次发布会久一点<br><blockquote><p>[INFO]<br>[INFO] &lt;&lt;&lt; tomcat7-maven-plugin:2.2:redeploy (default-cli) &lt; package @ webstore &lt;&lt;&lt;<br>[INFO]<br>[INFO] — tomcat7-maven-plugin:2.2:redeploy (default-cli) @ webstore —<br>[INFO] Deploying war to <a href=\"http://localhost:8080/webstore\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/webstore</a><br>Uploading: <a href=\"http://localhost:8080/manager/text/deploy?path=%2Fwebstore&amp;update=true\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/manager/text/deploy?path=%2Fwebstore&amp;update=true</a><br>Uploaded: <a href=\"http://localhost:8080/manager/text/deploy?path=%2Fwebstore&amp;update=true\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/manager/text/deploy?path=%2Fwebstore&amp;update=true</a> (40122 KB at 17241.5 KB/sec)</p>\n<p>[INFO] tomcatManager status code:200, ReasonPhrase:OK<br>[INFO] OK - Deployed application at context path /webstore<br>[INFO] ————————————————————————<br>[INFO] BUILD SUCCESS<br>[INFO] ————————————————————————<br>[INFO] Total time: 16.893 s<br>[INFO] Finished at: 2015-07-12T14:52:52+08:00<br>[INFO] Final Memory: 32M/355M<br>[INFO] ————————————————————————</p>\n</blockquote><br>然后我们就能在Tomcat安装目录的webapps目录下找到新部署的WAR包<br><code>注意:</code>初次部署用的是tomcat7:deploy命令，重新部署可以用tomcat7:redeploy命令（推荐统一用这个），Tomcat Maven插件支持的命令包括：run、shutdown、run-war-only、exec-war、standalone-war-only、deploy、standalone-war、undeploy、run-war、redeploy等。</p>\n<h2 id=\"遇到过的问题\"><a href=\"#遇到过的问题\" class=\"headerlink\" title=\"遇到过的问题\"></a>遇到过的问题</h2><p>第一次用到不是很顺利，遇到很多问题，好在有万能的google和度娘帮解决：</p>\n<ol>\n<li>包的路径问题<br>war打包插件, 有些时候可能会设定war包名称带版本号，有些时候不会，注意，当你不带版本号的时候tomcat-maven-plugin可能会报包找不到的情况</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project webstore:</span><br></pre></td></tr></table></figure>\n<p>这时就需要在tomcat7-maven-plugin中指定这个包的生成路径<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">warFile</span>&gt;</span>$&#123;basedir&#125;/target/$&#123;project.build.finalName&#125;.war<span class=\"tag\">&lt;/<span class=\"name\">warFile</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>Connection refused<br>一步步分析：<br>首先，有没有启动tomcat服务<br>其次，使用的命令对不对deploy和redeploy的区别<br>帐号与密码，权限检查一遍</li>\n<li>socket write error</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Software caused connection abort: socket write error -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n<p>每次上传到一半总是自动停止。。。原因就是因为项目已经发布过但还是用deploy，应该用redeploy</p>\n<ol start=\"4\">\n<li>401错误</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin: 2.0-SNAPSHOT:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Server returned HTTP response code: 401 for URL: http://localhost:8080/manager/text/deploy?path=%2Fwebstore -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n<p>原因是权限问题，检查一下tomcat的tomcat-users.xml有没有给maven用户分配manager-script权限</p>\n<ol start=\"5\">\n<li>403错误</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin: 2.0-SNAPSHOT:deploy (default-cli) on project webstore: Cannot invoke Tomcat manager: Server returned HTTP response code: 403 for URL: http://localhost:8080/manager/html/deploy?path=%2Fwebstore -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n<p>原因是tomcat不同版本所使用的上传路径不同，tomcat7以前用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;url&gt;http://localhost:8080/manager/html&lt;/url&gt;</span><br></pre></td></tr></table></figure></p>\n<p>tomcat7以上用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如还是不行，给maven用户增加manager-gui角色</p>\n<ol start=\"6\">\n<li>Windows系统下，redeploy过程无法删除旧项目的目录<br>报错现象是，所有的配置都正确，已经到了上传那一步，但上传到2054K的时候就断开，打开maven的DEBUG（mvn tomcat7:redeploy -X）信息说是</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot invoke Tomcat manager : Software caused connection abort: socket write error</span><br></pre></td></tr></table></figure>\n<p>解决办法是修改tomcat的TOMCAT_HOME/conf/context.xml, 在<context>节点下加上<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">antiJARLocking</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">antiResourceLocking</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br></pre></td></tr></table></figure></context></p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><blockquote><p>使用这种方式布署的局限性</p>\n<footer><strong>摘自:优雅先生</strong><cite><a href=\"http://my.oschina.net/feichexia/blog/326893\" target=\"_blank\" rel=\"noopener\">开发过程使用Tomcat Maven插件持续快捷部署Web项目</a></cite></footer></blockquote>\n<p> 这种方案能够实现持续快捷部署。但它有一些局限性：</p>\n<ul>\n<li>要求从本地开发环境能直接访问Tomcat服务器所在网段</li>\n<li>不能保留历史部署包</li>\n<li>因此初步建议只在开发环境使用这种部署方式，并且结合SVN、Git等版本控制软件做两个内部约定：<br>所有可部署版本代码都必须先签入一个名为deploy-xx的分支，xx表示当前可部署版本，deploy分支代码必须保证是可以部署的代码，然后切到deploy-xx分支再部署项目，以后增加了新功能，则需新建另一个deploy分支，并增大版本号。这样可以利用版本控制软件帮我们保留各个历史可部署代码（解决了上面提到的第二个局限性）。尤其是多个项目集成时，最好保证每一次集成时各个项目的deploy分支带的版本后缀相同。这样可以方便各个项目代码集体回滚 </li>\n</ul>\n"},{"title":"使用jQuery validator 开发的一个表单字段验证插件","date":"2015-09-10T17:07:59.000Z","alias":"总结与分享","_content":"\n## 前言\njQuery用着一直很爽，正好今天又要写点前端的东西了，总感觉要怎样怎样才是好啊，然后上网看了别人写的自己以前写的，总感觉那些风格都不像公司的这套新代码，最后还是放弃，还是来研究一下公司大牛们写JQ插件的风格，唉，想让自己的代码能万无一失审核通过，自己也着实下了番苦功夫啊，写的完全不一样，不过除了中间有点改动，也还算是一次运行成功，记录一下，有时间再慢慢优化\n\n``` javascript\n/*!\n * Login jQuery plugin\n * Copyright 2015 Linbao.\n * Licensed under apache MIT \n */\n /*! jquery-1.7.2.min.js | License(https://jquery.org/license/) | www.jquery.com */\n /*! jQuery Form Validator | License(https://jquery.org/license/) | http://plugins.jquery.com/formvalidator/ */\n+function($){\n if($.login == undefined){\n\t$.login = function(){\n\t\tthis.init();\n\t}\n\t$.login.prototype = {\n\t\tinit: function(){\n\t\t\tvar self = this;\n\t\t\tself.actionForm = $('.login-form');\n\t\t\tself.btnSubmit  = $('#btn-submit');\n\t\t\tself.initValidator();\n\t\t\tself.actionForm.submit = function(){\n\t\t\t\tself.register();\n\t\t\t}\n\t\t},\n\t\tregister: function(){\n\t\t\tvar self = this;\n\t\t\tif(self.actionForm.valid()){\n\t\t\t\tself.actionForm.submit();\n\t\t\t}\n\t\t},\n\t\tinitValidator: function(){\n\t\t\tvar self = this;\n\t\t\tself.actionForm.validate({\n\t\t\t\trules:{\n\t\t\t\t\tusername:{\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tminlength: 6,\n\t\t\t\t\t\tmaxlength: 20\n\t\t\t\t\t},\n\t\t\t\t\tpassword: {\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tminlength: 6,\n\t\t\t\t\t\tmaxlength: 20\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmessages:{\n\t\t\t\t\tusername: {\n\t\t\t\t\t\trequired: \"Sorry, username is required, please enter the username!\",\n\t\t\t\t\t\tminlength: \"The username is required minlength length of 6! \",\n\t\t\t\t\t\tmaxlength: \"The username is too long\"\n\t\t\t\t\t},\n\t\t\t\t\tpassword: {\n\t\t\t\t\t\trequired: \"Sorry, password is required, please enter the password!\",\n\t\t\t\t\t\tminlength: \"The password is required minlength of 6! \",\n\t\t\t\t\t\tmaxlength: \"The password is too long\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n}\n$(document).ready(function(){\n\tvar login = new $.login();\n\t\t\n})\n}(jQuery)\n```\n## 几个重要的方法说明 \n- `$(selector).validate({mapped value})` - 此方法是定义表单的验证规则，json格式，rules定义规则，message定义了表单验证过程中要显示的信息，其节点下的username,password对应表单当中的name\n- `$(selector).valid()` - 硬编码触发表单验证\n- `$.login.prototype = {}` - 定义一个名为login的js类","source":"_posts/使用jQuery-validator-开发的一个表单字段验证插件.md","raw":"title: \"使用jQuery validator 开发的一个表单字段验证插件\"\ndate: 2015-09-11 01:07:59\nalias: 总结与分享\ntags:\n- jQuery\n- 工具\n- 笔记\ncategories: \n\n---\n\n## 前言\njQuery用着一直很爽，正好今天又要写点前端的东西了，总感觉要怎样怎样才是好啊，然后上网看了别人写的自己以前写的，总感觉那些风格都不像公司的这套新代码，最后还是放弃，还是来研究一下公司大牛们写JQ插件的风格，唉，想让自己的代码能万无一失审核通过，自己也着实下了番苦功夫啊，写的完全不一样，不过除了中间有点改动，也还算是一次运行成功，记录一下，有时间再慢慢优化\n\n``` javascript\n/*!\n * Login jQuery plugin\n * Copyright 2015 Linbao.\n * Licensed under apache MIT \n */\n /*! jquery-1.7.2.min.js | License(https://jquery.org/license/) | www.jquery.com */\n /*! jQuery Form Validator | License(https://jquery.org/license/) | http://plugins.jquery.com/formvalidator/ */\n+function($){\n if($.login == undefined){\n\t$.login = function(){\n\t\tthis.init();\n\t}\n\t$.login.prototype = {\n\t\tinit: function(){\n\t\t\tvar self = this;\n\t\t\tself.actionForm = $('.login-form');\n\t\t\tself.btnSubmit  = $('#btn-submit');\n\t\t\tself.initValidator();\n\t\t\tself.actionForm.submit = function(){\n\t\t\t\tself.register();\n\t\t\t}\n\t\t},\n\t\tregister: function(){\n\t\t\tvar self = this;\n\t\t\tif(self.actionForm.valid()){\n\t\t\t\tself.actionForm.submit();\n\t\t\t}\n\t\t},\n\t\tinitValidator: function(){\n\t\t\tvar self = this;\n\t\t\tself.actionForm.validate({\n\t\t\t\trules:{\n\t\t\t\t\tusername:{\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tminlength: 6,\n\t\t\t\t\t\tmaxlength: 20\n\t\t\t\t\t},\n\t\t\t\t\tpassword: {\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tminlength: 6,\n\t\t\t\t\t\tmaxlength: 20\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmessages:{\n\t\t\t\t\tusername: {\n\t\t\t\t\t\trequired: \"Sorry, username is required, please enter the username!\",\n\t\t\t\t\t\tminlength: \"The username is required minlength length of 6! \",\n\t\t\t\t\t\tmaxlength: \"The username is too long\"\n\t\t\t\t\t},\n\t\t\t\t\tpassword: {\n\t\t\t\t\t\trequired: \"Sorry, password is required, please enter the password!\",\n\t\t\t\t\t\tminlength: \"The password is required minlength of 6! \",\n\t\t\t\t\t\tmaxlength: \"The password is too long\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n}\n$(document).ready(function(){\n\tvar login = new $.login();\n\t\t\n})\n}(jQuery)\n```\n## 几个重要的方法说明 \n- `$(selector).validate({mapped value})` - 此方法是定义表单的验证规则，json格式，rules定义规则，message定义了表单验证过程中要显示的信息，其节点下的username,password对应表单当中的name\n- `$(selector).valid()` - 硬编码触发表单验证\n- `$.login.prototype = {}` - 定义一个名为login的js类","slug":"使用jQuery-validator-开发的一个表单字段验证插件","published":1,"updated":"2019-12-30T17:16:22.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq2d001kqyvyc2fznb8k","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>jQuery用着一直很爽，正好今天又要写点前端的东西了，总感觉要怎样怎样才是好啊，然后上网看了别人写的自己以前写的，总感觉那些风格都不像公司的这套新代码，最后还是放弃，还是来研究一下公司大牛们写JQ插件的风格，唉，想让自己的代码能万无一失审核通过，自己也着实下了番苦功夫啊，写的完全不一样，不过除了中间有点改动，也还算是一次运行成功，记录一下，有时间再慢慢优化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*!</span></span><br><span class=\"line\"><span class=\"comment\"> * Login jQuery plugin</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2015 Linbao.</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under apache MIT </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">/*! jquery-1.7.2.min.js | License(https://jquery.org/license/) | www.jquery.com */</span></span><br><span class=\"line\"> <span class=\"comment\">/*! jQuery Form Validator | License(https://jquery.org/license/) | http://plugins.jquery.com/formvalidator/ */</span></span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>($.login == <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">\t$.login = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$.login.prototype = &#123;</span><br><span class=\"line\">\t\tinit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\tself.actionForm = $(<span class=\"string\">'.login-form'</span>);</span><br><span class=\"line\">\t\t\tself.btnSubmit  = $(<span class=\"string\">'#btn-submit'</span>);</span><br><span class=\"line\">\t\t\tself.initValidator();</span><br><span class=\"line\">\t\t\tself.actionForm.submit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\tself.register();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tregister: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(self.actionForm.valid())&#123;</span><br><span class=\"line\">\t\t\t\tself.actionForm.submit();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tinitValidator: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\tself.actionForm.validate(&#123;</span><br><span class=\"line\">\t\t\t\trules:&#123;</span><br><span class=\"line\">\t\t\t\t\tusername:&#123;</span><br><span class=\"line\">\t\t\t\t\t\trequired: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t\tminlength: <span class=\"number\">6</span>,</span><br><span class=\"line\">\t\t\t\t\t\tmaxlength: <span class=\"number\">20</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\tpassword: &#123;</span><br><span class=\"line\">\t\t\t\t\t\trequired: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t\tminlength: <span class=\"number\">6</span>,</span><br><span class=\"line\">\t\t\t\t\t\tmaxlength: <span class=\"number\">20</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\tmessages:&#123;</span><br><span class=\"line\">\t\t\t\t\tusername: &#123;</span><br><span class=\"line\">\t\t\t\t\t\trequired: <span class=\"string\">\"Sorry, username is required, please enter the username!\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\tminlength: <span class=\"string\">\"The username is required minlength length of 6! \"</span>,</span><br><span class=\"line\">\t\t\t\t\t\tmaxlength: <span class=\"string\">\"The username is too long\"</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\tpassword: &#123;</span><br><span class=\"line\">\t\t\t\t\t\trequired: <span class=\"string\">\"Sorry, password is required, please enter the password!\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\tminlength: <span class=\"string\">\"The password is required minlength of 6! \"</span>,</span><br><span class=\"line\">\t\t\t\t\t\tmaxlength: <span class=\"string\">\"The password is too long\"</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> login = <span class=\"keyword\">new</span> $.login();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;(jQuery)</span><br></pre></td></tr></table></figure>\n<h2 id=\"几个重要的方法说明\"><a href=\"#几个重要的方法说明\" class=\"headerlink\" title=\"几个重要的方法说明\"></a>几个重要的方法说明</h2><ul>\n<li><code>$(selector).validate({mapped value})</code> - 此方法是定义表单的验证规则，json格式，rules定义规则，message定义了表单验证过程中要显示的信息，其节点下的username,password对应表单当中的name</li>\n<li><code>$(selector).valid()</code> - 硬编码触发表单验证</li>\n<li><code>$.login.prototype = {}</code> - 定义一个名为login的js类</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>jQuery用着一直很爽，正好今天又要写点前端的东西了，总感觉要怎样怎样才是好啊，然后上网看了别人写的自己以前写的，总感觉那些风格都不像公司的这套新代码，最后还是放弃，还是来研究一下公司大牛们写JQ插件的风格，唉，想让自己的代码能万无一失审核通过，自己也着实下了番苦功夫啊，写的完全不一样，不过除了中间有点改动，也还算是一次运行成功，记录一下，有时间再慢慢优化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*!</span></span><br><span class=\"line\"><span class=\"comment\"> * Login jQuery plugin</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2015 Linbao.</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under apache MIT </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">/*! jquery-1.7.2.min.js | License(https://jquery.org/license/) | www.jquery.com */</span></span><br><span class=\"line\"> <span class=\"comment\">/*! jQuery Form Validator | License(https://jquery.org/license/) | http://plugins.jquery.com/formvalidator/ */</span></span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>($.login == <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">\t$.login = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$.login.prototype = &#123;</span><br><span class=\"line\">\t\tinit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\tself.actionForm = $(<span class=\"string\">'.login-form'</span>);</span><br><span class=\"line\">\t\t\tself.btnSubmit  = $(<span class=\"string\">'#btn-submit'</span>);</span><br><span class=\"line\">\t\t\tself.initValidator();</span><br><span class=\"line\">\t\t\tself.actionForm.submit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\tself.register();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tregister: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(self.actionForm.valid())&#123;</span><br><span class=\"line\">\t\t\t\tself.actionForm.submit();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tinitValidator: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\tself.actionForm.validate(&#123;</span><br><span class=\"line\">\t\t\t\trules:&#123;</span><br><span class=\"line\">\t\t\t\t\tusername:&#123;</span><br><span class=\"line\">\t\t\t\t\t\trequired: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t\tminlength: <span class=\"number\">6</span>,</span><br><span class=\"line\">\t\t\t\t\t\tmaxlength: <span class=\"number\">20</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\tpassword: &#123;</span><br><span class=\"line\">\t\t\t\t\t\trequired: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t\tminlength: <span class=\"number\">6</span>,</span><br><span class=\"line\">\t\t\t\t\t\tmaxlength: <span class=\"number\">20</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\tmessages:&#123;</span><br><span class=\"line\">\t\t\t\t\tusername: &#123;</span><br><span class=\"line\">\t\t\t\t\t\trequired: <span class=\"string\">\"Sorry, username is required, please enter the username!\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\tminlength: <span class=\"string\">\"The username is required minlength length of 6! \"</span>,</span><br><span class=\"line\">\t\t\t\t\t\tmaxlength: <span class=\"string\">\"The username is too long\"</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\tpassword: &#123;</span><br><span class=\"line\">\t\t\t\t\t\trequired: <span class=\"string\">\"Sorry, password is required, please enter the password!\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\tminlength: <span class=\"string\">\"The password is required minlength of 6! \"</span>,</span><br><span class=\"line\">\t\t\t\t\t\tmaxlength: <span class=\"string\">\"The password is too long\"</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> login = <span class=\"keyword\">new</span> $.login();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;(jQuery)</span><br></pre></td></tr></table></figure>\n<h2 id=\"几个重要的方法说明\"><a href=\"#几个重要的方法说明\" class=\"headerlink\" title=\"几个重要的方法说明\"></a>几个重要的方法说明</h2><ul>\n<li><code>$(selector).validate({mapped value})</code> - 此方法是定义表单的验证规则，json格式，rules定义规则，message定义了表单验证过程中要显示的信息，其节点下的username,password对应表单当中的name</li>\n<li><code>$(selector).valid()</code> - 硬编码触发表单验证</li>\n<li><code>$.login.prototype = {}</code> - 定义一个名为login的js类</li>\n</ul>\n"},{"title":"我的第一个RESTful服务","date":"2015-07-30T14:02:51.000Z","alias":"java/index.html","_content":"\n本文讲述基于Java SE环境的Jersey官方文档中的示例simple-service,并在此基础上扩展自己定义的REST资源服务\n## 从Maven原型中创建项目\n所谓原型项目是指通过简单的maven命令就可以从Maven中央仓库中取回一个已经具备基本功能、依赖完好、编译和测试运行无误的示例项目。`mvn archetype:generate`可以这样理解：以指定的原型为模板，生成或者创建新的Maven项目。\n``` stdout\nmvn archetype:generate -DarchetypeArtifactId=jersey-quickstart-grizzly2 \\\n-DarchetypeGroupId=org.glassfish.jersey.archetypes -DinteractiveMode=false \\\n-DgroupId=com.example -DartifactId=simple-service -Dpackage=com.example \\\n-DarchetypeVersion=2.19\n```\n## 测试项目的可用性\n运行完上面的Maven命令后，Maven会在当前目录下生成一个simple-service的文件夹。进入simple-service目录，运行Maven测试：\n``` stdout\nmvn clean test\n```\n第一次创建需要一点点时间给Maven下载项目所需要的依赖包，下载好之后再运行Maven测试就会看到以下输出\n```stdout\nLinbao@LENOVO-PC /g/labs/simple-service (master)\n$ mvn clean test\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building simple-service 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ simple-service ---\n[INFO] Deleting g:\\labs\\simple-service\\target\n[INFO]\n[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ simple-service ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] skip non existing resourceDirectory g:\\labs\\simple-service\\src\\main\\resources\n[INFO]\n[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ simple-service ---\n[INFO] Compiling 2 source files to g:\\labs\\simple-service\\target\\classes\n[INFO]\n[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ simple-service ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] skip non existing resourceDirectory g:\\labs\\simple-service\\src\\test\\resources\n[INFO]\n[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ simple-service ---\n[INFO] Compiling 1 source file to g:\\labs\\simple-service\\target\\test-classes\n[INFO]\n[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ simple-service ---\n[INFO] Surefire report directory: g:\\labs\\simple-service\\target\\surefire-reports\n\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning com.example.MyResourceTest\n七月 30, 2015 10:45:46 下午 org.glassfish.grizzly.http.server.NetworkListener start\nINFO: Started listener bound to [localhost:8080]\n七月 30, 2015 10:45:46 下午 org.glassfish.grizzly.http.server.HttpServer start\nINFO: [HttpServer] Started.\n七月 30, 2015 10:45:47 下午 org.glassfish.grizzly.http.server.NetworkListener shutdownNow\nINFO: Stopped listener bound to [localhost:8080]\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.079 sec\n\nResults :\n\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0\n\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 3.221 s\n[INFO] Finished at: 2015-07-30T22:45:47+08:00\n[INFO] Final Memory: 14M/217M\n[INFO] ------------------------------------------------------------------------\n```\n项目默认是用JDK1.6编译，如果要改更高版本编译器，需要打开pom.xml文件，修改maven-compiler-plugin的参数\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>2.5.1</version>\n    <inherited>true</inherited>\n    <configuration>\n        <source>1.7</source>\n        <target>1.7</target>\n    </configuration>\n</plugin>\n\t\t\t\n```\n\n查看项目结构，在项目根目录下执行`mvn denpendency:tree`命令\n```stdout\nLinbao@LENOVO-PC /g/labs/simple-service (master)\n$ mvn dependency:tree\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building simple-service 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ simple-service ---\n[INFO] com.example:simple-service:jar:1.0-SNAPSHOT\n[INFO] +- org.glassfish.jersey.containers:jersey-container-grizzly2-http:jar:2.19:compile\n[INFO] |  +- org.glassfish.hk2.external:javax.inject:jar:2.4.0-b25:compile\n[INFO] |  +- org.glassfish.grizzly:grizzly-http-server:jar:2.3.19:compile\n[INFO] |  |  \\- org.glassfish.grizzly:grizzly-http:jar:2.3.19:compile\n[INFO] |  |     \\- org.glassfish.grizzly:grizzly-framework:jar:2.3.19:compile\n[INFO] |  +- org.glassfish.jersey.core:jersey-common:jar:2.19:compile\n[INFO] |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile\n[INFO] |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.19:compile\n[INFO] |  |  +- org.glassfish.hk2:hk2-api:jar:2.4.0-b25:compile\n[INFO] |  |  |  +- org.glassfish.hk2:hk2-utils:jar:2.4.0-b25:compile\n[INFO] |  |  |  \\- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.4.0-b25:compile\n[INFO] |  |  +- org.glassfish.hk2:hk2-locator:jar:2.4.0-b25:compile\n[INFO] |  |  |  \\- org.javassist:javassist:jar:3.18.1-GA:compile\n[INFO] |  |  \\- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile\n[INFO] |  +- org.glassfish.jersey.core:jersey-server:jar:2.19:compile\n[INFO] |  |  +- org.glassfish.jersey.core:jersey-client:jar:2.19:compile\n[INFO] |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.19:compile\n[INFO] |  |  \\- javax.validation:validation-api:jar:1.1.0.Final:compile\n[INFO] |  \\- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile\n[INFO] \\- junit:junit:jar:4.9:test\n[INFO]    \\- org.hamcrest:hamcrest-core:jar:1.1:test\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 6.315 s\n[INFO] Finished at: 2015-07-30T23:08:21+08:00\n[INFO] Final Memory: 13M/153M\n[INFO] ------------------------------------------------------------------------\n```\n没有出现错误，来看看怎么创建RESTful服务\n## 分析项目\n执行以下命令`mvn eclipse:eclipse`生成exlipse项目文件，并将项目导入eclipse\n```stdout\n$ mvn eclipse:eclipse\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building simple-service 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] >>> maven-eclipse-plugin:2.10:eclipse (default-cli) > generate-resources @ simple-service >>>\n[INFO]\n[INFO] <<< maven-eclipse-plugin:2.10:eclipse (default-cli) < generate-resources @ simple-service <<<\n[INFO]\n[INFO] --- maven-eclipse-plugin:2.10:eclipse (default-cli) @ simple-service ---\n[INFO] Using Eclipse Workspace: null\n[INFO] Adding default classpath container: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7\n[INFO] File g:\\labs\\simple-service\\.project already exists.\n       Additional settings will be preserved, run mvn eclipse:clean if you want old settings to be removed.\n[INFO] Wrote Eclipse project for \"simple-service\" to g:\\labs\\simple-service.\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2.641 s\n[INFO] Finished at: 2015-07-30T23:42:49+08:00\n[INFO] Final Memory: 12M/222M\n[INFO] ------------------------------------------------------------------------\n```\n执行导入eclipse\n导入后项目结构如下\n![](http://7xksew.com1.z0.glb.clouddn.com/imagessimple-service-capture.PNG)\n套用WEB开发中的典型三层模型，RESTful中的资源类位于分层中的最高层API层，它下面为Service层和DAO层\n打开MyResource.java\n```java\npackage com.example;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n/**\n * Root resource (exposed at \"myresource\" path)\n */\n@Path(\"myresource\") //基于JAX-RS标准，@Path声明myresource这个资源路径\npublic class MyResource {\n    /**\n     * Method handling HTTP GET requests. The returned object will be sent\n     * to the client as \"text/plain\" media type.\n     * @return String that will be returned as a text/plain response.\n     */\n    @GET //只接收GET方式的请求\n    @Produces(MediaType.TEXT_PLAIN) //返回的数据类型\n    public String getIt() {\n        return \"Got it!\";\n    }\n}\n```\n国为这是一个Java SE 应用，所以就必需有一个入口来启动服务，所以有Main.java这个类来扮演这个容器\n```java\npackage com.example;\n\nimport org.glassfish.grizzly.http.server.HttpServer;\nimport org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport java.io.IOException;\nimport java.net.URI;\n\n/**\n * Main class.\n *\n */\npublic class Main {\n    // Base URI the Grizzly HTTP server will listen on\n    public static final String BASE_URI = \"http://localhost:8080/myapp/\";\n    /**\n     * Starts Grizzly HTTP server exposing JAX-RS resources defined in this application.\n     * @return Grizzly HTTP server.\n     */\n    public static HttpServer startServer() {\n        // create a resource config that scans for JAX-RS resources and providers\n        // in com.example package\n        final ResourceConfig rc = new ResourceConfig().packages(\"com.example\");\n\n        // create and start a new instance of grizzly http server\n        // exposing the Jersey application at BASE_URI\n        return GrizzlyHttpServerFactory.createHttpServer(URI.create(BASE_URI), rc);\n    }\n    /**\n     * Main method.\n     * @param args\n     * @throws IOException\n     */\n    public static void main(String[] args) throws IOException {\n        final HttpServer server = startServer();\n        System.out.println(String.format(\"Jersey app started with WADL available at \"\n                + \"%sapplication.wadl\\nHit enter to stop it...\", BASE_URI));\n        System.in.read();\n        server.stop();\n    }\n}\n```\n测试类，只有一个testGetIt方法用来测试MyResource公布的接口\n```java\npackage com.example;\n\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.client.WebTarget;\n\nimport org.glassfish.grizzly.http.server.HttpServer;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class MyResourceTest {\n\n    private HttpServer server;\n    private WebTarget target;\n\n    @Before\n    public void setUp() throws Exception {\n        // start the server\n        server = Main.startServer();\n        // create the client\n        Client c = ClientBuilder.newClient();\n\n        // uncomment the following line if you want to enable\n        // support for JSON in the client (you also have to uncomment\n        // dependency on jersey-media-json module in pom.xml and Main.startServer())\n        // --\n        // c.configuration().enable(new org.glassfish.jersey.media.json.JsonJaxbFeature());\n\n        target = c.target(Main.BASE_URI);\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        server.stop();\n    }\n\n    /**\n     * Test to see that the message \"Got it!\" is sent in the response.\n     */\n    @Test\n    public void testGetIt() {\n        String responseMsg = target.path(\"myresource\").request().get(String.class);\n        assertEquals(\"Got it!\", responseMsg);\n    }\n}\n```\n好了，回到eclipse IDE,打开Main.java文件，运行run as -> java application\n\n服务起来以后，打开浏览器输入`localhost:8080/myapp/myresource` 并回车查看结果\n\n## 扩展服务\n上例只是一个实验，以这个为模式，让我们来建立一个我们更加熟悉的，即有service层，Dao层的三层服务\n\n### 添加POJO实体类\n","source":"_posts/我的第一个RESTful服务.md","raw":"title: \"我的第一个RESTful服务\"\ndate: 2015-07-30 22:02:51\nalias: java/index.html\ntags: \n- RESTful \n- 笔记\ncategories: Lab\n\n---\n\n本文讲述基于Java SE环境的Jersey官方文档中的示例simple-service,并在此基础上扩展自己定义的REST资源服务\n## 从Maven原型中创建项目\n所谓原型项目是指通过简单的maven命令就可以从Maven中央仓库中取回一个已经具备基本功能、依赖完好、编译和测试运行无误的示例项目。`mvn archetype:generate`可以这样理解：以指定的原型为模板，生成或者创建新的Maven项目。\n``` stdout\nmvn archetype:generate -DarchetypeArtifactId=jersey-quickstart-grizzly2 \\\n-DarchetypeGroupId=org.glassfish.jersey.archetypes -DinteractiveMode=false \\\n-DgroupId=com.example -DartifactId=simple-service -Dpackage=com.example \\\n-DarchetypeVersion=2.19\n```\n## 测试项目的可用性\n运行完上面的Maven命令后，Maven会在当前目录下生成一个simple-service的文件夹。进入simple-service目录，运行Maven测试：\n``` stdout\nmvn clean test\n```\n第一次创建需要一点点时间给Maven下载项目所需要的依赖包，下载好之后再运行Maven测试就会看到以下输出\n```stdout\nLinbao@LENOVO-PC /g/labs/simple-service (master)\n$ mvn clean test\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building simple-service 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ simple-service ---\n[INFO] Deleting g:\\labs\\simple-service\\target\n[INFO]\n[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ simple-service ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] skip non existing resourceDirectory g:\\labs\\simple-service\\src\\main\\resources\n[INFO]\n[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ simple-service ---\n[INFO] Compiling 2 source files to g:\\labs\\simple-service\\target\\classes\n[INFO]\n[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ simple-service ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] skip non existing resourceDirectory g:\\labs\\simple-service\\src\\test\\resources\n[INFO]\n[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ simple-service ---\n[INFO] Compiling 1 source file to g:\\labs\\simple-service\\target\\test-classes\n[INFO]\n[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ simple-service ---\n[INFO] Surefire report directory: g:\\labs\\simple-service\\target\\surefire-reports\n\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning com.example.MyResourceTest\n七月 30, 2015 10:45:46 下午 org.glassfish.grizzly.http.server.NetworkListener start\nINFO: Started listener bound to [localhost:8080]\n七月 30, 2015 10:45:46 下午 org.glassfish.grizzly.http.server.HttpServer start\nINFO: [HttpServer] Started.\n七月 30, 2015 10:45:47 下午 org.glassfish.grizzly.http.server.NetworkListener shutdownNow\nINFO: Stopped listener bound to [localhost:8080]\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.079 sec\n\nResults :\n\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0\n\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 3.221 s\n[INFO] Finished at: 2015-07-30T22:45:47+08:00\n[INFO] Final Memory: 14M/217M\n[INFO] ------------------------------------------------------------------------\n```\n项目默认是用JDK1.6编译，如果要改更高版本编译器，需要打开pom.xml文件，修改maven-compiler-plugin的参数\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>2.5.1</version>\n    <inherited>true</inherited>\n    <configuration>\n        <source>1.7</source>\n        <target>1.7</target>\n    </configuration>\n</plugin>\n\t\t\t\n```\n\n查看项目结构，在项目根目录下执行`mvn denpendency:tree`命令\n```stdout\nLinbao@LENOVO-PC /g/labs/simple-service (master)\n$ mvn dependency:tree\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building simple-service 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ simple-service ---\n[INFO] com.example:simple-service:jar:1.0-SNAPSHOT\n[INFO] +- org.glassfish.jersey.containers:jersey-container-grizzly2-http:jar:2.19:compile\n[INFO] |  +- org.glassfish.hk2.external:javax.inject:jar:2.4.0-b25:compile\n[INFO] |  +- org.glassfish.grizzly:grizzly-http-server:jar:2.3.19:compile\n[INFO] |  |  \\- org.glassfish.grizzly:grizzly-http:jar:2.3.19:compile\n[INFO] |  |     \\- org.glassfish.grizzly:grizzly-framework:jar:2.3.19:compile\n[INFO] |  +- org.glassfish.jersey.core:jersey-common:jar:2.19:compile\n[INFO] |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile\n[INFO] |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.19:compile\n[INFO] |  |  +- org.glassfish.hk2:hk2-api:jar:2.4.0-b25:compile\n[INFO] |  |  |  +- org.glassfish.hk2:hk2-utils:jar:2.4.0-b25:compile\n[INFO] |  |  |  \\- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.4.0-b25:compile\n[INFO] |  |  +- org.glassfish.hk2:hk2-locator:jar:2.4.0-b25:compile\n[INFO] |  |  |  \\- org.javassist:javassist:jar:3.18.1-GA:compile\n[INFO] |  |  \\- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile\n[INFO] |  +- org.glassfish.jersey.core:jersey-server:jar:2.19:compile\n[INFO] |  |  +- org.glassfish.jersey.core:jersey-client:jar:2.19:compile\n[INFO] |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.19:compile\n[INFO] |  |  \\- javax.validation:validation-api:jar:1.1.0.Final:compile\n[INFO] |  \\- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile\n[INFO] \\- junit:junit:jar:4.9:test\n[INFO]    \\- org.hamcrest:hamcrest-core:jar:1.1:test\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 6.315 s\n[INFO] Finished at: 2015-07-30T23:08:21+08:00\n[INFO] Final Memory: 13M/153M\n[INFO] ------------------------------------------------------------------------\n```\n没有出现错误，来看看怎么创建RESTful服务\n## 分析项目\n执行以下命令`mvn eclipse:eclipse`生成exlipse项目文件，并将项目导入eclipse\n```stdout\n$ mvn eclipse:eclipse\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building simple-service 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] >>> maven-eclipse-plugin:2.10:eclipse (default-cli) > generate-resources @ simple-service >>>\n[INFO]\n[INFO] <<< maven-eclipse-plugin:2.10:eclipse (default-cli) < generate-resources @ simple-service <<<\n[INFO]\n[INFO] --- maven-eclipse-plugin:2.10:eclipse (default-cli) @ simple-service ---\n[INFO] Using Eclipse Workspace: null\n[INFO] Adding default classpath container: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7\n[INFO] File g:\\labs\\simple-service\\.project already exists.\n       Additional settings will be preserved, run mvn eclipse:clean if you want old settings to be removed.\n[INFO] Wrote Eclipse project for \"simple-service\" to g:\\labs\\simple-service.\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2.641 s\n[INFO] Finished at: 2015-07-30T23:42:49+08:00\n[INFO] Final Memory: 12M/222M\n[INFO] ------------------------------------------------------------------------\n```\n执行导入eclipse\n导入后项目结构如下\n![](http://7xksew.com1.z0.glb.clouddn.com/imagessimple-service-capture.PNG)\n套用WEB开发中的典型三层模型，RESTful中的资源类位于分层中的最高层API层，它下面为Service层和DAO层\n打开MyResource.java\n```java\npackage com.example;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n/**\n * Root resource (exposed at \"myresource\" path)\n */\n@Path(\"myresource\") //基于JAX-RS标准，@Path声明myresource这个资源路径\npublic class MyResource {\n    /**\n     * Method handling HTTP GET requests. The returned object will be sent\n     * to the client as \"text/plain\" media type.\n     * @return String that will be returned as a text/plain response.\n     */\n    @GET //只接收GET方式的请求\n    @Produces(MediaType.TEXT_PLAIN) //返回的数据类型\n    public String getIt() {\n        return \"Got it!\";\n    }\n}\n```\n国为这是一个Java SE 应用，所以就必需有一个入口来启动服务，所以有Main.java这个类来扮演这个容器\n```java\npackage com.example;\n\nimport org.glassfish.grizzly.http.server.HttpServer;\nimport org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport java.io.IOException;\nimport java.net.URI;\n\n/**\n * Main class.\n *\n */\npublic class Main {\n    // Base URI the Grizzly HTTP server will listen on\n    public static final String BASE_URI = \"http://localhost:8080/myapp/\";\n    /**\n     * Starts Grizzly HTTP server exposing JAX-RS resources defined in this application.\n     * @return Grizzly HTTP server.\n     */\n    public static HttpServer startServer() {\n        // create a resource config that scans for JAX-RS resources and providers\n        // in com.example package\n        final ResourceConfig rc = new ResourceConfig().packages(\"com.example\");\n\n        // create and start a new instance of grizzly http server\n        // exposing the Jersey application at BASE_URI\n        return GrizzlyHttpServerFactory.createHttpServer(URI.create(BASE_URI), rc);\n    }\n    /**\n     * Main method.\n     * @param args\n     * @throws IOException\n     */\n    public static void main(String[] args) throws IOException {\n        final HttpServer server = startServer();\n        System.out.println(String.format(\"Jersey app started with WADL available at \"\n                + \"%sapplication.wadl\\nHit enter to stop it...\", BASE_URI));\n        System.in.read();\n        server.stop();\n    }\n}\n```\n测试类，只有一个testGetIt方法用来测试MyResource公布的接口\n```java\npackage com.example;\n\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.client.WebTarget;\n\nimport org.glassfish.grizzly.http.server.HttpServer;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class MyResourceTest {\n\n    private HttpServer server;\n    private WebTarget target;\n\n    @Before\n    public void setUp() throws Exception {\n        // start the server\n        server = Main.startServer();\n        // create the client\n        Client c = ClientBuilder.newClient();\n\n        // uncomment the following line if you want to enable\n        // support for JSON in the client (you also have to uncomment\n        // dependency on jersey-media-json module in pom.xml and Main.startServer())\n        // --\n        // c.configuration().enable(new org.glassfish.jersey.media.json.JsonJaxbFeature());\n\n        target = c.target(Main.BASE_URI);\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        server.stop();\n    }\n\n    /**\n     * Test to see that the message \"Got it!\" is sent in the response.\n     */\n    @Test\n    public void testGetIt() {\n        String responseMsg = target.path(\"myresource\").request().get(String.class);\n        assertEquals(\"Got it!\", responseMsg);\n    }\n}\n```\n好了，回到eclipse IDE,打开Main.java文件，运行run as -> java application\n\n服务起来以后，打开浏览器输入`localhost:8080/myapp/myresource` 并回车查看结果\n\n## 扩展服务\n上例只是一个实验，以这个为模式，让我们来建立一个我们更加熟悉的，即有service层，Dao层的三层服务\n\n### 添加POJO实体类\n","slug":"我的第一个RESTful服务","published":1,"updated":"2019-12-30T17:16:22.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq2e001pqyvy6ouu1c0w","content":"<p>本文讲述基于Java SE环境的Jersey官方文档中的示例simple-service,并在此基础上扩展自己定义的REST资源服务</p>\n<h2 id=\"从Maven原型中创建项目\"><a href=\"#从Maven原型中创建项目\" class=\"headerlink\" title=\"从Maven原型中创建项目\"></a>从Maven原型中创建项目</h2><p>所谓原型项目是指通过简单的maven命令就可以从Maven中央仓库中取回一个已经具备基本功能、依赖完好、编译和测试运行无误的示例项目。<code>mvn archetype:generate</code>可以这样理解：以指定的原型为模板，生成或者创建新的Maven项目。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate -DarchetypeArtifactId=jersey-quickstart-grizzly2 \\</span><br><span class=\"line\">-DarchetypeGroupId=org.glassfish.jersey.archetypes -DinteractiveMode=false \\</span><br><span class=\"line\">-DgroupId=com.example -DartifactId=simple-service -Dpackage=com.example \\</span><br><span class=\"line\">-DarchetypeVersion=2.19</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试项目的可用性\"><a href=\"#测试项目的可用性\" class=\"headerlink\" title=\"测试项目的可用性\"></a>测试项目的可用性</h2><p>运行完上面的Maven命令后，Maven会在当前目录下生成一个simple-service的文件夹。进入simple-service目录，运行Maven测试：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean test</span><br></pre></td></tr></table></figure></p>\n<p>第一次创建需要一点点时间给Maven下载项目所需要的依赖包，下载好之后再运行Maven测试就会看到以下输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linbao@LENOVO-PC /g/labs/simple-service (master)</span><br><span class=\"line\">$ mvn clean test</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Building simple-service 1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ simple-service ---</span><br><span class=\"line\">[INFO] Deleting g:\\labs\\simple-service\\target</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ simple-service ---</span><br><span class=\"line\">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class=\"line\">[INFO] skip non existing resourceDirectory g:\\labs\\simple-service\\src\\main\\resources</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ simple-service ---</span><br><span class=\"line\">[INFO] Compiling 2 source files to g:\\labs\\simple-service\\target\\classes</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ simple-service ---</span><br><span class=\"line\">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class=\"line\">[INFO] skip non existing resourceDirectory g:\\labs\\simple-service\\src\\test\\resources</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ simple-service ---</span><br><span class=\"line\">[INFO] Compiling 1 source file to g:\\labs\\simple-service\\target\\test-classes</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ simple-service ---</span><br><span class=\"line\">[INFO] Surefire report directory: g:\\labs\\simple-service\\target\\surefire-reports</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------------------</span><br><span class=\"line\"> T E S T S</span><br><span class=\"line\">-------------------------------------------------------</span><br><span class=\"line\">Running com.example.MyResourceTest</span><br><span class=\"line\">七月 30, 2015 10:45:46 下午 org.glassfish.grizzly.http.server.NetworkListener start</span><br><span class=\"line\">INFO: Started listener bound to [localhost:8080]</span><br><span class=\"line\">七月 30, 2015 10:45:46 下午 org.glassfish.grizzly.http.server.HttpServer start</span><br><span class=\"line\">INFO: [HttpServer] Started.</span><br><span class=\"line\">七月 30, 2015 10:45:47 下午 org.glassfish.grizzly.http.server.NetworkListener shutdownNow</span><br><span class=\"line\">INFO: Stopped listener bound to [localhost:8080]</span><br><span class=\"line\">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.079 sec</span><br><span class=\"line\"></span><br><span class=\"line\">Results :</span><br><span class=\"line\"></span><br><span class=\"line\">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class=\"line\"></span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 3.221 s</span><br><span class=\"line\">[INFO] Finished at: 2015-07-30T22:45:47+08:00</span><br><span class=\"line\">[INFO] Final Memory: 14M/217M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>\n<p>项目默认是用JDK1.6编译，如果要改更高版本编译器，需要打开pom.xml文件，修改maven-compiler-plugin的参数<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">inherited</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">inherited</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>查看项目结构，在项目根目录下执行<code>mvn denpendency:tree</code>命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linbao@LENOVO-PC /g/labs/simple-service (master)</span><br><span class=\"line\">$ mvn dependency:tree</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Building simple-service 1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ simple-service ---</span><br><span class=\"line\">[INFO] com.example:simple-service:jar:1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] +- org.glassfish.jersey.containers:jersey-container-grizzly2-http:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  +- org.glassfish.hk2.external:javax.inject:jar:2.4.0-b25:compile</span><br><span class=\"line\">[INFO] |  +- org.glassfish.grizzly:grizzly-http-server:jar:2.3.19:compile</span><br><span class=\"line\">[INFO] |  |  \\- org.glassfish.grizzly:grizzly-http:jar:2.3.19:compile</span><br><span class=\"line\">[INFO] |  |     \\- org.glassfish.grizzly:grizzly-framework:jar:2.3.19:compile</span><br><span class=\"line\">[INFO] |  +- org.glassfish.jersey.core:jersey-common:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile</span><br><span class=\"line\">[INFO] |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  |  +- org.glassfish.hk2:hk2-api:jar:2.4.0-b25:compile</span><br><span class=\"line\">[INFO] |  |  |  +- org.glassfish.hk2:hk2-utils:jar:2.4.0-b25:compile</span><br><span class=\"line\">[INFO] |  |  |  \\- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.4.0-b25:compile</span><br><span class=\"line\">[INFO] |  |  +- org.glassfish.hk2:hk2-locator:jar:2.4.0-b25:compile</span><br><span class=\"line\">[INFO] |  |  |  \\- org.javassist:javassist:jar:3.18.1-GA:compile</span><br><span class=\"line\">[INFO] |  |  \\- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile</span><br><span class=\"line\">[INFO] |  +- org.glassfish.jersey.core:jersey-server:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  |  +- org.glassfish.jersey.core:jersey-client:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  |  \\- javax.validation:validation-api:jar:1.1.0.Final:compile</span><br><span class=\"line\">[INFO] |  \\- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile</span><br><span class=\"line\">[INFO] \\- junit:junit:jar:4.9:test</span><br><span class=\"line\">[INFO]    \\- org.hamcrest:hamcrest-core:jar:1.1:test</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 6.315 s</span><br><span class=\"line\">[INFO] Finished at: 2015-07-30T23:08:21+08:00</span><br><span class=\"line\">[INFO] Final Memory: 13M/153M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>\n<p>没有出现错误，来看看怎么创建RESTful服务</p>\n<h2 id=\"分析项目\"><a href=\"#分析项目\" class=\"headerlink\" title=\"分析项目\"></a>分析项目</h2><p>执行以下命令<code>mvn eclipse:eclipse</code>生成exlipse项目文件，并将项目导入eclipse<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn eclipse:eclipse</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Building simple-service 1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] &gt;&gt;&gt; maven-eclipse-plugin:2.10:eclipse (default-cli) &gt; generate-resources @ simple-service &gt;&gt;&gt;</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] &lt;&lt;&lt; maven-eclipse-plugin:2.10:eclipse (default-cli) &lt; generate-resources @ simple-service &lt;&lt;&lt;</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-eclipse-plugin:2.10:eclipse (default-cli) @ simple-service ---</span><br><span class=\"line\">[INFO] Using Eclipse Workspace: null</span><br><span class=\"line\">[INFO] Adding default classpath container: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7</span><br><span class=\"line\">[INFO] File g:\\labs\\simple-service\\.project already exists.</span><br><span class=\"line\">       Additional settings will be preserved, run mvn eclipse:clean if you want old settings to be removed.</span><br><span class=\"line\">[INFO] Wrote Eclipse project for &quot;simple-service&quot; to g:\\labs\\simple-service.</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 2.641 s</span><br><span class=\"line\">[INFO] Finished at: 2015-07-30T23:42:49+08:00</span><br><span class=\"line\">[INFO] Final Memory: 12M/222M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>\n<p>执行导入eclipse<br>导入后项目结构如下<br><img src=\"http://7xksew.com1.z0.glb.clouddn.com/imagessimple-service-capture.PNG\" alt><br>套用WEB开发中的典型三层模型，RESTful中的资源类位于分层中的最高层API层，它下面为Service层和DAO层<br>打开MyResource.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Root resource (exposed at \"myresource\" path)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"myresource\"</span>) <span class=\"comment\">//基于JAX-RS标准，@Path声明myresource这个资源路径</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyResource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Method handling HTTP GET requests. The returned object will be sent</span></span><br><span class=\"line\"><span class=\"comment\">     * to the client as \"text/plain\" media type.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> String that will be returned as a text/plain response.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GET</span> <span class=\"comment\">//只接收GET方式的请求</span></span><br><span class=\"line\">    <span class=\"meta\">@Produces</span>(MediaType.TEXT_PLAIN) <span class=\"comment\">//返回的数据类型</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getIt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Got it!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>国为这是一个Java SE 应用，所以就必需有一个入口来启动服务，所以有Main.java这个类来扮演这个容器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.glassfish.grizzly.http.server.HttpServer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.glassfish.jersey.server.ResourceConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Main class.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Base URI the Grizzly HTTP server will listen on</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BASE_URI = <span class=\"string\">\"http://localhost:8080/myapp/\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Starts Grizzly HTTP server exposing JAX-RS resources defined in this application.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Grizzly HTTP server.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpServer <span class=\"title\">startServer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// create a resource config that scans for JAX-RS resources and providers</span></span><br><span class=\"line\">        <span class=\"comment\">// in com.example package</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ResourceConfig rc = <span class=\"keyword\">new</span> ResourceConfig().packages(<span class=\"string\">\"com.example\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// create and start a new instance of grizzly http server</span></span><br><span class=\"line\">        <span class=\"comment\">// exposing the Jersey application at BASE_URI</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> GrizzlyHttpServerFactory.createHttpServer(URI.create(BASE_URI), rc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Main method.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> HttpServer server = startServer();</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"Jersey app started with WADL available at \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"%sapplication.wadl\\nHit enter to stop it...\"</span>, BASE_URI));</span><br><span class=\"line\">        System.in.read();</span><br><span class=\"line\">        server.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类，只有一个testGetIt方法用来测试MyResource公布的接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.client.Client;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.client.ClientBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.client.WebTarget;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.glassfish.grizzly.http.server.HttpServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.After;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyResourceTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpServer server;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebTarget target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// start the server</span></span><br><span class=\"line\">        server = Main.startServer();</span><br><span class=\"line\">        <span class=\"comment\">// create the client</span></span><br><span class=\"line\">        Client c = ClientBuilder.newClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// uncomment the following line if you want to enable</span></span><br><span class=\"line\">        <span class=\"comment\">// support for JSON in the client (you also have to uncomment</span></span><br><span class=\"line\">        <span class=\"comment\">// dependency on jersey-media-json module in pom.xml and Main.startServer())</span></span><br><span class=\"line\">        <span class=\"comment\">// --</span></span><br><span class=\"line\">        <span class=\"comment\">// c.configuration().enable(new org.glassfish.jersey.media.json.JsonJaxbFeature());</span></span><br><span class=\"line\"></span><br><span class=\"line\">        target = c.target(Main.BASE_URI);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tearDown</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        server.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Test to see that the message \"Got it!\" is sent in the response.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetIt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String responseMsg = target.path(<span class=\"string\">\"myresource\"</span>).request().get(String<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"Got it!\"</span>, responseMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好了，回到eclipse IDE,打开Main.java文件，运行run as -&gt; java application</p>\n<p>服务起来以后，打开浏览器输入<code>localhost:8080/myapp/myresource</code> 并回车查看结果</p>\n<h2 id=\"扩展服务\"><a href=\"#扩展服务\" class=\"headerlink\" title=\"扩展服务\"></a>扩展服务</h2><p>上例只是一个实验，以这个为模式，让我们来建立一个我们更加熟悉的，即有service层，Dao层的三层服务</p>\n<h3 id=\"添加POJO实体类\"><a href=\"#添加POJO实体类\" class=\"headerlink\" title=\"添加POJO实体类\"></a>添加POJO实体类</h3>","site":{"data":{}},"excerpt":"","more":"<p>本文讲述基于Java SE环境的Jersey官方文档中的示例simple-service,并在此基础上扩展自己定义的REST资源服务</p>\n<h2 id=\"从Maven原型中创建项目\"><a href=\"#从Maven原型中创建项目\" class=\"headerlink\" title=\"从Maven原型中创建项目\"></a>从Maven原型中创建项目</h2><p>所谓原型项目是指通过简单的maven命令就可以从Maven中央仓库中取回一个已经具备基本功能、依赖完好、编译和测试运行无误的示例项目。<code>mvn archetype:generate</code>可以这样理解：以指定的原型为模板，生成或者创建新的Maven项目。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate -DarchetypeArtifactId=jersey-quickstart-grizzly2 \\</span><br><span class=\"line\">-DarchetypeGroupId=org.glassfish.jersey.archetypes -DinteractiveMode=false \\</span><br><span class=\"line\">-DgroupId=com.example -DartifactId=simple-service -Dpackage=com.example \\</span><br><span class=\"line\">-DarchetypeVersion=2.19</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试项目的可用性\"><a href=\"#测试项目的可用性\" class=\"headerlink\" title=\"测试项目的可用性\"></a>测试项目的可用性</h2><p>运行完上面的Maven命令后，Maven会在当前目录下生成一个simple-service的文件夹。进入simple-service目录，运行Maven测试：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean test</span><br></pre></td></tr></table></figure></p>\n<p>第一次创建需要一点点时间给Maven下载项目所需要的依赖包，下载好之后再运行Maven测试就会看到以下输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linbao@LENOVO-PC /g/labs/simple-service (master)</span><br><span class=\"line\">$ mvn clean test</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Building simple-service 1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ simple-service ---</span><br><span class=\"line\">[INFO] Deleting g:\\labs\\simple-service\\target</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ simple-service ---</span><br><span class=\"line\">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class=\"line\">[INFO] skip non existing resourceDirectory g:\\labs\\simple-service\\src\\main\\resources</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ simple-service ---</span><br><span class=\"line\">[INFO] Compiling 2 source files to g:\\labs\\simple-service\\target\\classes</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ simple-service ---</span><br><span class=\"line\">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class=\"line\">[INFO] skip non existing resourceDirectory g:\\labs\\simple-service\\src\\test\\resources</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ simple-service ---</span><br><span class=\"line\">[INFO] Compiling 1 source file to g:\\labs\\simple-service\\target\\test-classes</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ simple-service ---</span><br><span class=\"line\">[INFO] Surefire report directory: g:\\labs\\simple-service\\target\\surefire-reports</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------------------</span><br><span class=\"line\"> T E S T S</span><br><span class=\"line\">-------------------------------------------------------</span><br><span class=\"line\">Running com.example.MyResourceTest</span><br><span class=\"line\">七月 30, 2015 10:45:46 下午 org.glassfish.grizzly.http.server.NetworkListener start</span><br><span class=\"line\">INFO: Started listener bound to [localhost:8080]</span><br><span class=\"line\">七月 30, 2015 10:45:46 下午 org.glassfish.grizzly.http.server.HttpServer start</span><br><span class=\"line\">INFO: [HttpServer] Started.</span><br><span class=\"line\">七月 30, 2015 10:45:47 下午 org.glassfish.grizzly.http.server.NetworkListener shutdownNow</span><br><span class=\"line\">INFO: Stopped listener bound to [localhost:8080]</span><br><span class=\"line\">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.079 sec</span><br><span class=\"line\"></span><br><span class=\"line\">Results :</span><br><span class=\"line\"></span><br><span class=\"line\">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class=\"line\"></span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 3.221 s</span><br><span class=\"line\">[INFO] Finished at: 2015-07-30T22:45:47+08:00</span><br><span class=\"line\">[INFO] Final Memory: 14M/217M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>\n<p>项目默认是用JDK1.6编译，如果要改更高版本编译器，需要打开pom.xml文件，修改maven-compiler-plugin的参数<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">inherited</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">inherited</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>查看项目结构，在项目根目录下执行<code>mvn denpendency:tree</code>命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linbao@LENOVO-PC /g/labs/simple-service (master)</span><br><span class=\"line\">$ mvn dependency:tree</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Building simple-service 1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ simple-service ---</span><br><span class=\"line\">[INFO] com.example:simple-service:jar:1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] +- org.glassfish.jersey.containers:jersey-container-grizzly2-http:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  +- org.glassfish.hk2.external:javax.inject:jar:2.4.0-b25:compile</span><br><span class=\"line\">[INFO] |  +- org.glassfish.grizzly:grizzly-http-server:jar:2.3.19:compile</span><br><span class=\"line\">[INFO] |  |  \\- org.glassfish.grizzly:grizzly-http:jar:2.3.19:compile</span><br><span class=\"line\">[INFO] |  |     \\- org.glassfish.grizzly:grizzly-framework:jar:2.3.19:compile</span><br><span class=\"line\">[INFO] |  +- org.glassfish.jersey.core:jersey-common:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile</span><br><span class=\"line\">[INFO] |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  |  +- org.glassfish.hk2:hk2-api:jar:2.4.0-b25:compile</span><br><span class=\"line\">[INFO] |  |  |  +- org.glassfish.hk2:hk2-utils:jar:2.4.0-b25:compile</span><br><span class=\"line\">[INFO] |  |  |  \\- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.4.0-b25:compile</span><br><span class=\"line\">[INFO] |  |  +- org.glassfish.hk2:hk2-locator:jar:2.4.0-b25:compile</span><br><span class=\"line\">[INFO] |  |  |  \\- org.javassist:javassist:jar:3.18.1-GA:compile</span><br><span class=\"line\">[INFO] |  |  \\- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile</span><br><span class=\"line\">[INFO] |  +- org.glassfish.jersey.core:jersey-server:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  |  +- org.glassfish.jersey.core:jersey-client:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.19:compile</span><br><span class=\"line\">[INFO] |  |  \\- javax.validation:validation-api:jar:1.1.0.Final:compile</span><br><span class=\"line\">[INFO] |  \\- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile</span><br><span class=\"line\">[INFO] \\- junit:junit:jar:4.9:test</span><br><span class=\"line\">[INFO]    \\- org.hamcrest:hamcrest-core:jar:1.1:test</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 6.315 s</span><br><span class=\"line\">[INFO] Finished at: 2015-07-30T23:08:21+08:00</span><br><span class=\"line\">[INFO] Final Memory: 13M/153M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>\n<p>没有出现错误，来看看怎么创建RESTful服务</p>\n<h2 id=\"分析项目\"><a href=\"#分析项目\" class=\"headerlink\" title=\"分析项目\"></a>分析项目</h2><p>执行以下命令<code>mvn eclipse:eclipse</code>生成exlipse项目文件，并将项目导入eclipse<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn eclipse:eclipse</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Building simple-service 1.0-SNAPSHOT</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] &gt;&gt;&gt; maven-eclipse-plugin:2.10:eclipse (default-cli) &gt; generate-resources @ simple-service &gt;&gt;&gt;</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] &lt;&lt;&lt; maven-eclipse-plugin:2.10:eclipse (default-cli) &lt; generate-resources @ simple-service &lt;&lt;&lt;</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] --- maven-eclipse-plugin:2.10:eclipse (default-cli) @ simple-service ---</span><br><span class=\"line\">[INFO] Using Eclipse Workspace: null</span><br><span class=\"line\">[INFO] Adding default classpath container: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7</span><br><span class=\"line\">[INFO] File g:\\labs\\simple-service\\.project already exists.</span><br><span class=\"line\">       Additional settings will be preserved, run mvn eclipse:clean if you want old settings to be removed.</span><br><span class=\"line\">[INFO] Wrote Eclipse project for &quot;simple-service&quot; to g:\\labs\\simple-service.</span><br><span class=\"line\">[INFO]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 2.641 s</span><br><span class=\"line\">[INFO] Finished at: 2015-07-30T23:42:49+08:00</span><br><span class=\"line\">[INFO] Final Memory: 12M/222M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>\n<p>执行导入eclipse<br>导入后项目结构如下<br><img src=\"http://7xksew.com1.z0.glb.clouddn.com/imagessimple-service-capture.PNG\" alt><br>套用WEB开发中的典型三层模型，RESTful中的资源类位于分层中的最高层API层，它下面为Service层和DAO层<br>打开MyResource.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.GET;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.Produces;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.core.MediaType;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Root resource (exposed at \"myresource\" path)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Path</span>(<span class=\"string\">\"myresource\"</span>) <span class=\"comment\">//基于JAX-RS标准，@Path声明myresource这个资源路径</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyResource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Method handling HTTP GET requests. The returned object will be sent</span></span><br><span class=\"line\"><span class=\"comment\">     * to the client as \"text/plain\" media type.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> String that will be returned as a text/plain response.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GET</span> <span class=\"comment\">//只接收GET方式的请求</span></span><br><span class=\"line\">    <span class=\"meta\">@Produces</span>(MediaType.TEXT_PLAIN) <span class=\"comment\">//返回的数据类型</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getIt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Got it!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>国为这是一个Java SE 应用，所以就必需有一个入口来启动服务，所以有Main.java这个类来扮演这个容器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.glassfish.grizzly.http.server.HttpServer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.glassfish.jersey.server.ResourceConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Main class.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Base URI the Grizzly HTTP server will listen on</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BASE_URI = <span class=\"string\">\"http://localhost:8080/myapp/\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Starts Grizzly HTTP server exposing JAX-RS resources defined in this application.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Grizzly HTTP server.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpServer <span class=\"title\">startServer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// create a resource config that scans for JAX-RS resources and providers</span></span><br><span class=\"line\">        <span class=\"comment\">// in com.example package</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ResourceConfig rc = <span class=\"keyword\">new</span> ResourceConfig().packages(<span class=\"string\">\"com.example\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// create and start a new instance of grizzly http server</span></span><br><span class=\"line\">        <span class=\"comment\">// exposing the Jersey application at BASE_URI</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> GrizzlyHttpServerFactory.createHttpServer(URI.create(BASE_URI), rc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Main method.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> HttpServer server = startServer();</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"Jersey app started with WADL available at \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"%sapplication.wadl\\nHit enter to stop it...\"</span>, BASE_URI));</span><br><span class=\"line\">        System.in.read();</span><br><span class=\"line\">        server.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类，只有一个testGetIt方法用来测试MyResource公布的接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.client.Client;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.client.ClientBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.ws.rs.client.WebTarget;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.glassfish.grizzly.http.server.HttpServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.After;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyResourceTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpServer server;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebTarget target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// start the server</span></span><br><span class=\"line\">        server = Main.startServer();</span><br><span class=\"line\">        <span class=\"comment\">// create the client</span></span><br><span class=\"line\">        Client c = ClientBuilder.newClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// uncomment the following line if you want to enable</span></span><br><span class=\"line\">        <span class=\"comment\">// support for JSON in the client (you also have to uncomment</span></span><br><span class=\"line\">        <span class=\"comment\">// dependency on jersey-media-json module in pom.xml and Main.startServer())</span></span><br><span class=\"line\">        <span class=\"comment\">// --</span></span><br><span class=\"line\">        <span class=\"comment\">// c.configuration().enable(new org.glassfish.jersey.media.json.JsonJaxbFeature());</span></span><br><span class=\"line\"></span><br><span class=\"line\">        target = c.target(Main.BASE_URI);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tearDown</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        server.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Test to see that the message \"Got it!\" is sent in the response.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetIt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String responseMsg = target.path(<span class=\"string\">\"myresource\"</span>).request().get(String<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"Got it!\"</span>, responseMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好了，回到eclipse IDE,打开Main.java文件，运行run as -&gt; java application</p>\n<p>服务起来以后，打开浏览器输入<code>localhost:8080/myapp/myresource</code> 并回车查看结果</p>\n<h2 id=\"扩展服务\"><a href=\"#扩展服务\" class=\"headerlink\" title=\"扩展服务\"></a>扩展服务</h2><p>上例只是一个实验，以这个为模式，让我们来建立一个我们更加熟悉的，即有service层，Dao层的三层服务</p>\n<h3 id=\"添加POJO实体类\"><a href=\"#添加POJO实体类\" class=\"headerlink\" title=\"添加POJO实体类\"></a>添加POJO实体类</h3>"},{"title":"返回顶部插件","date":"2015-10-09T12:45:16.000Z","alias":null,"_content":"\n## 前言\n慢慢学吧，今天试着又写了个jquery插件，一个每个网站都常用的工具，想要的就拿去吧\n\n## 返回顶部插件\n\n### 插件设计初衷\n - 只要一句代码便搞定一切而不需其他操作\n - 不依赖页面结构\n - 可以适当自定义返回顶部的样式\n - 以插件的形式存在\n \n### 需求\n - 当页面滚动超过100px时返回顶部按钮显示，否则隐藏\n - 返回按钮按下，页面返回顶部，同时按钮消失\n \n## 调用过程\n\n```javascript\n$('body').backToTop();//可接收参数，json格式\n```\n\n## 代码清单\n```javascript\n\n/*\n * BackToTop jQuery plugin\n * Copyright 2015 Linbao.\n * Licensed under apache MIT \n */\n /*require jquery library */\n /*! jquery-1.7.2.min.js | License(https://jquery.org/license/) | www.jquery.com */\n 'use strict'\n    $(function(){\n      /*the back to top requirements much meet belows entries:\n      *-1. when the window scroll over 100px, the back to top will shown\n      *-2. use a html markup template\n      *-3. when the button is clicked, the window scroll to very top of the document and button much disppear at the same time\n      *-4. will impletement as an jquery plugin\n      */\n      $.fn.backToTop = function(options){\n        var defaults = {\n          width: '4em',\n          height: '4em',\n          background: '#a12321',\n          top: '90%',\n          lineHeight: '4em',\n          right: '2em',\n          display:'none',\n          textAlign: 'center',\n          content: 'Top',\n          speed: 500\n        };\n        var selector = {\n          btnBack: $('.backToTop')\n        };\n        var option = $.extend({},defaults,options);\n        //console.log('After embed' + option)\n        \n        function init(){\n          var self = this;\n          //console.log('Init ...');\n          var template = createTemplate();\n          console.log(option.width);\n          $('body').append(template);\n          $('.backToTop').css({\n            'width':option.width,\n            'height':option.height,\n            'position':'fixed',\n            'right':option.right,\n            'background':option.background,\n            'top':option.top,\n            'line-height':option.lineHeight,\n            'display':option.display,\n            'text-align':option.textAlign,\n            'cursor':'pointer'\n          });\n          //console.log('init complete');\n          var scroll = 0;\n\n          $(window).scroll(function(){\n            scroll = $(this).scrollTop();\n            //o.css(\"top\",Math.max(80,260-scroll));\n            if($(this).scrollTop() > 60){\n              $('.backToTop').show().animate({opacity: 1},1300);\n            }else{\n              $('.backToTop').animate({opacity: 0},option.speed).hide();\n            }\n            \n          });\n        };\n        \n        function createTemplate(){\n          return \"<div class='backToTop' id='backToTop'>\"+option.content+\"</div>\";\n        };\n        //console.log('this = ');\n        init();\n        $('.backToTop').bind('click',function(){\n          //console.log('trigger click');\n          $('body,html').animate({scrollTop:0},option.speed);\n        })\n        \n      }\n      $('body').backToTop();\n    })\n\n```","source":"_posts/返回顶部插件.md","raw":"title: \"返回顶部插件\"\ndate: 2015-10-09 20:45:16\nalias: \ntags:\n - jQuery\n - 工具\ncategories: 总结与分享\n---\n\n## 前言\n慢慢学吧，今天试着又写了个jquery插件，一个每个网站都常用的工具，想要的就拿去吧\n\n## 返回顶部插件\n\n### 插件设计初衷\n - 只要一句代码便搞定一切而不需其他操作\n - 不依赖页面结构\n - 可以适当自定义返回顶部的样式\n - 以插件的形式存在\n \n### 需求\n - 当页面滚动超过100px时返回顶部按钮显示，否则隐藏\n - 返回按钮按下，页面返回顶部，同时按钮消失\n \n## 调用过程\n\n```javascript\n$('body').backToTop();//可接收参数，json格式\n```\n\n## 代码清单\n```javascript\n\n/*\n * BackToTop jQuery plugin\n * Copyright 2015 Linbao.\n * Licensed under apache MIT \n */\n /*require jquery library */\n /*! jquery-1.7.2.min.js | License(https://jquery.org/license/) | www.jquery.com */\n 'use strict'\n    $(function(){\n      /*the back to top requirements much meet belows entries:\n      *-1. when the window scroll over 100px, the back to top will shown\n      *-2. use a html markup template\n      *-3. when the button is clicked, the window scroll to very top of the document and button much disppear at the same time\n      *-4. will impletement as an jquery plugin\n      */\n      $.fn.backToTop = function(options){\n        var defaults = {\n          width: '4em',\n          height: '4em',\n          background: '#a12321',\n          top: '90%',\n          lineHeight: '4em',\n          right: '2em',\n          display:'none',\n          textAlign: 'center',\n          content: 'Top',\n          speed: 500\n        };\n        var selector = {\n          btnBack: $('.backToTop')\n        };\n        var option = $.extend({},defaults,options);\n        //console.log('After embed' + option)\n        \n        function init(){\n          var self = this;\n          //console.log('Init ...');\n          var template = createTemplate();\n          console.log(option.width);\n          $('body').append(template);\n          $('.backToTop').css({\n            'width':option.width,\n            'height':option.height,\n            'position':'fixed',\n            'right':option.right,\n            'background':option.background,\n            'top':option.top,\n            'line-height':option.lineHeight,\n            'display':option.display,\n            'text-align':option.textAlign,\n            'cursor':'pointer'\n          });\n          //console.log('init complete');\n          var scroll = 0;\n\n          $(window).scroll(function(){\n            scroll = $(this).scrollTop();\n            //o.css(\"top\",Math.max(80,260-scroll));\n            if($(this).scrollTop() > 60){\n              $('.backToTop').show().animate({opacity: 1},1300);\n            }else{\n              $('.backToTop').animate({opacity: 0},option.speed).hide();\n            }\n            \n          });\n        };\n        \n        function createTemplate(){\n          return \"<div class='backToTop' id='backToTop'>\"+option.content+\"</div>\";\n        };\n        //console.log('this = ');\n        init();\n        $('.backToTop').bind('click',function(){\n          //console.log('trigger click');\n          $('body,html').animate({scrollTop:0},option.speed);\n        })\n        \n      }\n      $('body').backToTop();\n    })\n\n```","slug":"返回顶部插件","published":1,"updated":"2019-12-30T17:16:22.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4u6dq2h001sqyvy8nog7s9y","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>慢慢学吧，今天试着又写了个jquery插件，一个每个网站都常用的工具，想要的就拿去吧</p>\n<h2 id=\"返回顶部插件\"><a href=\"#返回顶部插件\" class=\"headerlink\" title=\"返回顶部插件\"></a>返回顶部插件</h2><h3 id=\"插件设计初衷\"><a href=\"#插件设计初衷\" class=\"headerlink\" title=\"插件设计初衷\"></a>插件设计初衷</h3><ul>\n<li>只要一句代码便搞定一切而不需其他操作</li>\n<li>不依赖页面结构</li>\n<li>可以适当自定义返回顶部的样式</li>\n<li>以插件的形式存在</li>\n</ul>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>当页面滚动超过100px时返回顶部按钮显示，否则隐藏</li>\n<li>返回按钮按下，页面返回顶部，同时按钮消失</li>\n</ul>\n<h2 id=\"调用过程\"><a href=\"#调用过程\" class=\"headerlink\" title=\"调用过程\"></a>调用过程</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'body'</span>).backToTop();<span class=\"comment\">//可接收参数，json格式</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"代码清单\"><a href=\"#代码清单\" class=\"headerlink\" title=\"代码清单\"></a>代码清单</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * BackToTop jQuery plugin</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2015 Linbao.</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under apache MIT </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">/*require jquery library */</span></span><br><span class=\"line\"> <span class=\"comment\">/*! jquery-1.7.2.min.js | License(https://jquery.org/license/) | www.jquery.com */</span></span><br><span class=\"line\"><span class=\"meta\"> 'use strict'</span></span><br><span class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/*the back to top requirements much meet belows entries:</span></span><br><span class=\"line\"><span class=\"comment\">      *-1. when the window scroll over 100px, the back to top will shown</span></span><br><span class=\"line\"><span class=\"comment\">      *-2. use a html markup template</span></span><br><span class=\"line\"><span class=\"comment\">      *-3. when the button is clicked, the window scroll to very top of the document and button much disppear at the same time</span></span><br><span class=\"line\"><span class=\"comment\">      *-4. will impletement as an jquery plugin</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      $.fn.backToTop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> defaults = &#123;</span><br><span class=\"line\">          width: <span class=\"string\">'4em'</span>,</span><br><span class=\"line\">          height: <span class=\"string\">'4em'</span>,</span><br><span class=\"line\">          background: <span class=\"string\">'#a12321'</span>,</span><br><span class=\"line\">          top: <span class=\"string\">'90%'</span>,</span><br><span class=\"line\">          lineHeight: <span class=\"string\">'4em'</span>,</span><br><span class=\"line\">          right: <span class=\"string\">'2em'</span>,</span><br><span class=\"line\">          display:<span class=\"string\">'none'</span>,</span><br><span class=\"line\">          textAlign: <span class=\"string\">'center'</span>,</span><br><span class=\"line\">          content: <span class=\"string\">'Top'</span>,</span><br><span class=\"line\">          speed: <span class=\"number\">500</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> selector = &#123;</span><br><span class=\"line\">          btnBack: $(<span class=\"string\">'.backToTop'</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> option = $.extend(&#123;&#125;,defaults,options);</span><br><span class=\"line\">        <span class=\"comment\">//console.log('After embed' + option)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">          <span class=\"comment\">//console.log('Init ...');</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> template = createTemplate();</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(option.width);</span><br><span class=\"line\">          $(<span class=\"string\">'body'</span>).append(template);</span><br><span class=\"line\">          $(<span class=\"string\">'.backToTop'</span>).css(&#123;</span><br><span class=\"line\">            <span class=\"string\">'width'</span>:option.width,</span><br><span class=\"line\">            <span class=\"string\">'height'</span>:option.height,</span><br><span class=\"line\">            <span class=\"string\">'position'</span>:<span class=\"string\">'fixed'</span>,</span><br><span class=\"line\">            <span class=\"string\">'right'</span>:option.right,</span><br><span class=\"line\">            <span class=\"string\">'background'</span>:option.background,</span><br><span class=\"line\">            <span class=\"string\">'top'</span>:option.top,</span><br><span class=\"line\">            <span class=\"string\">'line-height'</span>:option.lineHeight,</span><br><span class=\"line\">            <span class=\"string\">'display'</span>:option.display,</span><br><span class=\"line\">            <span class=\"string\">'text-align'</span>:option.textAlign,</span><br><span class=\"line\">            <span class=\"string\">'cursor'</span>:<span class=\"string\">'pointer'</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"comment\">//console.log('init complete');</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> scroll = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          $(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            scroll = $(<span class=\"keyword\">this</span>).scrollTop();</span><br><span class=\"line\">            <span class=\"comment\">//o.css(\"top\",Math.max(80,260-scroll));</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>($(<span class=\"keyword\">this</span>).scrollTop() &gt; <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">              $(<span class=\"string\">'.backToTop'</span>).show().animate(&#123;<span class=\"attr\">opacity</span>: <span class=\"number\">1</span>&#125;,<span class=\"number\">1300</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              $(<span class=\"string\">'.backToTop'</span>).animate(&#123;<span class=\"attr\">opacity</span>: <span class=\"number\">0</span>&#125;,option.speed).hide();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTemplate</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;div class='backToTop' id='backToTop'&gt;\"</span>+option.content+<span class=\"string\">\"&lt;/div&gt;\"</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//console.log('this = ');</span></span><br><span class=\"line\">        init();</span><br><span class=\"line\">        $(<span class=\"string\">'.backToTop'</span>).bind(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//console.log('trigger click');</span></span><br><span class=\"line\">          $(<span class=\"string\">'body,html'</span>).animate(&#123;<span class=\"attr\">scrollTop</span>:<span class=\"number\">0</span>&#125;,option.speed);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      $(<span class=\"string\">'body'</span>).backToTop();</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>慢慢学吧，今天试着又写了个jquery插件，一个每个网站都常用的工具，想要的就拿去吧</p>\n<h2 id=\"返回顶部插件\"><a href=\"#返回顶部插件\" class=\"headerlink\" title=\"返回顶部插件\"></a>返回顶部插件</h2><h3 id=\"插件设计初衷\"><a href=\"#插件设计初衷\" class=\"headerlink\" title=\"插件设计初衷\"></a>插件设计初衷</h3><ul>\n<li>只要一句代码便搞定一切而不需其他操作</li>\n<li>不依赖页面结构</li>\n<li>可以适当自定义返回顶部的样式</li>\n<li>以插件的形式存在</li>\n</ul>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>当页面滚动超过100px时返回顶部按钮显示，否则隐藏</li>\n<li>返回按钮按下，页面返回顶部，同时按钮消失</li>\n</ul>\n<h2 id=\"调用过程\"><a href=\"#调用过程\" class=\"headerlink\" title=\"调用过程\"></a>调用过程</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'body'</span>).backToTop();<span class=\"comment\">//可接收参数，json格式</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"代码清单\"><a href=\"#代码清单\" class=\"headerlink\" title=\"代码清单\"></a>代码清单</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * BackToTop jQuery plugin</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2015 Linbao.</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under apache MIT </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">/*require jquery library */</span></span><br><span class=\"line\"> <span class=\"comment\">/*! jquery-1.7.2.min.js | License(https://jquery.org/license/) | www.jquery.com */</span></span><br><span class=\"line\"><span class=\"meta\"> 'use strict'</span></span><br><span class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/*the back to top requirements much meet belows entries:</span></span><br><span class=\"line\"><span class=\"comment\">      *-1. when the window scroll over 100px, the back to top will shown</span></span><br><span class=\"line\"><span class=\"comment\">      *-2. use a html markup template</span></span><br><span class=\"line\"><span class=\"comment\">      *-3. when the button is clicked, the window scroll to very top of the document and button much disppear at the same time</span></span><br><span class=\"line\"><span class=\"comment\">      *-4. will impletement as an jquery plugin</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      $.fn.backToTop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> defaults = &#123;</span><br><span class=\"line\">          width: <span class=\"string\">'4em'</span>,</span><br><span class=\"line\">          height: <span class=\"string\">'4em'</span>,</span><br><span class=\"line\">          background: <span class=\"string\">'#a12321'</span>,</span><br><span class=\"line\">          top: <span class=\"string\">'90%'</span>,</span><br><span class=\"line\">          lineHeight: <span class=\"string\">'4em'</span>,</span><br><span class=\"line\">          right: <span class=\"string\">'2em'</span>,</span><br><span class=\"line\">          display:<span class=\"string\">'none'</span>,</span><br><span class=\"line\">          textAlign: <span class=\"string\">'center'</span>,</span><br><span class=\"line\">          content: <span class=\"string\">'Top'</span>,</span><br><span class=\"line\">          speed: <span class=\"number\">500</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> selector = &#123;</span><br><span class=\"line\">          btnBack: $(<span class=\"string\">'.backToTop'</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> option = $.extend(&#123;&#125;,defaults,options);</span><br><span class=\"line\">        <span class=\"comment\">//console.log('After embed' + option)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">          <span class=\"comment\">//console.log('Init ...');</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> template = createTemplate();</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(option.width);</span><br><span class=\"line\">          $(<span class=\"string\">'body'</span>).append(template);</span><br><span class=\"line\">          $(<span class=\"string\">'.backToTop'</span>).css(&#123;</span><br><span class=\"line\">            <span class=\"string\">'width'</span>:option.width,</span><br><span class=\"line\">            <span class=\"string\">'height'</span>:option.height,</span><br><span class=\"line\">            <span class=\"string\">'position'</span>:<span class=\"string\">'fixed'</span>,</span><br><span class=\"line\">            <span class=\"string\">'right'</span>:option.right,</span><br><span class=\"line\">            <span class=\"string\">'background'</span>:option.background,</span><br><span class=\"line\">            <span class=\"string\">'top'</span>:option.top,</span><br><span class=\"line\">            <span class=\"string\">'line-height'</span>:option.lineHeight,</span><br><span class=\"line\">            <span class=\"string\">'display'</span>:option.display,</span><br><span class=\"line\">            <span class=\"string\">'text-align'</span>:option.textAlign,</span><br><span class=\"line\">            <span class=\"string\">'cursor'</span>:<span class=\"string\">'pointer'</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"comment\">//console.log('init complete');</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> scroll = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          $(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            scroll = $(<span class=\"keyword\">this</span>).scrollTop();</span><br><span class=\"line\">            <span class=\"comment\">//o.css(\"top\",Math.max(80,260-scroll));</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>($(<span class=\"keyword\">this</span>).scrollTop() &gt; <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">              $(<span class=\"string\">'.backToTop'</span>).show().animate(&#123;<span class=\"attr\">opacity</span>: <span class=\"number\">1</span>&#125;,<span class=\"number\">1300</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              $(<span class=\"string\">'.backToTop'</span>).animate(&#123;<span class=\"attr\">opacity</span>: <span class=\"number\">0</span>&#125;,option.speed).hide();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTemplate</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;div class='backToTop' id='backToTop'&gt;\"</span>+option.content+<span class=\"string\">\"&lt;/div&gt;\"</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//console.log('this = ');</span></span><br><span class=\"line\">        init();</span><br><span class=\"line\">        $(<span class=\"string\">'.backToTop'</span>).bind(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//console.log('trigger click');</span></span><br><span class=\"line\">          $(<span class=\"string\">'body,html'</span>).animate(&#123;<span class=\"attr\">scrollTop</span>:<span class=\"number\">0</span>&#125;,option.speed);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      $(<span class=\"string\">'body'</span>).backToTop();</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck4u6dq1p0008qyvyuwudao28","category_id":"ck4u6dq1m0004qyvyvqjsfdci","_id":"ck4u6dq1x000gqyvym8ov607h"},{"post_id":"ck4u6dq1e0000qyvyl4eoj9oc","category_id":"ck4u6dq1m0004qyvyvqjsfdci","_id":"ck4u6dq1z000kqyvyn65w4fxb"},{"post_id":"ck4u6dq1r000aqyvy2yo493pk","category_id":"ck4u6dq1m0004qyvyvqjsfdci","_id":"ck4u6dq20000mqyvy978sckc7"},{"post_id":"ck4u6dq1k0002qyvy1tpnot64","category_id":"ck4u6dq1r000bqyvy0w485n8w","_id":"ck4u6dq23000rqyvyjlzn61d2"},{"post_id":"ck4u6dq1n0006qyvyq0v6dblp","category_id":"ck4u6dq1m0004qyvyvqjsfdci","_id":"ck4u6dq25000uqyvy5kb33z45"},{"post_id":"ck4u6dq20000lqyvyocrhvycx","category_id":"ck4u6dq1m0004qyvyvqjsfdci","_id":"ck4u6dq26000zqyvymdtykkrs"},{"post_id":"ck4u6dq1v000eqyvy5wqwxkin","category_id":"ck4u6dq22000nqyvy2sovcudy","_id":"ck4u6dq280013qyvyb95sp38r"},{"post_id":"ck4u6dq24000tqyvyf0ptqjol","category_id":"ck4u6dq22000nqyvy2sovcudy","_id":"ck4u6dq290017qyvy3lysv44h"},{"post_id":"ck4u6dq25000yqyvy03xjx9wc","category_id":"ck4u6dq1m0004qyvyvqjsfdci","_id":"ck4u6dq2a001aqyvyv9i4fwpo"},{"post_id":"ck4u6dq1w000fqyvyqy77te7f","category_id":"ck4u6dq22000nqyvy2sovcudy","_id":"ck4u6dq2c001fqyvy5j15oe1u"},{"post_id":"ck4u6dq280016qyvy63pi00rp","category_id":"ck4u6dq1m0004qyvyvqjsfdci","_id":"ck4u6dq2d001iqyvysaswbaik"},{"post_id":"ck4u6dq22000qqyvyi1b1wrj0","category_id":"ck4u6dq280012qyvybvxk51i2","_id":"ck4u6dq2e001nqyvyhghsop1o"},{"post_id":"ck4u6dq290019qyvyr3i9amb8","category_id":"ck4u6dq1m0004qyvyvqjsfdci","_id":"ck4u6dq2g001qqyvyhdlk1ko3"},{"post_id":"ck4u6dq2c001hqyvyieftk5wc","category_id":"ck4u6dq280012qyvybvxk51i2","_id":"ck4u6dq2i001uqyvyrtz28e28"},{"post_id":"ck4u6dq270011qyvya1zc7r33","category_id":"ck4u6dq2a001cqyvy41uenxds","_id":"ck4u6dq2i001wqyvysr0ei1xa"},{"post_id":"ck4u6dq2e001pqyvy6ouu1c0w","category_id":"ck4u6dq2d001lqyvy262bqxo7","_id":"ck4u6dq2j001zqyvyzfjkuw5z"},{"post_id":"ck4u6dq2b001eqyvyi2zdzto9","category_id":"ck4u6dq2d001lqyvy262bqxo7","_id":"ck4u6dq2j0021qyvyqfgdhqks"},{"post_id":"ck4u6dq2h001sqyvy8nog7s9y","category_id":"ck4u6dq1m0004qyvyvqjsfdci","_id":"ck4u6dq2k0024qyvy01dnunuf"}],"PostTag":[{"post_id":"ck4u6dq1z000jqyvy471r6lv9","tag_id":"ck4u6dq1n0005qyvym03b00wo","_id":"ck4u6dq22000pqyvybpwmxsy5"},{"post_id":"ck4u6dq1e0000qyvyl4eoj9oc","tag_id":"ck4u6dq1n0005qyvym03b00wo","_id":"ck4u6dq23000sqyvydhz6h9py"},{"post_id":"ck4u6dq1e0000qyvyl4eoj9oc","tag_id":"ck4u6dq1s000cqyvyw4ex2s86","_id":"ck4u6dq25000xqyvyuczg5nyy"},{"post_id":"ck4u6dq1e0000qyvyl4eoj9oc","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq260010qyvybo9fbk8n"},{"post_id":"ck4u6dq20000lqyvyocrhvycx","tag_id":"ck4u6dq1s000cqyvyw4ex2s86","_id":"ck4u6dq280014qyvywhaiqf9w"},{"post_id":"ck4u6dq20000lqyvyocrhvycx","tag_id":"ck4u6dq1n0005qyvym03b00wo","_id":"ck4u6dq290018qyvywzwblcvo"},{"post_id":"ck4u6dq20000lqyvyocrhvycx","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq2a001bqyvymim8753t"},{"post_id":"ck4u6dq22000qqyvyi1b1wrj0","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq2c001gqyvy9olpixwg"},{"post_id":"ck4u6dq24000tqyvyf0ptqjol","tag_id":"ck4u6dq1n0005qyvym03b00wo","_id":"ck4u6dq2d001jqyvy3oef8lgo"},{"post_id":"ck4u6dq1k0002qyvy1tpnot64","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq2e001oqyvyge4gliv6"},{"post_id":"ck4u6dq1k0002qyvy1tpnot64","tag_id":"ck4u6dq25000wqyvy007d5hr7","_id":"ck4u6dq2h001rqyvyqhdd7as8"},{"post_id":"ck4u6dq270011qyvya1zc7r33","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq2i001vqyvyjn3yaldc"},{"post_id":"ck4u6dq280016qyvy63pi00rp","tag_id":"ck4u6dq25000wqyvy007d5hr7","_id":"ck4u6dq2i001xqyvy0oh4ykgi"},{"post_id":"ck4u6dq290019qyvyr3i9amb8","tag_id":"ck4u6dq25000wqyvy007d5hr7","_id":"ck4u6dq2j0020qyvyraadh7km"},{"post_id":"ck4u6dq2c001hqyvyieftk5wc","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq2j0022qyvycs7dxoo8"},{"post_id":"ck4u6dq1n0006qyvyq0v6dblp","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq2k0025qyvy4c6or0si"},{"post_id":"ck4u6dq1n0006qyvyq0v6dblp","tag_id":"ck4u6dq2a001dqyvyprypc4xe","_id":"ck4u6dq2k0026qyvy99kgry5z"},{"post_id":"ck4u6dq1p0008qyvyuwudao28","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq2k0028qyvyy9sfxyjr"},{"post_id":"ck4u6dq1p0008qyvyuwudao28","tag_id":"ck4u6dq2a001dqyvyprypc4xe","_id":"ck4u6dq2l0029qyvyrqclnp64"},{"post_id":"ck4u6dq1r000aqyvy2yo493pk","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq2l002bqyvyw78f1jw9"},{"post_id":"ck4u6dq1r000aqyvy2yo493pk","tag_id":"ck4u6dq2a001dqyvyprypc4xe","_id":"ck4u6dq2l002cqyvylnt08mz9"},{"post_id":"ck4u6dq1v000eqyvy5wqwxkin","tag_id":"ck4u6dq2k0027qyvyf2rwivl5","_id":"ck4u6dq2l002eqyvyf5gchxei"},{"post_id":"ck4u6dq1w000fqyvyqy77te7f","tag_id":"ck4u6dq2l002aqyvyim5wwyzl","_id":"ck4u6dq2m002gqyvyselr6db1"},{"post_id":"ck4u6dq1w000fqyvyqy77te7f","tag_id":"ck4u6dq2l002dqyvym6sb7fx1","_id":"ck4u6dq2m002hqyvy1xazv21s"},{"post_id":"ck4u6dq25000yqyvy03xjx9wc","tag_id":"ck4u6dq2a001dqyvyprypc4xe","_id":"ck4u6dq2m002jqyvy6cgvcmty"},{"post_id":"ck4u6dq2b001eqyvyi2zdzto9","tag_id":"ck4u6dq2m002iqyvy89z2bthe","_id":"ck4u6dq2n002mqyvyp6xu4gu2"},{"post_id":"ck4u6dq2b001eqyvyi2zdzto9","tag_id":"ck4u6dq1n0005qyvym03b00wo","_id":"ck4u6dq2n002nqyvymedg92hy"},{"post_id":"ck4u6dq2b001eqyvyi2zdzto9","tag_id":"ck4u6dq2k0027qyvyf2rwivl5","_id":"ck4u6dq2o002pqyvy02of0d2v"},{"post_id":"ck4u6dq2d001kqyvyc2fznb8k","tag_id":"ck4u6dq2k0027qyvyf2rwivl5","_id":"ck4u6dq2o002qqyvy2m16vrng"},{"post_id":"ck4u6dq2d001kqyvyc2fznb8k","tag_id":"ck4u6dq2a001dqyvyprypc4xe","_id":"ck4u6dq2o002sqyvy2nlazvfd"},{"post_id":"ck4u6dq2d001kqyvyc2fznb8k","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq2o002tqyvym0z5bctz"},{"post_id":"ck4u6dq2e001pqyvy6ouu1c0w","tag_id":"ck4u6dq2n002oqyvy4nka3p6r","_id":"ck4u6dq2p002uqyvylkl1q68n"},{"post_id":"ck4u6dq2e001pqyvy6ouu1c0w","tag_id":"ck4u6dq1x000iqyvy05ubjn1q","_id":"ck4u6dq2p002vqyvymxyg4e37"},{"post_id":"ck4u6dq2h001sqyvy8nog7s9y","tag_id":"ck4u6dq2k0027qyvyf2rwivl5","_id":"ck4u6dq2p002wqyvyyvuqemus"},{"post_id":"ck4u6dq2h001sqyvy8nog7s9y","tag_id":"ck4u6dq2a001dqyvyprypc4xe","_id":"ck4u6dq2p002xqyvy70yszm3q"}],"Tag":[{"name":"语言学习","_id":"ck4u6dq1n0005qyvym03b00wo"},{"name":"OSGi","_id":"ck4u6dq1s000cqyvyw4ex2s86"},{"name":"笔记","_id":"ck4u6dq1x000iqyvy05ubjn1q"},{"name":"personal","_id":"ck4u6dq25000wqyvy007d5hr7"},{"name":"工具","_id":"ck4u6dq2a001dqyvyprypc4xe"},{"name":"jQuery","_id":"ck4u6dq2k0027qyvyf2rwivl5"},{"name":"Mockito","_id":"ck4u6dq2l002aqyvyim5wwyzl"},{"name":"JUnit","_id":"ck4u6dq2l002dqyvym6sb7fx1"},{"name":"Javascript","_id":"ck4u6dq2m002iqyvy89z2bthe"},{"name":"RESTful","_id":"ck4u6dq2n002oqyvy4nka3p6r"}]}}